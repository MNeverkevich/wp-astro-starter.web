<?php

namespace PoPContainer\GatoGraphQL;

use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\ContainerInterface;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Container;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Exception\LogicException;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Exception\RuntimeException;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class SystemServiceContainer extends \PoP\Root\Container\Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'GatoGraphQL\\GatoGraphQL\\ConditionalOnContext\\Admin\\SystemServices\\TableActions\\ModuleListTableAction' => 'getModuleListTableActionService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\ConfigureSchemaNamespacingCompilerPass' => 'getConfigureSchemaNamespacingCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass' => 'getRegisterCustomPostTypeCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass' => 'getRegisterEndpointBlockCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointExecuterCompilerPass' => 'getRegisterEndpointExecuterCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass' => 'getRegisterEndpointSchemaConfigurationExecuterCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterGraphQLEndpointPathProviderCompilerPass' => 'getRegisterGraphQLEndpointPathProviderCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass' => 'getRegisterModuleTypeResolverCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass' => 'getRegisterSchemaConfigBlockCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterTaxonomyCompilerPass' => 'getRegisterTaxonomyCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass' => 'getRegisterUserAuthorizationSchemeCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass' => 'getRegisterModuleResolverCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterSettingsCategoryResolverCompilerPass' => 'getRegisterSettingsCategoryResolverCompilerPassService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver' => 'getClientFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver' => 'getDeprecatedClientFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver' => 'getEndpointConfigurationFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver' => 'getEndpointFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver' => 'getPowerBundleExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver' => 'getPowerExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver' => 'getPremiumBundleExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver' => 'getPremiumExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver' => 'getMetaSchemaTypeModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver' => 'getMutationSchemaTypeModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver' => 'getPluginGeneralSettingsFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver' => 'getPluginManagementFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver' => 'getSchemaConfigurationFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver' => 'getSchemaTypeModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver' => 'getUserInterfaceFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\CustomPostTypeRegistryInterface' => 'getCustomPostTypeRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\ModuleRegistryInterface' => 'getModuleRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\SettingsCategoryRegistryInterface' => 'getSettingsCategoryRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\TaxonomyRegistryInterface' => 'getTaxonomyRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\UserAuthorizationSchemeRegistryInterface' => 'getUserAuthorizationSchemeRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationInterface' => 'getUserAuthorizationInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme' => 'getAdministratorRoleUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme' => 'getDownToAuthorRoleUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme' => 'getDownToEditorRoleUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme' => 'getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType' => 'getGraphQLSchemaConfigurationCustomPostTypeService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EndpointHelpers' => 'getEndpointHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\MenuPageHelper' => 'getMenuPageHelperService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModulesMenuPage' => 'getModulesMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Menus\\PluginMenu' => 'getPluginMenuService',
            'GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver' => 'getSettingsCategoryResolverService',
            'GatoGraphQL\\GatoGraphQL\\Settings\\OptionNamespacerInterface' => 'getOptionNamespacerInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Settings\\SettingsNormalizerInterface' => 'getSettingsNormalizerInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\WPDataModel\\WPDataModelProviderInterface' => 'getWPDataModelProviderInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass' => 'getConfigureGraphQLPersistedQueryCompilerPassService',
            'GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\RegisterMandatoryOperationDirectiveServiceTagCompilerPass' => 'getRegisterMandatoryOperationDirectiveServiceTagCompilerPassService',
            'PoPCMSSchema\\Categories\\Container\\CompilerPasses\\RegisterCategoryObjectTypeResolverPickerCompilerPass' => 'getRegisterCategoryObjectTypeResolverPickerCompilerPassService',
            'PoPCMSSchema\\CustomPosts\\Container\\CompilerPasses\\RegisterCustomPostObjectTypeResolverPickerCompilerPass' => 'getRegisterCustomPostObjectTypeResolverPickerCompilerPassService',
            'PoPCMSSchema\\Tags\\Container\\CompilerPasses\\RegisterTagObjectTypeResolverPickerCompilerPass' => 'getRegisterTagObjectTypeResolverPickerCompilerPassService',
            'PoPWPSchema\\PageBuilder\\Container\\CompilerPasses\\RegisterPageBuilderProviderCompilerPass' => 'getRegisterPageBuilderProviderCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass' => 'getAfterBootAttachExtensionCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass' => 'getBootAttachExtensionCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\ModuleLoadedAttachExtensionCompilerPass' => 'getModuleLoadedAttachExtensionCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterComponentFilterCompilerPass' => 'getRegisterComponentFilterCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass' => 'getRegisterDataStructureFormatterCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass' => 'getRegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldDirectiveResolverCompilerPass' => 'getRegisterFieldDirectiveResolverCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryFieldDirectiveServiceTagCompilerPass' => 'getRegisterMandatoryFieldDirectiveServiceTagCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMetaFieldDirectiveResolverCompilerPass' => 'getRegisterMetaFieldDirectiveResolverCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterObjectSerializerCompilerPass' => 'getRegisterObjectSerializerCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass' => 'getRegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPassService',
            'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass' => 'getRegisterTypeResolverCompilerPassService',
            'PoP\\ComponentRouting\\Container\\CompilerPasses\\RegisterComponentRoutingProcessorCompilerPass' => 'getRegisterComponentRoutingProcessorCompilerPassService',
            'PoP\\Root\\Container\\CompilerPasses\\RegisterAppStateProviderCompilerPass' => 'getRegisterAppStateProviderCompilerPassService',
            'PoP\\Root\\Container\\CompilerPasses\\RegisterFeedbackItemProviderCompilerPass' => 'getRegisterFeedbackItemProviderCompilerPassService',
            'PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass' => 'getAutomaticallyInstantiatedServiceCompilerPassService',
            'PoP\\Root\\Container\\HybridCompilerPasses\\SetInstanceManagerOnBasicServiceCompilerPass' => 'getSetInstanceManagerOnBasicServiceCompilerPassService',
            'PoP\\Root\\Container\\ServiceInstantiatorInterface' => 'getServiceInstantiatorInterfaceService',
            'PoP\\Root\\Instances\\InstanceManagerInterface' => 'getInstanceManagerInterfaceService',
            'PoP\\Root\\Registries\\CompilerPassRegistryInterface' => 'getCompilerPassRegistryInterfaceService',
            'PoP\\Root\\Translation\\TranslationAPIInterface' => 'getTranslationAPIInterfaceService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolverInterface' => true,
        ];
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ConditionalOnContext\Admin\SystemServices\TableActions\ModuleListTableAction' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ConditionalOnContext\Admin\SystemServices\TableActions\ModuleListTableAction
     */
    protected static function getModuleListTableActionService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ConditionalOnContext\\Admin\\SystemServices\\TableActions\\ModuleListTableAction'] = $instance = new \GatoGraphQL\GatoGraphQL\ConditionalOnContext\Admin\SystemServices\TableActions\ModuleListTableAction();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\ConfigureSchemaNamespacingCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\ConfigureSchemaNamespacingCompilerPass
     */
    protected static function getConfigureSchemaNamespacingCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\ConfigureSchemaNamespacingCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\ConfigureSchemaNamespacingCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass
     */
    protected static function getRegisterCustomPostTypeCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointBlockCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointBlockCompilerPass
     */
    protected static function getRegisterEndpointBlockCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointBlockCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointExecuterCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointExecuterCompilerPass
     */
    protected static function getRegisterEndpointExecuterCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointExecuterCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointExecuterCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass
     */
    protected static function getRegisterEndpointSchemaConfigurationExecuterCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterGraphQLEndpointPathProviderCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterGraphQLEndpointPathProviderCompilerPass
     */
    protected static function getRegisterGraphQLEndpointPathProviderCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterGraphQLEndpointPathProviderCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterGraphQLEndpointPathProviderCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass
     */
    protected static function getRegisterModuleTypeResolverCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass
     */
    protected static function getRegisterSchemaConfigBlockCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterTaxonomyCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterTaxonomyCompilerPass
     */
    protected static function getRegisterTaxonomyCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterTaxonomyCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterTaxonomyCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass
     */
    protected static function getRegisterUserAuthorizationSchemeCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass
     */
    protected static function getRegisterModuleResolverCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterSettingsCategoryResolverCompilerPass' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterSettingsCategoryResolverCompilerPass
     */
    protected static function getRegisterSettingsCategoryResolverCompilerPassService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterSettingsCategoryResolverCompilerPass'] = new \GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterSettingsCategoryResolverCompilerPass();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\ClientFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\ClientFunctionalityModuleResolver
     */
    protected static function getClientFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\ClientFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\DeprecatedClientFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\DeprecatedClientFunctionalityModuleResolver
     */
    protected static function getDeprecatedClientFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\DeprecatedClientFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointConfigurationFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointConfigurationFunctionalityModuleResolver
     */
    protected static function getEndpointConfigurationFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointConfigurationFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointFunctionalityModuleResolver
     */
    protected static function getEndpointFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerBundleExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerBundleExtensionModuleResolver
     */
    protected static function getPowerBundleExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerBundleExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerExtensionModuleResolver
     */
    protected static function getPowerExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumBundleExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumBundleExtensionModuleResolver
     */
    protected static function getPremiumBundleExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumBundleExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumExtensionModuleResolver
     */
    protected static function getPremiumExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\MetaSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\MetaSchemaTypeModuleResolver
     */
    protected static function getMetaSchemaTypeModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\MetaSchemaTypeModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\MutationSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\MutationSchemaTypeModuleResolver
     */
    protected static function getMutationSchemaTypeModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\MutationSchemaTypeModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginGeneralSettingsFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginGeneralSettingsFunctionalityModuleResolver
     */
    protected static function getPluginGeneralSettingsFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginGeneralSettingsFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginManagementFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginManagementFunctionalityModuleResolver
     */
    protected static function getPluginManagementFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginManagementFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver
     */
    protected static function getSchemaConfigurationFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaTypeModuleResolver
     */
    protected static function getSchemaTypeModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaTypeModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\UserInterfaceFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\UserInterfaceFunctionalityModuleResolver
     */
    protected static function getUserInterfaceFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\UserInterfaceFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\CustomPostTypeRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\CustomPostTypeRegistry
     */
    protected static function getCustomPostTypeRegistryInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\CustomPostTypeRegistryInterface'] = new \GatoGraphQL\GatoGraphQL\Registries\CustomPostTypeRegistry();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\ModuleRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\ModuleRegistry
     */
    protected static function getModuleRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\ModuleRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\ModuleRegistry();

        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver'] ?? self::getClientFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver'] ?? self::getDeprecatedClientFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver'] ?? self::getEndpointConfigurationFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] ?? self::getEndpointFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver'] ?? self::getPowerBundleExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver'] ?? self::getPowerExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver'] ?? self::getPremiumBundleExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver'] ?? self::getPremiumExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] ?? self::getMetaSchemaTypeModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] ?? self::getMutationSchemaTypeModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver'] ?? self::getPluginGeneralSettingsFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] ?? self::getPluginManagementFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] ?? self::getSchemaConfigurationFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver'] ?? self::getSchemaTypeModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] ?? self::getUserInterfaceFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\SettingsCategoryRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\SettingsCategoryRegistry
     */
    protected static function getSettingsCategoryRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\SettingsCategoryRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\SettingsCategoryRegistry();

        $instance->addSettingsCategoryResolver(($container->services['GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver'] ?? self::getSettingsCategoryResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\TaxonomyRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\TaxonomyRegistry
     */
    protected static function getTaxonomyRegistryInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\TaxonomyRegistryInterface'] = new \GatoGraphQL\GatoGraphQL\Registries\TaxonomyRegistry();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\UserAuthorizationSchemeRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\UserAuthorizationSchemeRegistry
     */
    protected static function getUserAuthorizationSchemeRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\UserAuthorizationSchemeRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\UserAuthorizationSchemeRegistry();

        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme'] ?? self::getAdministratorRoleUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme');
        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme'] ?? self::getDownToAuthorRoleUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme');
        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme'] ?? self::getDownToEditorRoleUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme');
        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme'] ?? self::getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorization
     */
    protected static function getUserAuthorizationInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorization();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\AdministratorRoleUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\AdministratorRoleUserAuthorizationScheme
     */
    protected static function getAdministratorRoleUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\AdministratorRoleUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToAuthorRoleUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToAuthorRoleUserAuthorizationScheme
     */
    protected static function getDownToAuthorRoleUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToAuthorRoleUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToEditorRoleUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToEditorRoleUserAuthorizationScheme
     */
    protected static function getDownToEditorRoleUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToEditorRoleUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\ManageGraphQLSchemaCapabilityUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\ManageGraphQLSchemaCapabilityUserAuthorizationScheme
     */
    protected static function getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\ManageGraphQLSchemaCapabilityUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType
     */
    protected static function getGraphQLSchemaConfigurationCustomPostTypeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointHelpers
     */
    protected static function getEndpointHelpersService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EndpointHelpers'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointHelpers();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\MenuPageHelper' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\MenuPageHelper
     */
    protected static function getMenuPageHelperService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\MenuPageHelper'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\MenuPageHelper();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ModulesMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ModulesMenuPage
     */
    protected static function getModulesMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModulesMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ModulesMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Menus\PluginMenu' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Menus\PluginMenu
     */
    protected static function getPluginMenuService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Menus\\PluginMenu'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Menus\PluginMenu();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\SettingsCategoryResolvers\SettingsCategoryResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\SettingsCategoryResolvers\SettingsCategoryResolver
     */
    protected static function getSettingsCategoryResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\SettingsCategoryResolvers\SettingsCategoryResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Settings\OptionNamespacerInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Settings\OptionNamespacer
     */
    protected static function getOptionNamespacerInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Settings\\OptionNamespacerInterface'] = new \GatoGraphQL\GatoGraphQL\Settings\OptionNamespacer();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Settings\SettingsNormalizerInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Settings\SettingsNormalizer
     */
    protected static function getSettingsNormalizerInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Settings\\SettingsNormalizerInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Settings\SettingsNormalizer();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\WPDataModel\WPDataModelProviderInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\WPDataModel\WPDataModelProvider
     */
    protected static function getWPDataModelProviderInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\WPDataModel\\WPDataModelProviderInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\WPDataModel\WPDataModelProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\SystemInstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass
     */
    protected static function getConfigureGraphQLPersistedQueryCompilerPassService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass'] = new \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Container\CompilerPasses\RegisterMandatoryOperationDirectiveServiceTagCompilerPass' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\RegisterMandatoryOperationDirectiveServiceTagCompilerPass
     */
    protected static function getRegisterMandatoryOperationDirectiveServiceTagCompilerPassService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\RegisterMandatoryOperationDirectiveServiceTagCompilerPass'] = new \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\RegisterMandatoryOperationDirectiveServiceTagCompilerPass();
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\Container\CompilerPasses\RegisterCategoryObjectTypeResolverPickerCompilerPass' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\Container\CompilerPasses\RegisterCategoryObjectTypeResolverPickerCompilerPass
     */
    protected static function getRegisterCategoryObjectTypeResolverPickerCompilerPassService($container)
    {
        return $container->services['PoPCMSSchema\\Categories\\Container\\CompilerPasses\\RegisterCategoryObjectTypeResolverPickerCompilerPass'] = new \PoPCMSSchema\Categories\Container\CompilerPasses\RegisterCategoryObjectTypeResolverPickerCompilerPass();
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\Container\CompilerPasses\RegisterCustomPostObjectTypeResolverPickerCompilerPass' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\Container\CompilerPasses\RegisterCustomPostObjectTypeResolverPickerCompilerPass
     */
    protected static function getRegisterCustomPostObjectTypeResolverPickerCompilerPassService($container)
    {
        return $container->services['PoPCMSSchema\\CustomPosts\\Container\\CompilerPasses\\RegisterCustomPostObjectTypeResolverPickerCompilerPass'] = new \PoPCMSSchema\CustomPosts\Container\CompilerPasses\RegisterCustomPostObjectTypeResolverPickerCompilerPass();
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\Container\CompilerPasses\RegisterTagObjectTypeResolverPickerCompilerPass' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\Container\CompilerPasses\RegisterTagObjectTypeResolverPickerCompilerPass
     */
    protected static function getRegisterTagObjectTypeResolverPickerCompilerPassService($container)
    {
        return $container->services['PoPCMSSchema\\Tags\\Container\\CompilerPasses\\RegisterTagObjectTypeResolverPickerCompilerPass'] = new \PoPCMSSchema\Tags\Container\CompilerPasses\RegisterTagObjectTypeResolverPickerCompilerPass();
    }

    /**
     * Gets the public 'PoPWPSchema\PageBuilder\Container\CompilerPasses\RegisterPageBuilderProviderCompilerPass' shared autowired service.
     *
     * @return \PoPWPSchema\PageBuilder\Container\CompilerPasses\RegisterPageBuilderProviderCompilerPass
     */
    protected static function getRegisterPageBuilderProviderCompilerPassService($container)
    {
        return $container->services['PoPWPSchema\\PageBuilder\\Container\\CompilerPasses\\RegisterPageBuilderProviderCompilerPass'] = new \PoPWPSchema\PageBuilder\Container\CompilerPasses\RegisterPageBuilderProviderCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass
     */
    protected static function getAfterBootAttachExtensionCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass
     */
    protected static function getBootAttachExtensionCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\ModuleLoadedAttachExtensionCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\ModuleLoadedAttachExtensionCompilerPass
     */
    protected static function getModuleLoadedAttachExtensionCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\ModuleLoadedAttachExtensionCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\ModuleLoadedAttachExtensionCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterComponentFilterCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterComponentFilterCompilerPass
     */
    protected static function getRegisterComponentFilterCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterComponentFilterCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterComponentFilterCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass
     */
    protected static function getRegisterDataStructureFormatterCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass
     */
    protected static function getRegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterFieldDirectiveResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterFieldDirectiveResolverCompilerPass
     */
    protected static function getRegisterFieldDirectiveResolverCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldDirectiveResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterFieldDirectiveResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryFieldDirectiveServiceTagCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryFieldDirectiveServiceTagCompilerPass
     */
    protected static function getRegisterMandatoryFieldDirectiveServiceTagCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryFieldDirectiveServiceTagCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryFieldDirectiveServiceTagCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterMetaFieldDirectiveResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterMetaFieldDirectiveResolverCompilerPass
     */
    protected static function getRegisterMetaFieldDirectiveResolverCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMetaFieldDirectiveResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterMetaFieldDirectiveResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterObjectSerializerCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterObjectSerializerCompilerPass
     */
    protected static function getRegisterObjectSerializerCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterObjectSerializerCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterObjectSerializerCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass
     */
    protected static function getRegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass
     */
    protected static function getRegisterTypeResolverCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass'] = new \PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass();
    }

    /**
     * Gets the public 'PoP\ComponentRouting\Container\CompilerPasses\RegisterComponentRoutingProcessorCompilerPass' shared autowired service.
     *
     * @return \PoP\ComponentRouting\Container\CompilerPasses\RegisterComponentRoutingProcessorCompilerPass
     */
    protected static function getRegisterComponentRoutingProcessorCompilerPassService($container)
    {
        return $container->services['PoP\\ComponentRouting\\Container\\CompilerPasses\\RegisterComponentRoutingProcessorCompilerPass'] = new \PoP\ComponentRouting\Container\CompilerPasses\RegisterComponentRoutingProcessorCompilerPass();
    }

    /**
     * Gets the public 'PoP\Root\Container\CompilerPasses\RegisterAppStateProviderCompilerPass' shared autowired service.
     *
     * @return \PoP\Root\Container\CompilerPasses\RegisterAppStateProviderCompilerPass
     */
    protected static function getRegisterAppStateProviderCompilerPassService($container)
    {
        return $container->services['PoP\\Root\\Container\\CompilerPasses\\RegisterAppStateProviderCompilerPass'] = new \PoP\Root\Container\CompilerPasses\RegisterAppStateProviderCompilerPass();
    }

    /**
     * Gets the public 'PoP\Root\Container\CompilerPasses\RegisterFeedbackItemProviderCompilerPass' shared autowired service.
     *
     * @return \PoP\Root\Container\CompilerPasses\RegisterFeedbackItemProviderCompilerPass
     */
    protected static function getRegisterFeedbackItemProviderCompilerPassService($container)
    {
        return $container->services['PoP\\Root\\Container\\CompilerPasses\\RegisterFeedbackItemProviderCompilerPass'] = new \PoP\Root\Container\CompilerPasses\RegisterFeedbackItemProviderCompilerPass();
    }

    /**
     * Gets the public 'PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass' shared autowired service.
     *
     * @return \PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass
     */
    protected static function getAutomaticallyInstantiatedServiceCompilerPassService($container)
    {
        return $container->services['PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass'] = new \PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass();
    }

    /**
     * Gets the public 'PoP\Root\Container\HybridCompilerPasses\SetInstanceManagerOnBasicServiceCompilerPass' shared autowired service.
     *
     * @return \PoP\Root\Container\HybridCompilerPasses\SetInstanceManagerOnBasicServiceCompilerPass
     */
    protected static function getSetInstanceManagerOnBasicServiceCompilerPassService($container)
    {
        return $container->services['PoP\\Root\\Container\\HybridCompilerPasses\\SetInstanceManagerOnBasicServiceCompilerPass'] = new \PoP\Root\Container\HybridCompilerPasses\SetInstanceManagerOnBasicServiceCompilerPass();
    }

    /**
     * Gets the public 'PoP\Root\Container\ServiceInstantiatorInterface' shared autowired service.
     *
     * @return \PoP\Root\Container\ServiceInstantiator
     */
    protected static function getServiceInstantiatorInterfaceService($container)
    {
        $container->services['PoP\\Root\\Container\\ServiceInstantiatorInterface'] = $instance = new \PoP\Root\Container\ServiceInstantiator();

        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme'] ?? self::getAdministratorRoleUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme'] ?? self::getDownToAuthorRoleUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme'] ?? self::getDownToEditorRoleUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme'] ?? self::getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\ConditionalOnContext\\Admin\\SystemServices\\TableActions\\ModuleListTableAction'] ?? self::getModuleListTableActionService($container)));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Instances\InstanceManagerInterface' shared autowired service.
     *
     * @return \PoP\Root\Instances\SystemInstanceManager
     */
    protected static function getInstanceManagerInterfaceService($container)
    {
        return $container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] = new \PoP\Root\Instances\SystemInstanceManager();
    }

    /**
     * Gets the public 'PoP\Root\Registries\CompilerPassRegistryInterface' shared autowired service.
     *
     * @return \PoP\Root\Registries\CompilerPassRegistry
     */
    protected static function getCompilerPassRegistryInterfaceService($container)
    {
        $container->services['PoP\\Root\\Registries\\CompilerPassRegistryInterface'] = $instance = new \PoP\Root\Registries\CompilerPassRegistry();

        $instance->addCompilerPass(($container->services['PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass'] ??= new \PoP\Root\Container\HybridCompilerPasses\AutomaticallyInstantiatedServiceCompilerPass()), 'PoP\\Root\\Container\\HybridCompilerPasses\\AutomaticallyInstantiatedServiceCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\Root\\Container\\HybridCompilerPasses\\SetInstanceManagerOnBasicServiceCompilerPass'] ??= new \PoP\Root\Container\HybridCompilerPasses\SetInstanceManagerOnBasicServiceCompilerPass()), 'PoP\\Root\\Container\\HybridCompilerPasses\\SetInstanceManagerOnBasicServiceCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\Root\\Container\\CompilerPasses\\RegisterAppStateProviderCompilerPass'] ??= new \PoP\Root\Container\CompilerPasses\RegisterAppStateProviderCompilerPass()), 'PoP\\Root\\Container\\CompilerPasses\\RegisterAppStateProviderCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\Root\\Container\\CompilerPasses\\RegisterFeedbackItemProviderCompilerPass'] ??= new \PoP\Root\Container\CompilerPasses\RegisterFeedbackItemProviderCompilerPass()), 'PoP\\Root\\Container\\CompilerPasses\\RegisterFeedbackItemProviderCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentRouting\\Container\\CompilerPasses\\RegisterComponentRoutingProcessorCompilerPass'] ??= new \PoP\ComponentRouting\Container\CompilerPasses\RegisterComponentRoutingProcessorCompilerPass()), 'PoP\\ComponentRouting\\Container\\CompilerPasses\\RegisterComponentRoutingProcessorCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\AfterBootAttachExtensionCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\AfterBootAttachExtensionCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\BootAttachExtensionCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\BootAttachExtensionCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\ModuleLoadedAttachExtensionCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\ModuleLoadedAttachExtensionCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\ModuleLoadedAttachExtensionCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterComponentFilterCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterComponentFilterCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterComponentFilterCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterDataStructureFormatterCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDataStructureFormatterCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterDynamicVariableDefinerFieldDirectiveResolverCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldDirectiveResolverCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterFieldDirectiveResolverCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterFieldDirectiveResolverCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryFieldDirectiveServiceTagCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterMandatoryFieldDirectiveServiceTagCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMandatoryFieldDirectiveServiceTagCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMetaFieldDirectiveResolverCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterMetaFieldDirectiveResolverCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterMetaFieldDirectiveResolverCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterObjectSerializerCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterObjectSerializerCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterObjectSerializerCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterOperationDependencyDefinerFieldDirectiveResolverCompilerPass');
        $instance->addCompilerPass(($container->services['PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass'] ??= new \PoP\ComponentModel\Container\CompilerPasses\RegisterTypeResolverCompilerPass()), 'PoP\\ComponentModel\\Container\\CompilerPasses\\RegisterTypeResolverCompilerPass');
        $instance->addCompilerPass(($container->services['GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass'] ??= new \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\ConfigureGraphQLPersistedQueryCompilerPass()), 'GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\ConfigureGraphQLPersistedQueryCompilerPass');
        $instance->addCompilerPass(($container->services['GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\RegisterMandatoryOperationDirectiveServiceTagCompilerPass'] ??= new \GraphQLByPoP\GraphQLServer\Container\CompilerPasses\RegisterMandatoryOperationDirectiveServiceTagCompilerPass()), 'GraphQLByPoP\\GraphQLServer\\Container\\CompilerPasses\\RegisterMandatoryOperationDirectiveServiceTagCompilerPass');
        $instance->addCompilerPass(($container->services['PoPCMSSchema\\CustomPosts\\Container\\CompilerPasses\\RegisterCustomPostObjectTypeResolverPickerCompilerPass'] ??= new \PoPCMSSchema\CustomPosts\Container\CompilerPasses\RegisterCustomPostObjectTypeResolverPickerCompilerPass()), 'PoPCMSSchema\\CustomPosts\\Container\\CompilerPasses\\RegisterCustomPostObjectTypeResolverPickerCompilerPass');
        $instance->addCompilerPass(($container->services['PoPCMSSchema\\Categories\\Container\\CompilerPasses\\RegisterCategoryObjectTypeResolverPickerCompilerPass'] ??= new \PoPCMSSchema\Categories\Container\CompilerPasses\RegisterCategoryObjectTypeResolverPickerCompilerPass()), 'PoPCMSSchema\\Categories\\Container\\CompilerPasses\\RegisterCategoryObjectTypeResolverPickerCompilerPass');
        $instance->addCompilerPass(($container->services['PoPCMSSchema\\Tags\\Container\\CompilerPasses\\RegisterTagObjectTypeResolverPickerCompilerPass'] ??= new \PoPCMSSchema\Tags\Container\CompilerPasses\RegisterTagObjectTypeResolverPickerCompilerPass()), 'PoPCMSSchema\\Tags\\Container\\CompilerPasses\\RegisterTagObjectTypeResolverPickerCompilerPass');
        $instance->addCompilerPass(($container->services['PoPWPSchema\\PageBuilder\\Container\\CompilerPasses\\RegisterPageBuilderProviderCompilerPass'] ??= new \PoPWPSchema\PageBuilder\Container\CompilerPasses\RegisterPageBuilderProviderCompilerPass()), 'PoPWPSchema\\PageBuilder\\Container\\CompilerPasses\\RegisterPageBuilderProviderCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\ConfigureSchemaNamespacingCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\ConfigureSchemaNamespacingCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\ConfigureSchemaNamespacingCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterCustomPostTypeCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterCustomPostTypeCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointBlockCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointBlockCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointExecuterCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointExecuterCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointExecuterCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterEndpointSchemaConfigurationExecuterCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterEndpointSchemaConfigurationExecuterCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterGraphQLEndpointPathProviderCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterGraphQLEndpointPathProviderCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterGraphQLEndpointPathProviderCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterModuleTypeResolverCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterModuleTypeResolverCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterSchemaConfigBlockCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterSchemaConfigBlockCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterTaxonomyCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterTaxonomyCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterTaxonomyCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\CompilerPasses\RegisterUserAuthorizationSchemeCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\CompilerPasses\\RegisterUserAuthorizationSchemeCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterModuleResolverCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterModuleResolverCompilerPass');
        $instance->addCompilerPass(($container->services['GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterSettingsCategoryResolverCompilerPass'] ??= new \GatoGraphQL\GatoGraphQL\Container\HybridCompilerPasses\RegisterSettingsCategoryResolverCompilerPass()), 'GatoGraphQL\\GatoGraphQL\\Container\\HybridCompilerPasses\\RegisterSettingsCategoryResolverCompilerPass');

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Translation\TranslationAPIInterface' shared autowired service.
     *
     * @return \PoP\RootWP\Translation\TranslationAPI
     */
    protected static function getTranslationAPIInterfaceService($container)
    {
        return $container->services['PoP\\Root\\Translation\\TranslationAPIInterface'] = new \PoP\RootWP\Translation\TranslationAPI();
    }
}
