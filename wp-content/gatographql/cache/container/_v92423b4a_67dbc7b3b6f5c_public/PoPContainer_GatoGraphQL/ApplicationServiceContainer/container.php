<?php

namespace PoPContainer\GatoGraphQL;

use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\ContainerInterface;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Container;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Exception\LogicException;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\Exception\RuntimeException;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use GatoExternalPrefixByGatoGraphQL\Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ApplicationServiceContainer extends \PoP\Root\Container\Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'GatoGraphQL\\GatoGraphQL\\Container\\ContainerManagerInterface' => 'getContainerManagerInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\ContentProcessors\\MarkdownContentParserInterface' => 'getMarkdownContentParserInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\FeedbackItemProviders\\ErrorFeedbackItemProvider' => 'getErrorFeedbackItemProviderService',
            'GatoGraphQL\\GatoGraphQL\\Hooks\\ApplicationPasswordAuthorizationHookSet' => 'getApplicationPasswordAuthorizationHookSetService',
            'GatoGraphQL\\GatoGraphQL\\Log\\LoggerInterface' => 'getLoggerInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Marketplace\\LicenseValidationServiceInterface' => 'getLicenseValidationServiceInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Marketplace\\MarketplaceProviderCommercialExtensionActivationServiceInterface' => 'getMarketplaceProviderCommercialExtensionActivationServiceInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Marketplace\\MarketplaceProviderCommercialPluginUpdaterServiceInterface' => 'getMarketplaceProviderCommercialPluginUpdaterServiceInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver' => 'getClientFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver' => 'getDeprecatedClientFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver' => 'getEndpointConfigurationFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver' => 'getEndpointFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver' => 'getPowerBundleExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver' => 'getPowerExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver' => 'getPremiumBundleExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver' => 'getPremiumExtensionModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver' => 'getMetaSchemaTypeModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver' => 'getMutationSchemaTypeModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver' => 'getPluginGeneralSettingsFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver' => 'getPluginManagementFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver' => 'getSchemaConfigurationFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver' => 'getSchemaTypeModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver' => 'getUserInterfaceFunctionalityModuleResolverService',
            'GatoGraphQL\\GatoGraphQL\\PluginDataSetup\\PluginDataSetupServiceInterface' => 'getPluginDataSetupServiceInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\CustomPostTypeRegistryInterface' => 'getCustomPostTypeRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\EndpointBlockRegistryInterface' => 'getEndpointBlockRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\EndpointExecuterRegistryInterface' => 'getEndpointExecuterRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\EndpointSchemaConfigurationExecuterRegistryInterface' => 'getEndpointSchemaConfigurationExecuterRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\GraphQLEndpointPathProviderRegistryInterface' => 'getGraphQLEndpointPathProviderRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\ModuleRegistryInterface' => 'getModuleRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\ModuleTypeRegistryInterface' => 'getModuleTypeRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\SchemaConfigBlockRegistryInterface' => 'getSchemaConfigBlockRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\SettingsCategoryRegistryInterface' => 'getSettingsCategoryRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\TaxonomyRegistryInterface' => 'getTaxonomyRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Registries\\UserAuthorizationSchemeRegistryInterface' => 'getUserAuthorizationSchemeRegistryInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Request\\PrematureRequestServiceInterface' => 'getPrematureRequestServiceInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationInterface' => 'getUserAuthorizationInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme' => 'getAdministratorRoleUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme' => 'getDownToAuthorRoleUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme' => 'getDownToEditorRoleUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme' => 'getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Aggregators\\BundleExtensionAggregator' => 'getBundleExtensionAggregatorService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Aggregators\\ModuleAggregator' => 'getModuleAggregatorService',
            'GatoGraphQL\\GatoGraphQL\\Services\\BlockCategories\\EndpointBlockCategory' => 'getEndpointBlockCategoryService',
            'GatoGraphQL\\GatoGraphQL\\Services\\BlockCategories\\SchemaConfigurationBlockCategory' => 'getSchemaConfigurationBlockCategoryService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\EndpointSchemaConfigurationBlock' => 'getEndpointSchemaConfigurationBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigComposableDirectivesBlock' => 'getSchemaConfigComposableDirectivesBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigExposeSensitiveDataBlock' => 'getSchemaConfigExposeSensitiveDataBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigGlobalFieldsBlock' => 'getSchemaConfigGlobalFieldsBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMultiFieldDirectivesBlock' => 'getSchemaConfigMultiFieldDirectivesBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMutationSchemeBlock' => 'getSchemaConfigMutationSchemeBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigNamespacingBlock' => 'getSchemaConfigNamespacingBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigPayloadTypesForMutationsBlock' => 'getSchemaConfigPayloadTypesForMutationsBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigResponseHeadersBlock' => 'getSchemaConfigResponseHeadersBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCategoriesBlock' => 'getSchemaConfigSchemaCategoriesBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCommentMetaBlock' => 'getSchemaConfigSchemaCommentMetaBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostMetaBlock' => 'getSchemaConfigSchemaCustomPostMetaBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostsBlock' => 'getSchemaConfigSchemaCustomPostsBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaSettingsBlock' => 'getSchemaConfigSchemaSettingsBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTagsBlock' => 'getSchemaConfigSchemaTagsBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTaxonomyMetaBlock' => 'getSchemaConfigSchemaTaxonomyMetaBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaUserMetaBlock' => 'getSchemaConfigSchemaUserMetaBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSelfFieldsBlock' => 'getSchemaConfigSelfFieldsBlockService',
            'GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType' => 'getGraphQLSchemaConfigurationCustomPostTypeService',
            'GatoGraphQL\\GatoGraphQL\\Services\\DataProviders\\TutorialLessonDataProvider' => 'getTutorialLessonDataProviderService',
            'GatoGraphQL\\GatoGraphQL\\Services\\EditorScripts\\SchemaConfigurationAdditionalDocumentationEditorScript' => 'getSchemaConfigurationAdditionalDocumentationEditorScriptService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Endpoint\\EndpointExecuterService' => 'getEndpointExecuterServiceService',
            'GatoGraphQL\\GatoGraphQL\\Services\\GraphQLEndpointPathProviders\\GraphQLSingleEndpointPathProvider' => 'getGraphQLSingleEndpointPathProviderService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\BlockHelpers' => 'getBlockHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\BlockRenderingHelpers' => 'getBlockRenderingHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\CPTUtils' => 'getCPTUtilsService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EditorHelpers' => 'getEditorHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EndpointBlockHelpers' => 'getEndpointBlockHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EndpointHelpers' => 'getEndpointHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\HookNamespacingHelpers' => 'getHookNamespacingHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\LocaleHelper' => 'getLocaleHelperService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\MenuPageHelper' => 'getMenuPageHelperService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\RenderingHelpers' => 'getRenderingHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\UserSettingsHelpers' => 'getUserSettingsHelpersService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Hooks\\PrintEndpointInEditorHookSet' => 'getPrintEndpointInEditorHookSetService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Hooks\\QueryHookSet' => 'getQueryHookSetService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\BottomMenuPageAttacher' => 'getBottomMenuPageAttacherService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\SingleEndpointClientMenuPageAttacher' => 'getSingleEndpointClientMenuPageAttacherService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\TopMenuPageAttacher' => 'getTopMenuPageAttacherService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\AboutMenuPage' => 'getAboutMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionDocModuleDocumentationMenuPage' => 'getExtensionDocModuleDocumentationMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionDocsMenuPage' => 'getExtensionDocsMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionModuleDocumentationMenuPage' => 'getExtensionModuleDocumentationMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionsMenuPage' => 'getExtensionsMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\GraphQLVoyagerMenuPage' => 'getGraphQLVoyagerMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\GraphiQLMenuPage' => 'getGraphiQLMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModuleDocumentationMenuPage' => 'getModuleDocumentationMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModulesMenuPage' => 'getModulesMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ReleaseNotesAboutMenuPage' => 'getReleaseNotesAboutMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\SettingsMenuPage' => 'getSettingsMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\TutorialMenuPage' => 'getTutorialMenuPageService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Menus\\PluginMenu' => 'getPluginMenuService',
            'GatoGraphQL\\GatoGraphQL\\Services\\ModuleTypeResolvers\\ModuleTypeResolver' => 'getModuleTypeResolverService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ComposableDirectivesBlockSchemaConfigurationExecuter' => 'getComposableDirectivesBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ExposeSensitiveDataBlockSchemaConfigurationExecuter' => 'getExposeSensitiveDataBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\GlobalFieldsBlockSchemaConfigurationExecuter' => 'getGlobalFieldsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MultiFieldDirectivesBlockSchemaConfigurationExecuter' => 'getMultiFieldDirectivesBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MutationSchemeBlockSchemaConfigurationExecuter' => 'getMutationSchemeBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\NamespacingBlockSchemaConfigurationExecuter' => 'getNamespacingBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ResponseHeadersBlockSchemaConfigurationExecuter' => 'getResponseHeadersBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoriesBlockSchemaConfigurationExecuter' => 'getSchemaCategoriesBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoryMutationsBlockSchemaConfigurationExecuter' => 'getSchemaCategoryMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMetaBlockSchemaConfigurationExecuter' => 'getSchemaCommentMetaBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMutationsBlockSchemaConfigurationExecuter' => 'getSchemaCommentMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuter' => 'getSchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuter' => 'getSchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMetaBlockSchemaConfigurationExecuter' => 'getSchemaCustomPostMetaBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMutationsBlockSchemaConfigurationExecuter' => 'getSchemaCustomPostMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostTagMutationsBlockSchemaConfigurationExecuter' => 'getSchemaCustomPostTagMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostsBlockSchemaConfigurationExecuter' => 'getSchemaCustomPostsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaMediaMutationsBlockSchemaConfigurationExecuter' => 'getSchemaMediaMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaSettingsBlockSchemaConfigurationExecuter' => 'getSchemaSettingsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagMutationsBlockSchemaConfigurationExecuter' => 'getSchemaTagMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagsBlockSchemaConfigurationExecuter' => 'getSchemaTagsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTaxonomyMetaBlockSchemaConfigurationExecuter' => 'getSchemaTaxonomyMetaBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserMetaBlockSchemaConfigurationExecuter' => 'getSchemaUserMetaBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserStateMutationsBlockSchemaConfigurationExecuter' => 'getSchemaUserStateMutationsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SelfFieldsBlockSchemaConfigurationExecuter' => 'getSelfFieldsBlockSchemaConfigurationExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfiguratorExecuters\\PrivateEndpointSchemaConfiguratorExecuter' => 'getPrivateEndpointSchemaConfiguratorExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfiguratorExecuters\\SingleEndpointSchemaConfiguratorExecuter' => 'getSingleEndpointSchemaConfiguratorExecuterService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurators\\PrivateEndpointSchemaConfigurator' => 'getPrivateEndpointSchemaConfiguratorService',
            'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurators\\SingleEndpointSchemaConfigurator' => 'getSingleEndpointSchemaConfiguratorService',
            'GatoGraphQL\\GatoGraphQL\\Services\\Taxonomies\\GraphQLEndpointCategoryTaxonomy' => 'getGraphQLEndpointCategoryTaxonomyService',
            'GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver' => 'getSettingsCategoryResolverService',
            'GatoGraphQL\\GatoGraphQL\\Settings\\OptionNamespacerInterface' => 'getOptionNamespacerInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\Settings\\SettingsNormalizerInterface' => 'getSettingsNormalizerInterfaceService',
            'GatoGraphQL\\GatoGraphQL\\State\\AppStateProvider' => 'getAppStateProviderService',
            'GatoGraphQL\\GatoGraphQL\\State\\ExecutingGraphQLRequestAppStateProvider' => 'getExecutingGraphQLRequestAppStateProviderService',
            'GatoGraphQL\\GatoGraphQL\\WPDataModel\\WPDataModelProviderInterface' => 'getWPDataModelProviderInterfaceService',
            'GatoGraphQL\\PluginUtils\\Services\\Helpers\\StringConversion' => 'getStringConversionService',
            'GatoGraphQL\\PluginUtils\\Services\\Helpers\\URLParamHelpers' => 'getURLParamHelpersService',
            'GraphQLByPoP\\GraphQLClientsForWP\\Clients\\GraphiQLClient' => 'getGraphiQLClientService',
            'GraphQLByPoP\\GraphQLClientsForWP\\Clients\\VoyagerClient' => 'getVoyagerClientService',
            'GraphQLByPoP\\GraphQLEndpointForWP\\EndpointHandlers\\GraphQLEndpointHandler' => 'getGraphQLEndpointHandlerService',
            'GraphQLByPoP\\GraphQLEndpointForWP\\State\\GraphQLEndpointHandlerAppStateProvider' => 'getGraphQLEndpointHandlerAppStateProviderService',
            'GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface' => 'getQueryRetrieverInterfaceService',
            'GraphQLByPoP\\GraphQLRequest\\State\\AppStateProvider' => 'getAppStateProvider2Service',
            'GraphQLByPoP\\GraphQLServer\\AppStateProviderServices\\GraphQLServerAppStateProviderServiceInterface' => 'getGraphQLServerAppStateProviderServiceInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\ComponentProcessors\\GraphQLRelationalFieldQueryDataComponentProcessor' => 'getGraphQLRelationalFieldQueryDataComponentProcessorService',
            'GraphQLByPoP\\GraphQLServer\\ComponentProcessors\\RootRelationalFieldDataloadComponentProcessor' => 'getRootRelationalFieldDataloadComponentProcessorService',
            'GraphQLByPoP\\GraphQLServer\\ComponentProcessors\\SuperRootGraphQLRelationalFieldDataloadComponentProcessor' => 'getSuperRootGraphQLRelationalFieldDataloadComponentProcessorService',
            'GraphQLByPoP\\GraphQLServer\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessorService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\DirectiveExtensionsObjectTypeFieldResolver' => 'getDirectiveExtensionsObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\DirectiveObjectTypeFieldResolver' => 'getDirectiveObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\EnumValueExtensionsObjectTypeFieldResolver' => 'getEnumValueExtensionsObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\EnumValueObjectTypeFieldResolver' => 'getEnumValueObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\DirectiveSchemaObjectTypeFieldResolver' => 'getDirectiveSchemaObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\FilterSystemDirectiveSchemaObjectTypeFieldResolver' => 'getFilterSystemDirectiveSchemaObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\SchemaObjectTypeFieldResolver' => 'getSchemaObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\TypeObjectTypeFieldResolver' => 'getTypeObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\FieldExtensionsObjectTypeFieldResolver' => 'getFieldExtensionsObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\FieldObjectTypeFieldResolver' => 'getFieldObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\GlobalObjectTypeFieldResolver' => 'getGlobalObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\InputValueExtensionsObjectTypeFieldResolver' => 'getInputValueExtensionsObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\InputValueObjectTypeFieldResolver' => 'getInputValueObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\NamedTypeExtensionsObjectTypeFieldResolver' => 'getNamedTypeExtensionsObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\RegisterQueryAndMutationRootsRootObjectTypeFieldResolver' => 'getRegisterQueryAndMutationRootsRootObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SchemaExtensionsObjectTypeFieldResolver' => 'getSchemaExtensionsObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SchemaObjectTypeFieldResolver' => 'getSchemaObjectTypeFieldResolver2Service',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SuperRootObjectTypeFieldResolver' => 'getSuperRootObjectTypeFieldResolverService',
            'GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\TypeObjectTypeFieldResolver' => 'getTypeObjectTypeFieldResolver2Service',
            'GraphQLByPoP\\GraphQLServer\\Helpers\\TypeResolverHelperInterface' => 'getTypeResolverHelperInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\DBEntriesHookSet' => 'getDBEntriesHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\NestedMutationHookSet' => 'getNestedMutationHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\RemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSet' => 'getRemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\RemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSet' => 'getRemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\SchemaCacheHookSet' => 'getSchemaCacheHookSetService',
            'GraphQLByPoP\\GraphQLServer\\Hooks\\VarsHookSet' => 'getVarsHookSetService',
            'GraphQLByPoP\\GraphQLServer\\IFTTT\\MandatoryDirectivesForFieldsRootTypeEntryDuplicatorInterface' => 'getMandatoryDirectivesForFieldsRootTypeEntryDuplicatorInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\ObjectModels\\MutationRoot' => 'getMutationRootService',
            'GraphQLByPoP\\GraphQLServer\\ObjectModels\\QueryRoot' => 'getQueryRootService',
            'GraphQLByPoP\\GraphQLServer\\QueryResolution\\GraphQLQueryASTTransformationServiceInterface' => 'getGraphQLQueryASTTransformationServiceInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\Registries\\MandatoryOperationDirectiveResolverRegistryInterface' => 'getMandatoryOperationDirectiveResolverRegistryInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\Registries\\SchemaDefinitionReferenceRegistryInterface' => 'getSchemaDefinitionReferenceRegistryInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\MutationRootObjectTypeDataLoader' => 'getMutationRootObjectTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\QueryRootObjectTypeDataLoader' => 'getQueryRootObjectTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\SchemaDefinitionReferenceObjectTypeDataLoader' => 'getSchemaDefinitionReferenceObjectTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\SchemaObjectTypeDataLoader' => 'getSchemaObjectTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\WrappingTypeOrSchemaDefinitionReferenceObjectTypeDataLoader' => 'getWrappingTypeOrSchemaDefinitionReferenceObjectTypeDataLoaderService',
            'GraphQLByPoP\\GraphQLServer\\Schema\\GraphQLSchemaDefinitionServiceInterface' => 'getGraphQLSchemaDefinitionServiceInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\State\\AppStateProvider' => 'getAppStateProvider3Service',
            'GraphQLByPoP\\GraphQLServer\\Syntax\\GraphQLSyntaxServiceInterface' => 'getGraphQLSyntaxServiceInterfaceService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveKindEnumTypeResolver' => 'getDirectiveKindEnumTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveLocationEnumTypeResolver' => 'getDirectiveLocationEnumTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\TypeKindEnumTypeResolver' => 'getTypeKindEnumTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveExtensionsObjectTypeResolver' => 'getDirectiveExtensionsObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveObjectTypeResolver' => 'getDirectiveObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueExtensionsObjectTypeResolver' => 'getEnumValueExtensionsObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueObjectTypeResolver' => 'getEnumValueObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldExtensionsObjectTypeResolver' => 'getFieldExtensionsObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldObjectTypeResolver' => 'getFieldObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueExtensionsObjectTypeResolver' => 'getInputValueExtensionsObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueObjectTypeResolver' => 'getInputValueObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\MutationRootObjectTypeResolver' => 'getMutationRootObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\NamedTypeExtensionsObjectTypeResolver' => 'getNamedTypeExtensionsObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\QueryRootObjectTypeResolver' => 'getQueryRootObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaExtensionsObjectTypeResolver' => 'getSchemaExtensionsObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaObjectTypeResolver' => 'getSchemaObjectTypeResolverService',
            'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\TypeObjectTypeResolver' => 'getTypeObjectTypeResolverService',
            'PoPAPI\\APIEndpointsForWP\\EndpointHandlers\\NativeAPIEndpointHandler' => 'getNativeAPIEndpointHandlerService',
            'PoPAPI\\APIEndpointsForWP\\State\\NativeAPIEndpointHandlerAppStateProvider' => 'getNativeAPIEndpointHandlerAppStateProviderService',
            'PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter' => 'getMirrorQueryDataStructureFormatterService',
            'PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter' => 'getPropertyMirrorQueryDataStructureFormatterService',
            'PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter' => 'getXMLMirrorQueryDataStructureFormatterService',
            'PoPAPI\\API\\ComponentProcessors\\RelationalFieldQueryDataComponentProcessor' => 'getRelationalFieldQueryDataComponentProcessorService',
            'PoPAPI\\API\\ComponentProcessors\\RootRelationalFieldDataloadComponentProcessor' => 'getRootRelationalFieldDataloadComponentProcessor2Service',
            'PoPAPI\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor2Service',
            'PoPAPI\\API\\FeedbackItemProviders\\FeedbackItemProvider' => 'getFeedbackItemProviderService',
            'PoPAPI\\API\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver2Service',
            'PoPAPI\\API\\HelperServices\\ApplicationStateFillerServiceInterface' => 'getApplicationStateFillerServiceInterfaceService',
            'PoPAPI\\API\\Hooks\\DBEntriesHookSet' => 'getDBEntriesHookSet2Service',
            'PoPAPI\\API\\Hooks\\RoutingHookSet' => 'getRoutingHookSetService',
            'PoPAPI\\API\\Hooks\\VarsHookSet' => 'getVarsHookSet2Service',
            'PoPAPI\\API\\PersistedQueries\\PersistedFragmentManagerInterface' => 'getPersistedFragmentManagerInterfaceService',
            'PoPAPI\\API\\PersistedQueries\\PersistedQueryManagerInterface' => 'getPersistedQueryManagerInterfaceService',
            'PoPAPI\\API\\QueryParsing\\GraphQLParserHelperServiceInterface' => 'getGraphQLParserHelperServiceInterfaceService',
            'PoPAPI\\API\\QueryResolution\\QueryASTTransformationServiceInterface' => 'getQueryASTTransformationServiceInterfaceService',
            'PoPAPI\\API\\Schema\\SchemaDefinitionServiceInterface' => 'getSchemaDefinitionServiceInterfaceService',
            'PoPAPI\\API\\State\\AppStateProvider' => 'getAppStateProvider4Service',
            'PoPAPI\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter' => 'getGraphQLDataStructureFormatterService',
            'PoPCMSSchema\\CategoriesWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSetService',
            'PoPCMSSchema\\CategoriesWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSetService',
            'PoPCMSSchema\\Categories\\ComponentProcessors\\CategoryFilterInputContainerComponentProcessor' => 'getCategoryFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Categories\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessorService',
            'PoPCMSSchema\\Categories\\ConditionalOnModule\\Users\\SchemaHooks\\UserCustomPostsAddCategoryFilterInputObjectTypeHookSet' => 'getUserCustomPostsAddCategoryFilterInputObjectTypeHookSetService',
            'PoPCMSSchema\\Categories\\FieldResolvers\\InterfaceType\\CategoryInterfaceTypeFieldResolver' => 'getCategoryInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCategoryListObjectTypeFieldResolver' => 'getGenericCategoryListObjectTypeFieldResolverService',
            'PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCategoryObjectTypeFieldResolver' => 'getGenericCategoryObjectTypeFieldResolverService',
            'PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCustomPostQueryableObjectTypeFieldResolver' => 'getGenericCustomPostQueryableObjectTypeFieldResolverService',
            'PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\RootCategoryObjectTypeFieldResolver' => 'getRootCategoryObjectTypeFieldResolverService',
            'PoPCMSSchema\\Categories\\FilterInputs\\CategoryIDsFilterInput' => 'getCategoryIDsFilterInputService',
            'PoPCMSSchema\\Categories\\FilterInputs\\CategoryTaxonomyFilterInput' => 'getCategoryTaxonomyFilterInputService',
            'PoPCMSSchema\\Categories\\LooseContracts\\LooseContractSet' => 'getLooseContractSetService',
            'PoPCMSSchema\\Categories\\ObjectTypeResolverPickers\\CategoryUnionGenericCategoryObjectTypeResolverPicker' => 'getCategoryUnionGenericCategoryObjectTypeResolverPickerService',
            'PoPCMSSchema\\Categories\\Registries\\CategoryObjectTypeResolverPickerRegistryInterface' => 'getCategoryObjectTypeResolverPickerRegistryInterfaceService',
            'PoPCMSSchema\\Categories\\RelationalTypeDataLoaders\\ObjectType\\QueryableCategoryListObjectTypeDataLoader' => 'getQueryableCategoryListObjectTypeDataLoaderService',
            'PoPCMSSchema\\Categories\\RelationalTypeDataLoaders\\UnionType\\CategoryUnionTypeDataLoader' => 'getCategoryUnionTypeDataLoaderService',
            'PoPCMSSchema\\Categories\\SchemaHooks\\RootCustomPostsAddCategoryFilterInputObjectTypeHookSet' => 'getRootCustomPostsAddCategoryFilterInputObjectTypeHookSetService',
            'PoPCMSSchema\\Categories\\State\\AppStateProvider' => 'getAppStateProvider5Service',
            'PoPCMSSchema\\Categories\\TypeAPIs\\QueryableCategoryTypeAPIInterface' => 'getQueryableCategoryTypeAPIInterfaceService',
            'PoPCMSSchema\\Categories\\TypeAPIs\\UniversalCategoryTypeAPIInterface' => 'getUniversalCategoryTypeAPIInterfaceService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\EnumType\\CategoryTaxonomyEnumStringScalarTypeResolver' => 'getCategoryTaxonomyEnumStringScalarTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver' => 'getCategoryByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryPaginationInputObjectTypeResolver' => 'getCategoryPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostCategoriesFilterInputObjectTypeResolver' => 'getCustomPostCategoriesFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolver' => 'getCustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\RootCategoriesFilterInputObjectTypeResolver' => 'getRootCategoriesFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\InterfaceType\\CategoryInterfaceTypeResolver' => 'getCategoryInterfaceTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\ObjectType\\GenericCategoryObjectTypeResolver' => 'getGenericCategoryObjectTypeResolverService',
            'PoPCMSSchema\\Categories\\TypeResolvers\\UnionType\\CategoryUnionTypeResolver' => 'getCategoryUnionTypeResolverService',
            'PoPCMSSchema\\CategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProviderService',
            'PoPCMSSchema\\CategoryMutations\\RelationalTypeDataLoaders\\ObjectType\\CategoryTermDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getCategoryTermDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CategoryMutations\\TypeAPIs\\CategoryTypeMutationAPIInterface' => 'getCategoryTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver' => 'getCategoryByOneofInputObjectTypeResolver2Service',
            'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryTermUpdateInputObjectTypeResolver' => 'getCategoryTermUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\ObjectType\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolver' => 'getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet2Service',
            'PoPCMSSchema\\CommentMeta\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver' => 'getCommentObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMeta\\TypeAPIs\\CommentMetaTypeAPIInterface' => 'getCommentMetaTypeAPIInterfaceService',
            'PoPCMSSchema\\CommentMutations\\ComponentProcessors\\CommentFilterInputContainerComponentProcessor' => 'getCommentFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver' => 'getCommentObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver' => 'getCommentObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver' => 'getGenericCustomPostObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\CommentMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider2Service',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentMutationPayloadObjectTypeFieldResolver' => 'getCommentMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getCommentMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver' => 'getCommentObjectTypeFieldResolver4Service',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getCommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getCustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver' => 'getGenericCustomPostObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver4Service',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\UserStateRootObjectTypeFieldResolver' => 'getUserStateRootObjectTypeFieldResolverService',
            'PoPCMSSchema\\CommentMutations\\MutationResolvers\\AddCommentToCustomPostBulkOperationMutationResolver' => 'getAddCommentToCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CommentMutations\\MutationResolvers\\AddCommentToCustomPostMutationResolver' => 'getAddCommentToCustomPostMutationResolverService',
            'PoPCMSSchema\\CommentMutations\\MutationResolvers\\PayloadableAddCommentToCustomPostBulkOperationMutationResolver' => 'getPayloadableAddCommentToCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CommentMutations\\MutationResolvers\\PayloadableAddCommentToCustomPostMutationResolver' => 'getPayloadableAddCommentToCustomPostMutationResolverService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPicker' => 'getCommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPicker' => 'getCommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPicker' => 'getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker' => 'getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeDataLoader' => 'getCommentAuthorEmailIsMissingErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentAuthorNameIsMissingErrorPayloadObjectTypeDataLoader' => 'getCommentAuthorNameIsMissingErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getCommentParentCommentDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeDataLoader' => 'getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader' => 'getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\CommentReplyMutationErrorPayloadUnionTypeDataLoader' => 'getCommentReplyMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\CustomPostAddCommentMutationErrorPayloadUnionTypeDataLoader' => 'getCustomPostAddCommentMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootAddCommentToCustomPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\RootReplyCommentMutationErrorPayloadUnionTypeDataLoader' => 'getRootReplyCommentMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CommentMutations\\SchemaHooks\\RemoveAuthorFilterInputHookSet' => 'getRemoveAuthorFilterInputHookSetService',
            'PoPCMSSchema\\CommentMutations\\TypeAPIs\\CommentTypeMutationAPIInterface' => 'getCommentTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentAsOneofInputObjectTypeResolver' => 'getCommentAsOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentReplyInputObjectTypeResolver' => 'getCommentReplyInputObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CustomPostAddCommentInputObjectTypeResolver' => 'getCustomPostAddCommentInputObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootAddCommentToCustomPostInputObjectTypeResolver' => 'getRootAddCommentToCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootMyCommentsFilterInputObjectTypeResolver' => 'getRootMyCommentsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootReplyCommentInputObjectTypeResolver' => 'getRootReplyCommentInputObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolver' => 'getCommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolver' => 'getCommentAuthorNameIsMissingErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolver' => 'getCommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentReplyMutationPayloadObjectTypeResolver' => 'getCommentReplyMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolver' => 'getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver' => 'getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CustomPostAddCommentMutationPayloadObjectTypeResolver' => 'getCustomPostAddCommentMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootAddCommentToCustomPostMutationPayloadObjectTypeResolver' => 'getRootAddCommentToCustomPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootReplyCommentMutationPayloadObjectTypeResolver' => 'getRootReplyCommentMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CommentReplyMutationErrorPayloadUnionTypeResolver' => 'getCommentReplyMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CustomPostAddCommentMutationErrorPayloadUnionTypeResolver' => 'getCustomPostAddCommentMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolver' => 'getRootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootReplyCommentMutationErrorPayloadUnionTypeResolver' => 'getRootReplyCommentMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CommentsWP\\ConditionalOnModule\\Users\\Hooks\\QueryHookSet' => 'getQueryHookSet3Service',
            'PoPCMSSchema\\CommentsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet2Service',
            'PoPCMSSchema\\Comments\\ComponentProcessors\\CommentFilterInputContainerComponentProcessor' => 'getCommentFilterInputContainerComponentProcessor2Service',
            'PoPCMSSchema\\Comments\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor2Service',
            'PoPCMSSchema\\Comments\\ComponentProcessors\\SingleCommentFilterInputContainerComponentProcessor' => 'getSingleCommentFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\API\\ComponentProcessors\\CommentRelationalFieldDataloadComponentProcessor' => 'getCommentRelationalFieldDataloadComponentProcessorService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor3Service',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\CommentUserObjectTypeFieldResolver' => 'getCommentUserObjectTypeFieldResolverService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\FilterInputs\\CustomPostAuthorIDsFilterInput' => 'getCustomPostAuthorIDsFilterInputService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\FilterInputs\\ExcludeCustomPostAuthorIDsFilterInput' => 'getExcludeCustomPostAuthorIDsFilterInputService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\EnumTypeHookSet' => 'getEnumTypeHookSetService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\FilterInputHookSet' => 'getFilterInputHookSetService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\InputObjectTypeHookSet' => 'getInputObjectTypeHookSetService',
            'PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\TypeAPIs\\CommentTypeAPIInterface' => 'getCommentTypeAPIInterfaceService',
            'PoPCMSSchema\\Comments\\FieldResolvers\\InterfaceType\\CommentableInterfaceTypeFieldResolver' => 'getCommentableInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver' => 'getCommentObjectTypeFieldResolver5Service',
            'PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\CommentableGenericCustomPostObjectTypeFieldResolver' => 'getCommentableGenericCustomPostObjectTypeFieldResolverService',
            'PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver5Service',
            'PoPCMSSchema\\Comments\\FilterInputs\\CommentStatusFilterInput' => 'getCommentStatusFilterInputService',
            'PoPCMSSchema\\Comments\\FilterInputs\\CommentTypesFilterInput' => 'getCommentTypesFilterInputService',
            'PoPCMSSchema\\Comments\\FilterInputs\\CustomPostIDFilterInput' => 'getCustomPostIDFilterInputService',
            'PoPCMSSchema\\Comments\\FilterInputs\\CustomPostIDsFilterInput' => 'getCustomPostIDsFilterInputService',
            'PoPCMSSchema\\Comments\\FilterInputs\\CustomPostStatusFilterInput' => 'getCustomPostStatusFilterInputService',
            'PoPCMSSchema\\Comments\\FilterInputs\\ExcludeCustomPostIDsFilterInput' => 'getExcludeCustomPostIDsFilterInputService',
            'PoPCMSSchema\\Comments\\Hooks\\WhitelistParamHookSet' => 'getWhitelistParamHookSetService',
            'PoPCMSSchema\\Comments\\LooseContracts\\LooseContractSet' => 'getLooseContractSet2Service',
            'PoPCMSSchema\\Comments\\RelationalTypeDataLoaders\\ObjectType\\CommentObjectTypeDataLoader' => 'getCommentObjectTypeDataLoaderService',
            'PoPCMSSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface' => 'getCommentTypeAPIInterface2Service',
            'PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentOrderByEnumTypeResolver' => 'getCommentOrderByEnumTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentStatusEnumTypeResolver' => 'getCommentStatusEnumTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentTypeEnumTypeResolver' => 'getCommentTypeEnumTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentByOneofInputObjectTypeResolver' => 'getCommentByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsePaginationInputObjectTypeResolver' => 'getCommentResponsePaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsesFilterInputObjectTypeResolver' => 'getCommentResponsesFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentSortInputObjectTypeResolver' => 'getCommentSortInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentPaginationInputObjectTypeResolver' => 'getCustomPostCommentPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentsFilterInputObjectTypeResolver' => 'getCustomPostCommentsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCommentAuthorInputObjectTypeResolver' => 'getFilterCommentsByCommentAuthorInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCustomPostAuthorInputObjectTypeResolver' => 'getFilterCommentsByCustomPostAuthorInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentPaginationInputObjectTypeResolver' => 'getRootCommentPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentsFilterInputObjectTypeResolver' => 'getRootCommentsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\InterfaceType\\CommentableInterfaceTypeResolver' => 'getCommentableInterfaceTypeResolverService',
            'PoPCMSSchema\\Comments\\TypeResolvers\\ObjectType\\CommentObjectTypeResolver' => 'getCommentObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider3Service',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver' => 'getCustomPostMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getGenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryMutationPayloadObjectTypeFieldResolver' => 'getGenericCategoryMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getGenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryObjectTypeFieldResolver' => 'getGenericCategoryObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getGenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver' => 'getGenericCustomPostObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getGenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootGenericCategoryCRUDObjectTypeFieldResolver' => 'getRootGenericCategoryCRUDObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver6Service',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\Hooks\\MutationResolverHookSet' => 'getMutationResolverHookSetService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\CreateGenericCategoryTermBulkOperationMutationResolver' => 'getCreateGenericCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\CreateGenericCategoryTermMutationResolver' => 'getCreateGenericCategoryTermMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\DeleteGenericCategoryTermBulkOperationMutationResolver' => 'getDeleteGenericCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\DeleteGenericCategoryTermMutationResolver' => 'getDeleteGenericCategoryTermMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableCreateGenericCategoryTermBulkOperationMutationResolver' => 'getPayloadableCreateGenericCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableCreateGenericCategoryTermMutationResolver' => 'getPayloadableCreateGenericCategoryTermMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableDeleteGenericCategoryTermBulkOperationMutationResolver' => 'getPayloadableDeleteGenericCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableDeleteGenericCategoryTermMutationResolver' => 'getPayloadableDeleteGenericCategoryTermMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnCustomPostBulkOperationMutationResolver' => 'getPayloadableSetCategoriesOnCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnCustomPostMutationResolver' => 'getPayloadableSetCategoriesOnCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableUpdateGenericCategoryTermBulkOperationMutationResolver' => 'getPayloadableUpdateGenericCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableUpdateGenericCategoryTermMutationResolver' => 'getPayloadableUpdateGenericCategoryTermMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\SetCategoriesOnCustomPostBulkOperationMutationResolver' => 'getSetCategoriesOnCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\SetCategoriesOnCustomPostMutationResolver' => 'getSetCategoriesOnCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\UpdateGenericCategoryTermBulkOperationMutationResolver' => 'getUpdateGenericCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\UpdateGenericCategoryTermMutationResolver' => 'getUpdateGenericCategoryTermMutationResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' => 'getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCategoryDeleteMutationErrorPayloadUnionTypeDataLoader' => 'getGenericCategoryDeleteMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCategoryUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getGenericCategoryUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeDataLoader' => 'getGenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\SchemaHooks\\GenericCustomPostMutationResolverHookSet' => 'getGenericCustomPostMutationResolverHookSetService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeAPIs\\CustomPostCategoryTypeMutationAPIInterface' => 'getCustomPostCategoryTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\CategoriesByOneofInputObjectTypeResolver' => 'getCategoriesByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCategoryTermUpdateInputObjectTypeResolver' => 'getGenericCategoryTermUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetCategoriesInputObjectTypeResolver' => 'getGenericCustomPostSetCategoriesInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCategoryTermInputObjectTypeResolver' => 'getRootCreateGenericCategoryTermInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericCategoryTermInputObjectTypeResolver' => 'getRootDeleteGenericCategoryTermInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnCustomPostInputObjectTypeResolver' => 'getRootSetCategoriesOnCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCategoryTermInputObjectTypeResolver' => 'getRootUpdateGenericCategoryTermInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryDeleteMutationPayloadObjectTypeResolver' => 'getGenericCategoryDeleteMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryUpdateMutationPayloadObjectTypeResolver' => 'getGenericCategoryUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetCategoriesMutationPayloadObjectTypeResolver' => 'getGenericCustomPostSetCategoriesMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCategoryTermMutationPayloadObjectTypeResolver' => 'getRootCreateGenericCategoryTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericCategoryTermMutationPayloadObjectTypeResolver' => 'getRootDeleteGenericCategoryTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolver' => 'getRootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCategoryTermMutationPayloadObjectTypeResolver' => 'getRootUpdateGenericCategoryTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryDeleteMutationErrorPayloadUnionTypeResolver' => 'getGenericCategoryDeleteMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryUpdateMutationErrorPayloadUnionTypeResolver' => 'getGenericCategoryUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolver' => 'getGenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolver' => 'getRootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolver' => 'getRootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolver' => 'getRootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolver' => 'getRootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider4Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver' => 'getCustomPostMutationPayloadObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getCustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getCustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver7Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver' => 'getWithFeaturedImageGenericCustomPostObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\Hooks\\CustomPostMutationResolverHookSet' => 'getCustomPostMutationResolverHookSetService',
            'PoPCMSSchema\\CustomPostMediaMutations\\Hooks\\MutationResolverHookSet' => 'getMutationResolverHookSet2Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableRemoveFeaturedImageFromCustomPostBulkOperationMutationResolver' => 'getPayloadableRemoveFeaturedImageFromCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableRemoveFeaturedImageFromCustomPostMutationResolver' => 'getPayloadableRemoveFeaturedImageFromCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableSetFeaturedImageOnCustomPostBulkOperationMutationResolver' => 'getPayloadableSetFeaturedImageOnCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableSetFeaturedImageOnCustomPostMutationResolver' => 'getPayloadableSetFeaturedImageOnCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\RemoveFeaturedImageFromCustomPostBulkOperationMutationResolver' => 'getRemoveFeaturedImageFromCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\RemoveFeaturedImageFromCustomPostMutationResolver' => 'getRemoveFeaturedImageFromCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\SetFeaturedImageOnCustomPostBulkOperationMutationResolver' => 'getSetFeaturedImageOnCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\SetFeaturedImageOnCustomPostMutationResolver' => 'getSetFeaturedImageOnCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\CreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker' => 'getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getMediaItemDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\ObjectType\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader' => 'getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeDataLoader' => 'getCustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeDataLoader' => 'getCustomPostSetFeaturedImageMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeAPIs\\CustomPostMediaTypeMutationAPIInterface' => 'getCustomPostMediaTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\CustomPostSetFeaturedImageInputObjectTypeResolver' => 'getCustomPostSetFeaturedImageInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\FeaturedImageByOneofInputObjectTypeResolver' => 'getFeaturedImageByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootRemoveFeaturedImageFromCustomPostInputObjectTypeResolver' => 'getRootRemoveFeaturedImageFromCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootSetFeaturedImageOnCustomPostInputObjectTypeResolver' => 'getRootSetFeaturedImageOnCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolver' => 'getCustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostSetFeaturedImageMutationPayloadObjectTypeResolver' => 'getCustomPostSetFeaturedImageMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver' => 'getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolver' => 'getRootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolver' => 'getRootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolver' => 'getCustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolver' => 'getCustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolver' => 'getRootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolver' => 'getRootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostMedia\\FieldResolvers\\InterfaceType\\WithFeaturedImageInterfaceTypeFieldResolver' => 'getWithFeaturedImageInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver' => 'getWithFeaturedImageGenericCustomPostObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\CustomPostMedia\\TypeAPIs\\CustomPostMediaTypeAPIInterface' => 'getCustomPostMediaTypeAPIInterfaceService',
            'PoPCMSSchema\\CustomPostMedia\\TypeResolvers\\InterfaceType\\WithFeaturedImageInterfaceTypeResolver' => 'getWithFeaturedImageInterfaceTypeResolverService',
            'PoPCMSSchema\\CustomPostMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet4Service',
            'PoPCMSSchema\\CustomPostMeta\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver' => 'getCustomPostObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMeta\\TypeAPIs\\CustomPostMetaTypeAPIInterface' => 'getCustomPostMetaTypeAPIInterfaceService',
            'PoPCMSSchema\\CustomPostMutationsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet3Service',
            'PoPCMSSchema\\CustomPostMutations\\ComponentProcessors\\CustomPostMutationFilterInputContainerComponentProcessor' => 'getCustomPostMutationFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\CustomPostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet' => 'getRemoveAuthorFilterInputHookSet2Service',
            'PoPCMSSchema\\CustomPostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSet' => 'getRemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSetService',
            'PoPCMSSchema\\CustomPostMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider5Service',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostMutationPayloadObjectTypeFieldResolver' => 'getGenericCustomPostMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getGenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver' => 'getGenericCustomPostObjectTypeFieldResolver4Service',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getGenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver8Service',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver' => 'getRootQueryableObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostMutations\\LooseContracts\\LooseContractSet' => 'getLooseContractSet3Service',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\CreateGenericCustomPostBulkOperationMutationResolver' => 'getCreateGenericCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\CreateGenericCustomPostMutationResolver' => 'getCreateGenericCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableCreateGenericCustomPostBulkOperationMutationResolver' => 'getPayloadableCreateGenericCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableCreateGenericCustomPostMutationResolver' => 'getPayloadableCreateGenericCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableUpdateGenericCustomPostBulkOperationMutationResolver' => 'getPayloadableUpdateGenericCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableUpdateGenericCustomPostMutationResolver' => 'getPayloadableUpdateGenericCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\UpdateGenericCustomPostBulkOperationMutationResolver' => 'getUpdateGenericCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\UpdateGenericCustomPostMutationResolver' => 'getUpdateGenericCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\CustomPostDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCustomPostUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getGenericCustomPostUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreateGenericCustomPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdateGenericCustomPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostMutations\\TypeAPIs\\CustomPostTypeMutationAPIInterface' => 'getCustomPostTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostContentAsOneofInputObjectTypeResolver' => 'getCustomPostContentAsOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostUpdateInputObjectTypeResolver' => 'getCustomPostUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostUpdateInputObjectTypeResolver' => 'getGenericCustomPostUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateCustomPostInputObjectTypeResolver' => 'getRootCreateCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCustomPostInputObjectTypeResolver' => 'getRootCreateGenericCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootMyCustomPostsFilterInputObjectTypeResolver' => 'getRootMyCustomPostsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateCustomPostInputObjectTypeResolver' => 'getRootUpdateCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCustomPostInputObjectTypeResolver' => 'getRootUpdateGenericCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\CustomPostDoesNotExistErrorPayloadObjectTypeResolver' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\GenericCustomPostUpdateMutationPayloadObjectTypeResolver' => 'getGenericCustomPostUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCustomPostMutationPayloadObjectTypeResolver' => 'getRootCreateGenericCustomPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCustomPostMutationPayloadObjectTypeResolver' => 'getRootUpdateGenericCustomPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\GenericCustomPostUpdateMutationErrorPayloadUnionTypeResolver' => 'getGenericCustomPostUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolver' => 'getRootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolver' => 'getRootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider6Service',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver' => 'getCustomPostMutationPayloadObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver' => 'getGenericCustomPostObjectTypeFieldResolver5Service',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getGenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getGenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagMutationPayloadObjectTypeFieldResolver' => 'getGenericTagMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getGenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagObjectTypeFieldResolver' => 'getGenericTagObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getGenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootGenericTagCRUDObjectTypeFieldResolver' => 'getRootGenericTagCRUDObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver9Service',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\Hooks\\MutationResolverHookSet' => 'getMutationResolverHookSet3Service',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\CreateGenericTagTermBulkOperationMutationResolver' => 'getCreateGenericTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\CreateGenericTagTermMutationResolver' => 'getCreateGenericTagTermMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\DeleteGenericTagTermBulkOperationMutationResolver' => 'getDeleteGenericTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\DeleteGenericTagTermMutationResolver' => 'getDeleteGenericTagTermMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableCreateGenericTagTermBulkOperationMutationResolver' => 'getPayloadableCreateGenericTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableCreateGenericTagTermMutationResolver' => 'getPayloadableCreateGenericTagTermMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableDeleteGenericTagTermBulkOperationMutationResolver' => 'getPayloadableDeleteGenericTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableDeleteGenericTagTermMutationResolver' => 'getPayloadableDeleteGenericTagTermMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableSetTagsOnCustomPostBulkOperationMutationResolver' => 'getPayloadableSetTagsOnCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableSetTagsOnCustomPostMutationResolver' => 'getPayloadableSetTagsOnCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableUpdateGenericTagTermBulkOperationMutationResolver' => 'getPayloadableUpdateGenericTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableUpdateGenericTagTermMutationResolver' => 'getPayloadableUpdateGenericTagTermMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\SetTagsOnCustomPostBulkOperationMutationResolver' => 'getSetTagsOnCustomPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\SetTagsOnCustomPostMutationResolver' => 'getSetTagsOnCustomPostMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\UpdateGenericTagTermBulkOperationMutationResolver' => 'getUpdateGenericTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\UpdateGenericTagTermMutationResolver' => 'getUpdateGenericTagTermMutationResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker5Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\GenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getGenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker5Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getTagTermDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' => 'getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker5Service',
            'PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeDataLoader' => 'getGenericCustomPostSetTagsMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\GenericTagDeleteMutationErrorPayloadUnionTypeDataLoader' => 'getGenericTagDeleteMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\GenericTagUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getGenericTagUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateGenericTagTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreateGenericTagTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootDeleteGenericTagTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootSetTagsOnCustomPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdateGenericTagTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostTagMutations\\SchemaHooks\\GenericCustomPostMutationResolverHookSet' => 'getGenericCustomPostMutationResolverHookSet2Service',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeAPIs\\CustomPostTagTypeMutationAPIInterface' => 'getCustomPostTagTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetTagsInputObjectTypeResolver' => 'getGenericCustomPostSetTagsInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericTagTermUpdateInputObjectTypeResolver' => 'getGenericTagTermUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericTagTermInputObjectTypeResolver' => 'getRootCreateGenericTagTermInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericTagTermInputObjectTypeResolver' => 'getRootDeleteGenericTagTermInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnCustomPostInputObjectTypeResolver' => 'getRootSetTagsOnCustomPostInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericTagTermInputObjectTypeResolver' => 'getRootUpdateGenericTagTermInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\TagsByOneofInputObjectTypeResolver' => 'getTagsByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetTagsMutationPayloadObjectTypeResolver' => 'getGenericCustomPostSetTagsMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagDeleteMutationPayloadObjectTypeResolver' => 'getGenericTagDeleteMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagUpdateMutationPayloadObjectTypeResolver' => 'getGenericTagUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootCreateGenericTagTermMutationPayloadObjectTypeResolver' => 'getRootCreateGenericTagTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericTagTermMutationPayloadObjectTypeResolver' => 'getRootDeleteGenericTagTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnCustomPostMutationPayloadObjectTypeResolver' => 'getRootSetTagsOnCustomPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericTagTermMutationPayloadObjectTypeResolver' => 'getRootUpdateGenericTagTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolver' => 'getGenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagDeleteMutationErrorPayloadUnionTypeResolver' => 'getGenericTagDeleteMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagUpdateMutationErrorPayloadUnionTypeResolver' => 'getGenericTagUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootCreateGenericTagTermMutationErrorPayloadUnionTypeResolver' => 'getRootCreateGenericTagTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolver' => 'getRootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolver' => 'getRootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolver' => 'getRootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\CustomPostUserMutationsWP\\Hooks\\CustomPostMutationTypeAPIQueryHookSet' => 'getCustomPostMutationTypeAPIQueryHookSetService',
            'PoPCMSSchema\\CustomPostUserMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider7Service',
            'PoPCMSSchema\\CustomPostUserMutations\\Hooks\\CustomPostMutationResolverHookSet' => 'getCustomPostMutationResolverHookSet2Service',
            'PoPCMSSchema\\CustomPostUserMutations\\Hooks\\MutationResolverHookSet' => 'getMutationResolverHookSet4Service',
            'PoPCMSSchema\\CustomPostUserMutations\\ObjectTypeResolverPickers\\CreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPostUserMutations\\RelationalTypeDataLoaders\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getUserDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\InputObjectType\\AuthorByOneofInputObjectTypeResolver' => 'getAuthorByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver' => 'getUserDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\CustomPostsWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet2Service',
            'PoPCMSSchema\\CustomPostsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet4Service',
            'PoPCMSSchema\\CustomPosts\\ComponentProcessors\\CommonCustomPostFilterInputContainerComponentProcessor' => 'getCommonCustomPostFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\CustomPosts\\ComponentProcessors\\CustomPostFilterInputContainerComponentProcessor' => 'getCustomPostFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\CustomPosts\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor4Service',
            'PoPCMSSchema\\CustomPosts\\ConditionalOnModule\\API\\ComponentProcessors\\CustomPostRelationalFieldDataloadComponentProcessor' => 'getCustomPostRelationalFieldDataloadComponentProcessorService',
            'PoPCMSSchema\\CustomPosts\\FieldResolvers\\InterfaceType\\CustomPostInterfaceTypeFieldResolver' => 'getCustomPostInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver' => 'getCustomPostObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\CustomPosts\\FieldResolvers\\ObjectType\\RootCustomPostListObjectTypeFieldResolver' => 'getRootCustomPostListObjectTypeFieldResolverService',
            'PoPCMSSchema\\CustomPosts\\FilterInputs\\CustomPostStatusFilterInput' => 'getCustomPostStatusFilterInput2Service',
            'PoPCMSSchema\\CustomPosts\\FilterInputs\\CustomPostTypesFilterInput' => 'getCustomPostTypesFilterInputService',
            'PoPCMSSchema\\CustomPosts\\FilterInputs\\UnionCustomPostTypesFilterInput' => 'getUnionCustomPostTypesFilterInputService',
            'PoPCMSSchema\\CustomPosts\\Hooks\\VarsHookSet' => 'getVarsHookSet3Service',
            'PoPCMSSchema\\CustomPosts\\LooseContracts\\LooseContractSet' => 'getLooseContractSet4Service',
            'PoPCMSSchema\\CustomPosts\\ObjectTypeResolverPickers\\CustomPostUnionGenericCustomPostObjectTypeResolverPicker' => 'getCustomPostUnionGenericCustomPostObjectTypeResolverPickerService',
            'PoPCMSSchema\\CustomPosts\\Registries\\CustomPostObjectTypeResolverPickerRegistryInterface' => 'getCustomPostObjectTypeResolverPickerRegistryInterfaceService',
            'PoPCMSSchema\\CustomPosts\\RelationalTypeDataLoaders\\ObjectType\\CustomPostObjectTypeDataLoader' => 'getCustomPostObjectTypeDataLoaderService',
            'PoPCMSSchema\\CustomPosts\\RelationalTypeDataLoaders\\UnionType\\CustomPostUnionTypeDataLoader' => 'getCustomPostUnionTypeDataLoaderService',
            'PoPCMSSchema\\CustomPosts\\State\\AppStateProvider' => 'getAppStateProvider6Service',
            'PoPCMSSchema\\CustomPosts\\TypeAPIs\\CustomPostTypeAPIInterface' => 'getCustomPostTypeAPIInterfaceService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostEnumStringScalarTypeResolver' => 'getCustomPostEnumStringScalarTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostOrderByEnumTypeResolver' => 'getCustomPostOrderByEnumTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostStatusEnumTypeResolver' => 'getCustomPostStatusEnumTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\FilterCustomPostStatusEnumTypeResolver' => 'getFilterCustomPostStatusEnumTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostByOneofInputObjectTypeResolver' => 'getCustomPostByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostPaginationInputObjectTypeResolver' => 'getCustomPostPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostSortInputObjectTypeResolver' => 'getCustomPostSortInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootCustomPostsFilterInputObjectTypeResolver' => 'getRootCustomPostsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootPredefinedCustomPostsFilterInputObjectTypeResolver' => 'getRootPredefinedCustomPostsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InterfaceType\\CustomPostInterfaceTypeResolver' => 'getCustomPostInterfaceTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\ObjectType\\GenericCustomPostObjectTypeResolver' => 'getGenericCustomPostObjectTypeResolverService',
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\UnionType\\CustomPostUnionTypeResolver' => 'getCustomPostUnionTypeResolverService',
            'PoPCMSSchema\\MediaMutationsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet5Service',
            'PoPCMSSchema\\MediaMutations\\ComponentProcessors\\MyMediaFilterInputContainerComponentProcessor' => 'getMyMediaFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\Hooks\\MutationResolverHookSet' => 'getMutationResolverHookSet5Service',
            'PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker6Service',
            'PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\SchemaHooks\\AddCustomPostInputFieldsInputObjectTypeHookSet' => 'getAddCustomPostInputFieldsInputObjectTypeHookSetService',
            'PoPCMSSchema\\MediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider8Service',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaItemMutationPayloadObjectTypeFieldResolver' => 'getMediaItemMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getMediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver' => 'getMediaObjectTypeFieldResolverService',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getMediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver10Service',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\UserStateRootObjectTypeFieldResolver' => 'getUserStateRootObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\MediaMutations\\LooseContracts\\LooseContractSet' => 'getLooseContractSet5Service',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\CreateMediaItemBulkOperationMutationResolver' => 'getCreateMediaItemBulkOperationMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\CreateMediaItemMutationResolver' => 'getCreateMediaItemMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableCreateMediaItemBulkOperationMutationResolver' => 'getPayloadableCreateMediaItemBulkOperationMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableCreateMediaItemMutationResolver' => 'getPayloadableCreateMediaItemMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableUpdateMediaItemBulkOperationMutationResolver' => 'getPayloadableUpdateMediaItemBulkOperationMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableUpdateMediaItemMutationResolver' => 'getPayloadableUpdateMediaItemMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\UpdateMediaItemBulkOperationMutationResolver' => 'getUpdateMediaItemBulkOperationMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\MutationResolvers\\UpdateMediaItemMutationResolver' => 'getUpdateMediaItemMutationResolverService',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker7Service',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker6Service',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getUserDoesNotExistErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPicker' => 'getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPicker' => 'getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker6Service',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\MediaItemDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getMediaItemDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getUserDoesNotExistErrorPayloadObjectTypeDataLoader2Service',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeDataLoader' => 'getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeDataLoader' => 'getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\UnionType\\MediaUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getMediaUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateMediaItemMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreateMediaItemMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateMediaItemMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdateMediaItemMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\MediaMutations\\SchemaHooks\\RemoveAuthorFilterInputHookSet' => 'getRemoveAuthorFilterInputHookSet3Service',
            'PoPCMSSchema\\MediaMutations\\TypeAPIs\\MediaTypeMutationAPIInterface' => 'getMediaTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromContentInputObjectTypeResolver' => 'getCreateMediaItemFromContentInputObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromOneofInputObjectTypeResolver' => 'getCreateMediaItemFromOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromURLInputObjectTypeResolver' => 'getCreateMediaItemFromURLInputObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\MediaUpdateInputObjectTypeResolver' => 'getMediaUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootCreateMediaItemInputObjectTypeResolver' => 'getRootCreateMediaItemInputObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootMyMediaItemsFilterInputObjectTypeResolver' => 'getRootMyMediaItemsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootUpdateMediaItemInputObjectTypeResolver' => 'getRootUpdateMediaItemInputObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaItemDoesNotExistErrorPayloadObjectTypeResolver' => 'getMediaItemDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaUpdateMutationPayloadObjectTypeResolver' => 'getMediaUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootCreateMediaItemMutationPayloadObjectTypeResolver' => 'getRootCreateMediaItemMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootUpdateMediaItemMutationPayloadObjectTypeResolver' => 'getRootUpdateMediaItemMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver' => 'getUserDoesNotExistErrorPayloadObjectTypeResolver2Service',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolver' => 'getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolver' => 'getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\MediaUpdateMutationErrorPayloadUnionTypeResolver' => 'getMediaUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootCreateMediaItemMutationErrorPayloadUnionTypeResolver' => 'getRootCreateMediaItemMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootUpdateMediaItemMutationErrorPayloadUnionTypeResolver' => 'getRootUpdateMediaItemMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\Media\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor5Service',
            'PoPCMSSchema\\Media\\ComponentProcessors\\MediaFilterInputContainerComponentProcessor' => 'getMediaFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\MediaUserObjectTypeFieldResolver' => 'getMediaUserObjectTypeFieldResolverService',
            'PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet' => 'getAddAuthorInputFieldsToCustomPostInputObjectTypeHookSetService',
            'PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\EnumTypeHookSet' => 'getEnumTypeHookSet2Service',
            'PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\FilterInputHookSet' => 'getFilterInputHookSet2Service',
            'PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\TypeAPIs\\UserMediaTypeAPIInterface' => 'getUserMediaTypeAPIInterfaceService',
            'PoPCMSSchema\\Media\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver' => 'getMediaObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\Media\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver11Service',
            'PoPCMSSchema\\Media\\FilterInputs\\MimeTypesFilterInput' => 'getMimeTypesFilterInputService',
            'PoPCMSSchema\\Media\\RelationalTypeDataLoaders\\ObjectType\\MediaObjectTypeDataLoader' => 'getMediaObjectTypeDataLoaderService',
            'PoPCMSSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface' => 'getMediaTypeAPIInterfaceService',
            'PoPCMSSchema\\Media\\TypeResolvers\\EnumType\\MediaItemOrderByEnumTypeResolver' => 'getMediaItemOrderByEnumTypeResolverService',
            'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemByOneofInputObjectTypeResolver' => 'getMediaItemByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemSortInputObjectTypeResolver' => 'getMediaItemSortInputObjectTypeResolverService',
            'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemPaginationInputObjectTypeResolver' => 'getRootMediaItemPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemsFilterInputObjectTypeResolver' => 'getRootMediaItemsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Media\\TypeResolvers\\ObjectType\\MediaObjectTypeResolver' => 'getMediaObjectTypeResolverService',
            'PoPCMSSchema\\Menus\\ComponentProcessors\\MenuFilterInputContainerComponentProcessor' => 'getMenuFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\MenuItemObjectTypeFieldResolver' => 'getMenuItemObjectTypeFieldResolverService',
            'PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\MenuObjectTypeFieldResolver' => 'getMenuObjectTypeFieldResolverService',
            'PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver12Service',
            'PoPCMSSchema\\Menus\\RelationalTypeDataLoaders\\ObjectType\\MenuItemObjectTypeDataLoader' => 'getMenuItemObjectTypeDataLoaderService',
            'PoPCMSSchema\\Menus\\RelationalTypeDataLoaders\\ObjectType\\MenuObjectTypeDataLoader' => 'getMenuObjectTypeDataLoaderService',
            'PoPCMSSchema\\Menus\\RuntimeRegistries\\MenuItemRuntimeRegistryInterface' => 'getMenuItemRuntimeRegistryInterfaceService',
            'PoPCMSSchema\\Menus\\TypeAPIs\\MenuTypeAPIInterface' => 'getMenuTypeAPIInterfaceService',
            'PoPCMSSchema\\Menus\\TypeResolvers\\EnumType\\MenuOrderByEnumTypeResolver' => 'getMenuOrderByEnumTypeResolverService',
            'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuByInputObjectTypeResolver' => 'getMenuByInputObjectTypeResolverService',
            'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuSortInputObjectTypeResolver' => 'getMenuSortInputObjectTypeResolverService',
            'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenuPaginationInputObjectTypeResolver' => 'getRootMenuPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenusFilterInputObjectTypeResolver' => 'getRootMenusFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuItemObjectTypeResolver' => 'getMenuItemObjectTypeResolverService',
            'PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuObjectTypeResolver' => 'getMenuObjectTypeResolverService',
            'PoPCMSSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider' => 'getFeedbackItemProvider2Service',
            'PoPCMSSchema\\Meta\\FieldResolvers\\InterfaceType\\WithMetaInterfaceTypeFieldResolver' => 'getWithMetaInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\Meta\\TypeResolvers\\InterfaceType\\WithMetaInterfaceTypeResolver' => 'getWithMetaInterfaceTypeResolverService',
            'PoPCMSSchema\\PageMediaMutations\\ConditionalOnModule\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImagePageObjectTypeFieldResolver' => 'getWithFeaturedImagePageObjectTypeFieldResolverService',
            'PoPCMSSchema\\PageMutationsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet6Service',
            'PoPCMSSchema\\PageMutations\\ComponentProcessors\\PageMutationFilterInputContainerComponentProcessor' => 'getPageMutationFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\PageMutations\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor' => 'getFieldDataloadComponentProcessorService',
            'PoPCMSSchema\\PageMutations\\ConditionalOnModule\\CommentMutations\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver' => 'getPageObjectTypeFieldResolverService',
            'PoPCMSSchema\\PageMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet' => 'getRemoveAuthorFilterInputHookSet4Service',
            'PoPCMSSchema\\PageMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider9Service',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageMutationPayloadObjectTypeFieldResolver' => 'getPageMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getPageMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver' => 'getPageObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver13Service',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver' => 'getRootQueryableObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PageMutations\\LooseContracts\\LooseContractSet' => 'getLooseContractSet6Service',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\CreatePageBulkOperationMutationResolver' => 'getCreatePageBulkOperationMutationResolverService',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\CreatePageMutationResolver' => 'getCreatePageMutationResolverService',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableCreatePageBulkOperationMutationResolver' => 'getPayloadableCreatePageBulkOperationMutationResolverService',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableCreatePageMutationResolver' => 'getPayloadableCreatePageMutationResolverService',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableUpdatePageBulkOperationMutationResolver' => 'getPayloadableUpdatePageBulkOperationMutationResolverService',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableUpdatePageMutationResolver' => 'getPayloadableUpdatePageMutationResolverService',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\UpdatePageBulkOperationMutationResolver' => 'getUpdatePageBulkOperationMutationResolverService',
            'PoPCMSSchema\\PageMutations\\MutationResolvers\\UpdatePageMutationResolver' => 'getUpdatePageMutationResolverService',
            'PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker7Service',
            'PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\UnionType\\PageUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getPageUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePageMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreatePageMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePageMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdatePageMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageContentAsOneofInputObjectTypeResolver' => 'getPageContentAsOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageUpdateInputObjectTypeResolver' => 'getPageUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootCreatePageInputObjectTypeResolver' => 'getRootCreatePageInputObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootMyPagesFilterInputObjectTypeResolver' => 'getRootMyPagesFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootUpdatePageInputObjectTypeResolver' => 'getRootUpdatePageInputObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\PageUpdateMutationPayloadObjectTypeResolver' => 'getPageUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootCreatePageMutationPayloadObjectTypeResolver' => 'getRootCreatePageMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootUpdatePageMutationPayloadObjectTypeResolver' => 'getRootUpdatePageMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\PageUpdateMutationErrorPayloadUnionTypeResolver' => 'getPageUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootCreatePageMutationErrorPayloadUnionTypeResolver' => 'getRootCreatePageMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootUpdatePageMutationErrorPayloadUnionTypeResolver' => 'getRootUpdatePageMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PagesWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet3Service',
            'PoPCMSSchema\\PagesWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet7Service',
            'PoPCMSSchema\\Pages\\ComponentProcessors\\FieldDataloadComponentProcessor' => 'getFieldDataloadComponentProcessor2Service',
            'PoPCMSSchema\\Pages\\ComponentProcessors\\PageFilterInputContainerComponentProcessor' => 'getPageFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Pages\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor3Service',
            'PoPCMSSchema\\Pages\\ConditionalOnModule\\Comments\\FieldResolvers\\ObjectType\\CommentablePageObjectTypeFieldResolver' => 'getCommentablePageObjectTypeFieldResolverService',
            'PoPCMSSchema\\Pages\\ConditionalOnModule\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImagePageObjectTypeFieldResolver' => 'getWithFeaturedImagePageObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\Pages\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver' => 'getPageObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\Pages\\FieldResolvers\\ObjectType\\RootPageObjectTypeFieldResolver' => 'getRootPageObjectTypeFieldResolverService',
            'PoPCMSSchema\\Pages\\Hooks\\PageAddDefaultCustomPostTypeModuleConfigurationHookSet' => 'getPageAddDefaultCustomPostTypeModuleConfigurationHookSetService',
            'PoPCMSSchema\\Pages\\Hooks\\VarsHookSet' => 'getVarsHookSet4Service',
            'PoPCMSSchema\\Pages\\LooseContracts\\LooseContractSet' => 'getLooseContractSet7Service',
            'PoPCMSSchema\\Pages\\ObjectTypeResolverPickers\\PageCustomPostObjectTypeResolverPicker' => 'getPageCustomPostObjectTypeResolverPickerService',
            'PoPCMSSchema\\Pages\\RelationalTypeDataLoaders\\ObjectType\\PageObjectTypeDataLoader' => 'getPageObjectTypeDataLoaderService',
            'PoPCMSSchema\\Pages\\State\\AppStateProvider' => 'getAppStateProvider7Service',
            'PoPCMSSchema\\Pages\\TypeAPIs\\PageTypeAPIInterface' => 'getPageTypeAPIInterfaceService',
            'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageByOneofInputObjectTypeResolver' => 'getPageByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageChildrenFilterInputObjectTypeResolver' => 'getPageChildrenFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PagePaginationInputObjectTypeResolver' => 'getPagePaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\RootPagesFilterInputObjectTypeResolver' => 'getRootPagesFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Pages\\TypeResolvers\\ObjectType\\PageObjectTypeResolver' => 'getPageObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoriesWP\\Hooks\\PostCategoryQueryHookSet' => 'getPostCategoryQueryHookSetService',
            'PoPCMSSchema\\PostCategoriesWP\\Hooks\\RoutingHookSet' => 'getRoutingHookSet2Service',
            'PoPCMSSchema\\PostCategories\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor6Service',
            'PoPCMSSchema\\PostCategories\\ComponentProcessors\\PostCategoryFilterInputContainerComponentProcessor' => 'getPostCategoryFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentProcessors\\CategoryPostFieldDataloadComponentProcessor' => 'getCategoryPostFieldDataloadComponentProcessorService',
            'PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentProcessors\\PostCategoryFieldDataloadComponentProcessor' => 'getPostCategoryFieldDataloadComponentProcessorService',
            'PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor4Service',
            'PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\ChildPostCategoryObjectTypeFieldResolver' => 'getChildPostCategoryObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\CustomPostListPostCategoryObjectTypeFieldResolver' => 'getCustomPostListPostCategoryObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostCategoryListObjectTypeFieldResolver' => 'getPostCategoryListObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostCategoryObjectTypeFieldResolver' => 'getPostCategoryObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostQueryableObjectTypeFieldResolver' => 'getPostQueryableObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\RootPostCategoryObjectTypeFieldResolver' => 'getRootPostCategoryObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategories\\Hooks\\ModelInstanceHookSet' => 'getModelInstanceHookSetService',
            'PoPCMSSchema\\PostCategories\\ObjectTypeResolverPickers\\CategoryUnionPostCategoryObjectTypeResolverPicker' => 'getCategoryUnionPostCategoryObjectTypeResolverPickerService',
            'PoPCMSSchema\\PostCategories\\RelationalTypeDataLoaders\\ObjectType\\PostCategoryObjectTypeDataLoader' => 'getPostCategoryObjectTypeDataLoaderService',
            'PoPCMSSchema\\PostCategories\\SchemaHooks\\AddPostCategoryFilterInputObjectTypeHookSet' => 'getAddPostCategoryFilterInputObjectTypeHookSetService',
            'PoPCMSSchema\\PostCategories\\SchemaHooks\\FilterInputHookSet' => 'getFilterInputHookSet3Service',
            'PoPCMSSchema\\PostCategories\\TypeAPIs\\PostCategoryTypeAPIInterface' => 'getPostCategoryTypeAPIInterfaceService',
            'PoPCMSSchema\\PostCategories\\TypeResolvers\\EnumType\\PostCategoryTaxonomyEnumStringScalarTypeResolver' => 'getPostCategoryTaxonomyEnumStringScalarTypeResolverService',
            'PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostCategoryByOneofInputObjectTypeResolver' => 'getPostCategoryByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByCategoriesInputObjectTypeResolver' => 'getPostsFilterCustomPostsByCategoriesInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\RootPostCategoriesFilterInputObjectTypeResolver' => 'getRootPostCategoriesFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategories\\TypeResolvers\\ObjectType\\PostCategoryObjectTypeResolver' => 'getPostCategoryObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryMutationPayloadObjectTypeFieldResolver' => 'getPostCategoryMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getPostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryObjectTypeFieldResolver' => 'getPostCategoryObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver' => 'getPostMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver' => 'getPostObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver14Service',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootPostCategoryCRUDObjectTypeFieldResolver' => 'getRootPostCategoryCRUDObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\Hooks\\MutationResolverHookSet' => 'getMutationResolverHookSet6Service',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\CreatePostCategoryTermBulkOperationMutationResolver' => 'getCreatePostCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\CreatePostCategoryTermMutationResolver' => 'getCreatePostCategoryTermMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\DeletePostCategoryTermBulkOperationMutationResolver' => 'getDeletePostCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\DeletePostCategoryTermMutationResolver' => 'getDeletePostCategoryTermMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableCreatePostCategoryTermBulkOperationMutationResolver' => 'getPayloadableCreatePostCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableCreatePostCategoryTermMutationResolver' => 'getPayloadableCreatePostCategoryTermMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableDeletePostCategoryTermBulkOperationMutationResolver' => 'getPayloadableDeletePostCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableDeletePostCategoryTermMutationResolver' => 'getPayloadableDeletePostCategoryTermMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnPostBulkOperationMutationResolver' => 'getPayloadableSetCategoriesOnPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnPostMutationResolver' => 'getPayloadableSetCategoriesOnPostMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableUpdatePostCategoryTermBulkOperationMutationResolver' => 'getPayloadableUpdatePostCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableUpdatePostCategoryTermMutationResolver' => 'getPayloadableUpdatePostCategoryTermMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\SetCategoriesOnPostBulkOperationMutationResolver' => 'getSetCategoriesOnPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\SetCategoriesOnPostMutationResolver' => 'getSetCategoriesOnPostMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\UpdatePostCategoryTermBulkOperationMutationResolver' => 'getUpdatePostCategoryTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\UpdatePostCategoryTermMutationResolver' => 'getUpdatePostCategoryTermMutationResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker8Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker7Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker5Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker5Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' => 'getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker8Service',
            'PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\PostCategoryDeleteMutationErrorPayloadUnionTypeDataLoader' => 'getPostCategoryDeleteMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\PostCategoryUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getPostCategoryUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\PostSetCategoriesMutationErrorPayloadUnionTypeDataLoader' => 'getPostSetCategoriesMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreatePostCategoryTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootDeletePostCategoryTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootSetCategoriesOnPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdatePostCategoryTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostCategoryMutations\\SchemaHooks\\PostMutationResolverHookSet' => 'getPostMutationResolverHookSetService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostCategoryTermUpdateInputObjectTypeResolver' => 'getPostCategoryTermUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostSetCategoriesInputObjectTypeResolver' => 'getPostSetCategoriesInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreatePostCategoryTermInputObjectTypeResolver' => 'getRootCreatePostCategoryTermInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeletePostCategoryTermInputObjectTypeResolver' => 'getRootDeletePostCategoryTermInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnPostInputObjectTypeResolver' => 'getRootSetCategoriesOnPostInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostCategoryTermInputObjectTypeResolver' => 'getRootUpdatePostCategoryTermInputObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryDeleteMutationPayloadObjectTypeResolver' => 'getPostCategoryDeleteMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryUpdateMutationPayloadObjectTypeResolver' => 'getPostCategoryUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostSetCategoriesMutationPayloadObjectTypeResolver' => 'getPostSetCategoriesMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreatePostCategoryTermMutationPayloadObjectTypeResolver' => 'getRootCreatePostCategoryTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeletePostCategoryTermMutationPayloadObjectTypeResolver' => 'getRootDeletePostCategoryTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnPostMutationPayloadObjectTypeResolver' => 'getRootSetCategoriesOnPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdatePostCategoryTermMutationPayloadObjectTypeResolver' => 'getRootUpdatePostCategoryTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryDeleteMutationErrorPayloadUnionTypeResolver' => 'getPostCategoryDeleteMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryUpdateMutationErrorPayloadUnionTypeResolver' => 'getPostCategoryUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostSetCategoriesMutationErrorPayloadUnionTypeResolver' => 'getPostSetCategoriesMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolver' => 'getRootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolver' => 'getRootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolver' => 'getRootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolver' => 'getRootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostMediaMutations\\ConditionalOnModule\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImagePostObjectTypeFieldResolver' => 'getWithFeaturedImagePostObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostMutations\\ComponentProcessors\\PostMutationFilterInputContainerComponentProcessor' => 'getPostMutationFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\PostMutations\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor' => 'getFieldDataloadComponentProcessor3Service',
            'PoPCMSSchema\\PostMutations\\ConditionalOnModule\\CommentMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver' => 'getPostObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet' => 'getRemoveAuthorFilterInputHookSet5Service',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver' => 'getPostMutationPayloadObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver' => 'getPostObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver15Service',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver' => 'getRootQueryableObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\CreatePostBulkOperationMutationResolver' => 'getCreatePostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\CreatePostMutationResolver' => 'getCreatePostMutationResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableCreatePostBulkOperationMutationResolver' => 'getPayloadableCreatePostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableCreatePostMutationResolver' => 'getPayloadableCreatePostMutationResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableUpdatePostBulkOperationMutationResolver' => 'getPayloadableUpdatePostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableUpdatePostMutationResolver' => 'getPayloadableUpdatePostMutationResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\UpdatePostBulkOperationMutationResolver' => 'getUpdatePostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostMutations\\MutationResolvers\\UpdatePostMutationResolver' => 'getUpdatePostMutationResolverService',
            'PoPCMSSchema\\PostMutations\\RelationalTypeDataLoaders\\UnionType\\PostUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getPostUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePostMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreatePostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePostMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdatePostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostContentAsOneofInputObjectTypeResolver' => 'getPostContentAsOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostUpdateInputObjectTypeResolver' => 'getPostUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootCreatePostInputObjectTypeResolver' => 'getRootCreatePostInputObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootMyPostsFilterInputObjectTypeResolver' => 'getRootMyPostsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostInputObjectTypeResolver' => 'getRootUpdatePostInputObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\PostUpdateMutationPayloadObjectTypeResolver' => 'getPostUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootCreatePostMutationPayloadObjectTypeResolver' => 'getRootCreatePostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootUpdatePostMutationPayloadObjectTypeResolver' => 'getRootUpdatePostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\PostUpdateMutationErrorPayloadUnionTypeResolver' => 'getPostUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootCreatePostMutationErrorPayloadUnionTypeResolver' => 'getRootCreatePostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootUpdatePostMutationErrorPayloadUnionTypeResolver' => 'getRootUpdatePostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver' => 'getPostMutationPayloadObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver' => 'getPostObjectTypeFieldResolver4Service',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagMutationPayloadObjectTypeFieldResolver' => 'getPostTagMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getPostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagObjectTypeFieldResolver' => 'getPostTagObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getPostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver16Service',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootPostTagCRUDObjectTypeFieldResolver' => 'getRootPostTagCRUDObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTagMutations\\Hooks\\MutationResolverHookSet' => 'getMutationResolverHookSet7Service',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\CreatePostTagTermBulkOperationMutationResolver' => 'getCreatePostTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\CreatePostTagTermMutationResolver' => 'getCreatePostTagTermMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\DeletePostTagTermBulkOperationMutationResolver' => 'getDeletePostTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\DeletePostTagTermMutationResolver' => 'getDeletePostTagTermMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableCreatePostTagTermBulkOperationMutationResolver' => 'getPayloadableCreatePostTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableCreatePostTagTermMutationResolver' => 'getPayloadableCreatePostTagTermMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableDeletePostTagTermBulkOperationMutationResolver' => 'getPayloadableDeletePostTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableDeletePostTagTermMutationResolver' => 'getPayloadableDeletePostTagTermMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableSetTagsOnPostBulkOperationMutationResolver' => 'getPayloadableSetTagsOnPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableSetTagsOnPostMutationResolver' => 'getPayloadableSetTagsOnPostMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableUpdatePostTagTermBulkOperationMutationResolver' => 'getPayloadableUpdatePostTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableUpdatePostTagTermMutationResolver' => 'getPayloadableUpdatePostTagTermMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\SetTagsOnPostBulkOperationMutationResolver' => 'getSetTagsOnPostBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\SetTagsOnPostMutationResolver' => 'getSetTagsOnPostMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\UpdatePostTagTermBulkOperationMutationResolver' => 'getUpdatePostTagTermBulkOperationMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\MutationResolvers\\UpdatePostTagTermMutationResolver' => 'getUpdatePostTagTermMutationResolverService',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker9Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker8Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker6Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker6Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker2Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' => 'getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker4Service',
            'PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker9Service',
            'PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\PostSetTagsMutationErrorPayloadUnionTypeDataLoader' => 'getPostSetTagsMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\PostTagDeleteMutationErrorPayloadUnionTypeDataLoader' => 'getPostTagDeleteMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\PostTagUpdateMutationErrorPayloadUnionTypeDataLoader' => 'getPostTagUpdateMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePostTagTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootCreatePostTagTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeletePostTagTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootDeletePostTagTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetTagsOnPostMutationErrorPayloadUnionTypeDataLoader' => 'getRootSetTagsOnPostMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePostTagTermMutationErrorPayloadUnionTypeDataLoader' => 'getRootUpdatePostTagTermMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\PostTagMutations\\SchemaHooks\\PostMutationResolverHookSet' => 'getPostMutationResolverHookSet2Service',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostSetTagsInputObjectTypeResolver' => 'getPostSetTagsInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostTagTermUpdateInputObjectTypeResolver' => 'getPostTagTermUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootCreatePostTagTermInputObjectTypeResolver' => 'getRootCreatePostTagTermInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootDeletePostTagTermInputObjectTypeResolver' => 'getRootDeletePostTagTermInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnPostInputObjectTypeResolver' => 'getRootSetTagsOnPostInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostTagTermInputObjectTypeResolver' => 'getRootUpdatePostTagTermInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostSetTagsMutationPayloadObjectTypeResolver' => 'getPostSetTagsMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagDeleteMutationPayloadObjectTypeResolver' => 'getPostTagDeleteMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagUpdateMutationPayloadObjectTypeResolver' => 'getPostTagUpdateMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootCreatePostTagTermMutationPayloadObjectTypeResolver' => 'getRootCreatePostTagTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootDeletePostTagTermMutationPayloadObjectTypeResolver' => 'getRootDeletePostTagTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnPostMutationPayloadObjectTypeResolver' => 'getRootSetTagsOnPostMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootUpdatePostTagTermMutationPayloadObjectTypeResolver' => 'getRootUpdatePostTagTermMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostSetTagsMutationErrorPayloadUnionTypeResolver' => 'getPostSetTagsMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagDeleteMutationErrorPayloadUnionTypeResolver' => 'getPostTagDeleteMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagUpdateMutationErrorPayloadUnionTypeResolver' => 'getPostTagUpdateMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootCreatePostTagTermMutationErrorPayloadUnionTypeResolver' => 'getRootCreatePostTagTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootDeletePostTagTermMutationErrorPayloadUnionTypeResolver' => 'getRootDeletePostTagTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnPostMutationErrorPayloadUnionTypeResolver' => 'getRootSetTagsOnPostMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootUpdatePostTagTermMutationErrorPayloadUnionTypeResolver' => 'getRootUpdatePostTagTermMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\PostTagsWP\\Hooks\\PostTagQueryHookSet' => 'getPostTagQueryHookSetService',
            'PoPCMSSchema\\PostTagsWP\\Hooks\\RoutingHookSet' => 'getRoutingHookSet3Service',
            'PoPCMSSchema\\PostTags\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor7Service',
            'PoPCMSSchema\\PostTags\\ComponentProcessors\\PostTagFilterInputContainerComponentProcessor' => 'getPostTagFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentProcessors\\PostTagFieldDataloadComponentProcessor' => 'getPostTagFieldDataloadComponentProcessorService',
            'PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentProcessors\\TagPostFieldDataloadComponentProcessor' => 'getTagPostFieldDataloadComponentProcessorService',
            'PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor5Service',
            'PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\CustomPostListPostTagObjectTypeFieldResolver' => 'getCustomPostListPostTagObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostQueryableObjectTypeFieldResolver' => 'getPostQueryableObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostTagListObjectTypeFieldResolver' => 'getPostTagListObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostTagObjectTypeFieldResolver' => 'getPostTagObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\RootPostTagObjectTypeFieldResolver' => 'getRootPostTagObjectTypeFieldResolverService',
            'PoPCMSSchema\\PostTags\\ObjectTypeResolverPickers\\TagUnionPostTagObjectTypeResolverPicker' => 'getTagUnionPostTagObjectTypeResolverPickerService',
            'PoPCMSSchema\\PostTags\\RelationalTypeDataLoaders\\ObjectType\\PostTagObjectTypeDataLoader' => 'getPostTagObjectTypeDataLoaderService',
            'PoPCMSSchema\\PostTags\\SchemaHooks\\AddPostTagFilterInputObjectTypeHookSet' => 'getAddPostTagFilterInputObjectTypeHookSetService',
            'PoPCMSSchema\\PostTags\\SchemaHooks\\FilterInputHookSet' => 'getFilterInputHookSet4Service',
            'PoPCMSSchema\\PostTags\\TypeAPIs\\PostTagTypeAPIInterface' => 'getPostTagTypeAPIInterfaceService',
            'PoPCMSSchema\\PostTags\\TypeResolvers\\EnumType\\PostTagTaxonomyEnumStringScalarTypeResolver' => 'getPostTagTaxonomyEnumStringScalarTypeResolverService',
            'PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostTagByOneofInputObjectTypeResolver' => 'getPostTagByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByTagsInputObjectTypeResolver' => 'getPostsFilterCustomPostsByTagsInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\RootPostTagsFilterInputObjectTypeResolver' => 'getRootPostTagsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\PostTags\\TypeResolvers\\ObjectType\\PostTagObjectTypeResolver' => 'getPostTagObjectTypeResolverService',
            'PoPCMSSchema\\PostsWP\\Hooks\\RoutingHookSet' => 'getRoutingHookSet4Service',
            'PoPCMSSchema\\Posts\\ComponentProcessors\\PostFilterInputContainerComponentProcessor' => 'getPostFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Posts\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor' => 'getFieldDataloadComponentProcessor4Service',
            'PoPCMSSchema\\Posts\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor6Service',
            'PoPCMSSchema\\Posts\\ConditionalOnModule\\Comments\\FieldResolvers\\ObjectType\\CommentablePostObjectTypeFieldResolver' => 'getCommentablePostObjectTypeFieldResolverService',
            'PoPCMSSchema\\Posts\\ConditionalOnModule\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImagePostObjectTypeFieldResolver' => 'getWithFeaturedImagePostObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor' => 'getFieldDataloadComponentProcessor5Service',
            'PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor7Service',
            'PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\PostUserObjectTypeFieldResolver' => 'getPostUserObjectTypeFieldResolverService',
            'PoPCMSSchema\\Posts\\FieldResolvers\\ObjectType\\RootPostObjectTypeFieldResolver' => 'getRootPostObjectTypeFieldResolverService',
            'PoPCMSSchema\\Posts\\Hooks\\PostAddDefaultCustomPostTypeModuleConfigurationHookSet' => 'getPostAddDefaultCustomPostTypeModuleConfigurationHookSetService',
            'PoPCMSSchema\\Posts\\ObjectTypeResolverPickers\\PostCustomPostObjectTypeResolverPicker' => 'getPostCustomPostObjectTypeResolverPickerService',
            'PoPCMSSchema\\Posts\\RelationalTypeDataLoaders\\ObjectType\\PostObjectTypeDataLoader' => 'getPostObjectTypeDataLoaderService',
            'PoPCMSSchema\\Posts\\TypeAPIs\\PostTypeAPIInterface' => 'getPostTypeAPIInterfaceService',
            'PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostByOneofInputObjectTypeResolver' => 'getPostByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostPaginationInputObjectTypeResolver' => 'getPostPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\RootPostsFilterInputObjectTypeResolver' => 'getRootPostsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Posts\\TypeResolvers\\ObjectType\\PostObjectTypeResolver' => 'getPostObjectTypeResolverService',
            'PoPCMSSchema\\QueriedObject\\FieldResolvers\\InterfaceType\\QueryableInterfaceTypeFieldResolver' => 'getQueryableInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\QueriedObject\\Routing\\CMSRoutingStateServiceInterface' => 'getCMSRoutingStateServiceInterfaceService',
            'PoPCMSSchema\\QueriedObject\\State\\AppStateProvider' => 'getAppStateProvider8Service',
            'PoPCMSSchema\\QueriedObject\\TypeResolvers\\InterfaceType\\QueryableInterfaceTypeResolver' => 'getQueryableInterfaceTypeResolverService',
            'PoPCMSSchema\\SchemaCommonsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet8Service',
            'PoPCMSSchema\\SchemaCommons\\CMS\\CMSHelperServiceInterface' => 'getCMSHelperServiceInterfaceService',
            'PoPCMSSchema\\SchemaCommons\\CMS\\CMSServiceInterface' => 'getCMSServiceInterfaceService',
            'PoPCMSSchema\\SchemaCommons\\ComponentProcessors\\CommonFilterInputContainerComponentProcessor' => 'getCommonFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\SchemaCommons\\ComponentProcessors\\FormInputs\\CommonFilterInputComponentProcessor' => 'getCommonFilterInputComponentProcessorService',
            'PoPCMSSchema\\SchemaCommons\\FeedbackItemProviders\\FeedbackItemProvider' => 'getFeedbackItemProvider3Service',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\DatesFilterInput' => 'getDatesFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\ExcludeFilterInput' => 'getExcludeFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\ExcludeIDsFilterInput' => 'getExcludeIDsFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\ExcludeParentIDsFilterInput' => 'getExcludeParentIDsFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\FormatFilterInput' => 'getFormatFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\GMTFilterInput' => 'getGMTFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\IncludeFilterInput' => 'getIncludeFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\LimitFilterInput' => 'getLimitFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\OffsetFilterInput' => 'getOffsetFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\OrderByFilterInput' => 'getOrderByFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\OrderFilterInput' => 'getOrderFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\ParentIDFilterInput' => 'getParentIDFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\ParentIDsFilterInput' => 'getParentIDsFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\PathOrPathsFilterInput' => 'getPathOrPathsFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\SearchFilterInput' => 'getSearchFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\SlugFilterInput' => 'getSlugFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\SlugsFilterInput' => 'getSlugsFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\FilterInputs\\SortFilterInput' => 'getSortFilterInputService',
            'PoPCMSSchema\\SchemaCommons\\Formatters\\DateFormatterInterface' => 'getDateFormatterInterfaceService',
            'PoPCMSSchema\\SchemaCommons\\Hooks\\RoutingHookSet' => 'getRoutingHookSet5Service',
            'PoPCMSSchema\\SchemaCommons\\LooseContracts\\LooseContractSet' => 'getLooseContractSet8Service',
            'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OrderEnumTypeResolver' => 'getOrderEnumTypeResolverService',
            'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\DateQueryInputObjectTypeResolver' => 'getDateQueryInputObjectTypeResolverService',
            'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\MutationPayloadObjectsInputObjectTypeResolver' => 'getMutationPayloadObjectsInputObjectTypeResolverService',
            'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\PaginationInputObjectTypeResolver' => 'getPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\SortInputObjectTypeResolver' => 'getSortInputObjectTypeResolverService',
            'PoPCMSSchema\\Settings\\FeedbackItemProviders\\FeedbackItemProvider' => 'getFeedbackItemProvider4Service',
            'PoPCMSSchema\\Settings\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver17Service',
            'PoPCMSSchema\\Settings\\TypeAPIs\\SettingsTypeAPIInterface' => 'getSettingsTypeAPIInterfaceService',
            'PoPCMSSchema\\TagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider10Service',
            'PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker9Service',
            'PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker5Service',
            'PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' => 'getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker5Service',
            'PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' => 'getTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker3Service',
            'PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker10Service',
            'PoPCMSSchema\\TagMutations\\RelationalTypeDataLoaders\\ObjectType\\TagTermDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getTagTermDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\TagMutations\\TypeAPIs\\TagTypeMutationAPIInterface' => 'getTagTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver' => 'getTagByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagTermUpdateInputObjectTypeResolver' => 'getTagTermUpdateInputObjectTypeResolverService',
            'PoPCMSSchema\\TagMutations\\TypeResolvers\\ObjectType\\TagTermDoesNotExistErrorPayloadObjectTypeResolver' => 'getTagTermDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\TagsWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet4Service',
            'PoPCMSSchema\\TagsWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet9Service',
            'PoPCMSSchema\\Tags\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor8Service',
            'PoPCMSSchema\\Tags\\ComponentProcessors\\TagFilterInputContainerComponentProcessor' => 'getTagFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Tags\\ConditionalOnModule\\Users\\SchemaHooks\\UserCustomPostsAddTagFilterInputObjectTypeHookSet' => 'getUserCustomPostsAddTagFilterInputObjectTypeHookSetService',
            'PoPCMSSchema\\Tags\\FieldResolvers\\InterfaceType\\TagInterfaceTypeFieldResolver' => 'getTagInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericCustomPostQueryableObjectTypeFieldResolver' => 'getGenericCustomPostQueryableObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericTagListObjectTypeFieldResolver' => 'getGenericTagListObjectTypeFieldResolverService',
            'PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericTagObjectTypeFieldResolver' => 'getGenericTagObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\RootTagObjectTypeFieldResolver' => 'getRootTagObjectTypeFieldResolverService',
            'PoPCMSSchema\\Tags\\FilterInputs\\TagIDsFilterInput' => 'getTagIDsFilterInputService',
            'PoPCMSSchema\\Tags\\FilterInputs\\TagSlugsFilterInput' => 'getTagSlugsFilterInputService',
            'PoPCMSSchema\\Tags\\FilterInputs\\TagTaxonomyFilterInput' => 'getTagTaxonomyFilterInputService',
            'PoPCMSSchema\\Tags\\LooseContracts\\LooseContractSet' => 'getLooseContractSet9Service',
            'PoPCMSSchema\\Tags\\ObjectTypeResolverPickers\\TagUnionGenericTagObjectTypeResolverPicker' => 'getTagUnionGenericTagObjectTypeResolverPickerService',
            'PoPCMSSchema\\Tags\\Registries\\TagObjectTypeResolverPickerRegistryInterface' => 'getTagObjectTypeResolverPickerRegistryInterfaceService',
            'PoPCMSSchema\\Tags\\RelationalTypeDataLoaders\\ObjectType\\QueryableTagListObjectTypeDataLoader' => 'getQueryableTagListObjectTypeDataLoaderService',
            'PoPCMSSchema\\Tags\\RelationalTypeDataLoaders\\UnionType\\TagUnionTypeDataLoader' => 'getTagUnionTypeDataLoaderService',
            'PoPCMSSchema\\Tags\\SchemaHooks\\RootCustomPostsAddTagFilterInputObjectTypeHookSet' => 'getRootCustomPostsAddTagFilterInputObjectTypeHookSetService',
            'PoPCMSSchema\\Tags\\State\\AppStateProvider' => 'getAppStateProvider9Service',
            'PoPCMSSchema\\Tags\\TypeAPIs\\QueryableTagTypeAPIInterface' => 'getQueryableTagTypeAPIInterfaceService',
            'PoPCMSSchema\\Tags\\TypeAPIs\\UniversalTagTypeAPIInterface' => 'getUniversalTagTypeAPIInterfaceService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\EnumType\\TagTaxonomyEnumStringScalarTypeResolver' => 'getTagTaxonomyEnumStringScalarTypeResolverService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostTagsFilterInputObjectTypeResolver' => 'getCustomPostTagsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByTagsInputObjectTypeResolver' => 'getCustomPostsFilterCustomPostsByTagsInputObjectTypeResolverService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\RootTagsFilterInputObjectTypeResolver' => 'getRootTagsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver' => 'getTagByOneofInputObjectTypeResolver2Service',
            'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagPaginationInputObjectTypeResolver' => 'getTagPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\InterfaceType\\TagInterfaceTypeResolver' => 'getTagInterfaceTypeResolverService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\ObjectType\\GenericTagObjectTypeResolver' => 'getGenericTagObjectTypeResolverService',
            'PoPCMSSchema\\Tags\\TypeResolvers\\UnionType\\TagUnionTypeResolver' => 'getTagUnionTypeResolverService',
            'PoPCMSSchema\\Taxonomies\\FilterInputs\\HideEmptyFilterInput' => 'getHideEmptyFilterInputService',
            'PoPCMSSchema\\Taxonomies\\FilterInputs\\TaxonomyFilterInput' => 'getTaxonomyFilterInputService',
            'PoPCMSSchema\\Taxonomies\\TypeAPIs\\TaxonomyTermTypeAPIInterface' => 'getTaxonomyTermTypeAPIInterfaceService',
            'PoPCMSSchema\\Taxonomies\\TypeResolvers\\EnumType\\TaxonomyOrderByEnumTypeResolver' => 'getTaxonomyOrderByEnumTypeResolverService',
            'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\FilterByTaxonomyTermsInputObjectTypeResolver' => 'getFilterByTaxonomyTermsInputObjectTypeResolverService',
            'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyCustomPostsFilterInputObjectTypeResolver' => 'getTaxonomyCustomPostsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomySortInputObjectTypeResolver' => 'getTaxonomySortInputObjectTypeResolverService',
            'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyTaxonomiesFilterInputObjectTypeResolver' => 'getTaxonomyTaxonomiesFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\TaxonomyMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet5Service',
            'PoPCMSSchema\\TaxonomyMeta\\FieldResolvers\\ObjectType\\TaxonomyObjectTypeFieldResolver' => 'getTaxonomyObjectTypeFieldResolverService',
            'PoPCMSSchema\\TaxonomyMeta\\TypeAPIs\\TaxonomyMetaTypeAPIInterface' => 'getTaxonomyMetaTypeAPIInterfaceService',
            'PoPCMSSchema\\TaxonomyMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider11Service',
            'PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeDataLoader' => 'getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\TaxonomyDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getTaxonomyDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\TaxonomyIsNotValidErrorPayloadObjectTypeDataLoader' => 'getTaxonomyIsNotValidErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\TaxonomyTermDoesNotExistErrorPayloadObjectTypeDataLoader' => 'getTaxonomyTermDoesNotExistErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\TaxonomyMutations\\TypeAPIs\\TaxonomyTypeMutationAPIInterface' => 'getTaxonomyTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolver' => 'getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyDoesNotExistErrorPayloadObjectTypeResolver' => 'getTaxonomyDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyIsNotValidErrorPayloadObjectTypeResolver' => 'getTaxonomyIsNotValidErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyTermDoesNotExistErrorPayloadObjectTypeResolver' => 'getTaxonomyTermDoesNotExistErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserAvatars\\FieldResolvers\\ObjectType\\UserAvatarObjectTypeFieldResolver' => 'getUserAvatarObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserAvatars\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver' => 'getUserObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserAvatars\\RelationalTypeDataLoaders\\ObjectType\\UserAvatarObjectTypeDataLoader' => 'getUserAvatarObjectTypeDataLoaderService',
            'PoPCMSSchema\\UserAvatars\\RuntimeRegistries\\UserAvatarRuntimeRegistryInterface' => 'getUserAvatarRuntimeRegistryInterfaceService',
            'PoPCMSSchema\\UserAvatars\\TypeAPIs\\UserAvatarTypeAPIInterface' => 'getUserAvatarTypeAPIInterfaceService',
            'PoPCMSSchema\\UserAvatars\\TypeResolvers\\ObjectType\\UserAvatarObjectTypeResolver' => 'getUserAvatarObjectTypeResolverService',
            'PoPCMSSchema\\UserMetaWP\\Hooks\\QueryHookSet' => 'getQueryHookSet6Service',
            'PoPCMSSchema\\UserMeta\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver' => 'getUserObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\UserMeta\\TypeAPIs\\UserMetaTypeAPIInterface' => 'getUserMetaTypeAPIInterfaceService',
            'PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\RootRolesObjectTypeFieldResolver' => 'getRootRolesObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver' => 'getUserObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\UserRoleObjectTypeFieldResolver' => 'getUserRoleObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserRolesWP\\Hooks\\QueryHookSet' => 'getQueryHookSet7Service',
            'PoPCMSSchema\\UserRolesWP\\RelationalTypeDataLoaders\\ObjectType\\UserRoleObjectTypeDataLoader' => 'getUserRoleObjectTypeDataLoaderService',
            'PoPCMSSchema\\UserRolesWP\\TypeResolvers\\ObjectType\\UserRoleObjectTypeResolver' => 'getUserRoleObjectTypeResolverService',
            'PoPCMSSchema\\UserRoles\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor9Service',
            'PoPCMSSchema\\UserRoles\\FieldResolvers\\ObjectType\\RootRolesObjectTypeFieldResolver' => 'getRootRolesObjectTypeFieldResolver2Service',
            'PoPCMSSchema\\UserRoles\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver' => 'getUserObjectTypeFieldResolver4Service',
            'PoPCMSSchema\\UserRoles\\FilterInputs\\ExcludeUserRolesFilterInput' => 'getExcludeUserRolesFilterInputService',
            'PoPCMSSchema\\UserRoles\\FilterInputs\\UserRolesFilterInput' => 'getUserRolesFilterInputService',
            'PoPCMSSchema\\UserRoles\\Hooks\\VarsHookSet' => 'getVarsHookSet5Service',
            'PoPCMSSchema\\UserRoles\\SchemaHooks\\FilterInputHookSet' => 'getFilterInputHookSet5Service',
            'PoPCMSSchema\\UserRoles\\SchemaHooks\\InputObjectTypeHookSet' => 'getInputObjectTypeHookSet2Service',
            'PoPCMSSchema\\UserRoles\\TypeAPIs\\UserRoleTypeAPIInterface' => 'getUserRoleTypeAPIInterfaceService',
            'PoPCMSSchema\\UserStateMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider12Service',
            'PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' => 'getRootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver18Service',
            'PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\UserMutationPayloadObjectTypeFieldResolver' => 'getUserMutationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\UserMutationTransientEntityOperationPayloadObjectTypeFieldResolver' => 'getUserMutationTransientEntityOperationPayloadObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserStateMutations\\MutationResolvers\\LoginUserByCredentialsMutationResolver' => 'getLoginUserByCredentialsMutationResolverService',
            'PoPCMSSchema\\UserStateMutations\\MutationResolvers\\LoginUserOneofMutationResolver' => 'getLoginUserOneofMutationResolverService',
            'PoPCMSSchema\\UserStateMutations\\MutationResolvers\\LogoutUserMutationResolver' => 'getLogoutUserMutationResolverService',
            'PoPCMSSchema\\UserStateMutations\\MutationResolvers\\PayloadableLoginUserOneofMutationResolver' => 'getPayloadableLoginUserOneofMutationResolverService',
            'PoPCMSSchema\\UserStateMutations\\MutationResolvers\\PayloadableLogoutUserMutationResolver' => 'getPayloadableLogoutUserMutationResolverService',
            'PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker' => 'getGenericErrorPayloadObjectTypeResolverPicker10Service',
            'PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\InvalidUserEmailErrorPayloadObjectTypeResolverPicker' => 'getInvalidUserEmailErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\InvalidUsernameErrorPayloadObjectTypeResolverPicker' => 'getInvalidUsernameErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\PasswordIsIncorrectErrorPayloadObjectTypeResolverPicker' => 'getPasswordIsIncorrectErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\UserIsLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsLoggedInErrorPayloadObjectTypeResolverPickerService',
            'PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker11Service',
            'PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\InvalidUserEmailErrorPayloadObjectTypeDataLoader' => 'getInvalidUserEmailErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\InvalidUsernameErrorPayloadObjectTypeDataLoader' => 'getInvalidUsernameErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\PasswordIsIncorrectErrorPayloadObjectTypeDataLoader' => 'getPasswordIsIncorrectErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\UserIsLoggedInErrorPayloadObjectTypeDataLoader' => 'getUserIsLoggedInErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\UserIsNotLoggedInErrorPayloadObjectTypeDataLoader' => 'getUserIsNotLoggedInErrorPayloadObjectTypeDataLoaderService',
            'PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\UnionType\\RootLoginUserMutationErrorPayloadUnionTypeDataLoader' => 'getRootLoginUserMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\UnionType\\RootLogoutUserMutationErrorPayloadUnionTypeDataLoader' => 'getRootLogoutUserMutationErrorPayloadUnionTypeDataLoaderService',
            'PoPCMSSchema\\UserStateMutations\\TypeAPIs\\UserStateTypeMutationAPIInterface' => 'getUserStateTypeMutationAPIInterfaceService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginCredentialsInputObjectTypeResolver' => 'getLoginCredentialsInputObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginUserByOneofInputObjectTypeResolver' => 'getLoginUserByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUserEmailErrorPayloadObjectTypeResolver' => 'getInvalidUserEmailErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUsernameErrorPayloadObjectTypeResolver' => 'getInvalidUsernameErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\PasswordIsIncorrectErrorPayloadObjectTypeResolver' => 'getPasswordIsIncorrectErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLoginUserMutationPayloadObjectTypeResolver' => 'getRootLoginUserMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLogoutUserMutationPayloadObjectTypeResolver' => 'getRootLogoutUserMutationPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsLoggedInErrorPayloadObjectTypeResolver' => 'getUserIsLoggedInErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsNotLoggedInErrorPayloadObjectTypeResolver' => 'getUserIsNotLoggedInErrorPayloadObjectTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLoginUserMutationErrorPayloadUnionTypeResolver' => 'getRootLoginUserMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLogoutUserMutationErrorPayloadUnionTypeResolver' => 'getRootLogoutUserMutationErrorPayloadUnionTypeResolverService',
            'PoPCMSSchema\\UserState\\Checkpoints\\DoingPostUserLoggedInAggregateCheckpoint' => 'getDoingPostUserLoggedInAggregateCheckpointService',
            'PoPCMSSchema\\UserState\\Checkpoints\\DoingPostUserNotLoggedInAggregateCheckpoint' => 'getDoingPostUserNotLoggedInAggregateCheckpointService',
            'PoPCMSSchema\\UserState\\Checkpoints\\UserLoggedInCheckpoint' => 'getUserLoggedInCheckpointService',
            'PoPCMSSchema\\UserState\\Checkpoints\\UserNotLoggedInCheckpoint' => 'getUserNotLoggedInCheckpointService',
            'PoPCMSSchema\\UserState\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider' => 'getCheckpointErrorFeedbackItemProviderService',
            'PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\ObjectTypeFieldResolver' => 'getObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\RootMeObjectTypeFieldResolver' => 'getRootMeObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\UserStateObjectTypeFieldResolver' => 'getUserStateObjectTypeFieldResolverService',
            'PoPCMSSchema\\UserState\\Hooks\\DBEntriesHookSet' => 'getDBEntriesHookSet3Service',
            'PoPCMSSchema\\UserState\\State\\AppStateProvider' => 'getAppStateProvider10Service',
            'PoPCMSSchema\\UserState\\TypeAPIs\\UserStateTypeAPIInterface' => 'getUserStateTypeAPIInterfaceService',
            'PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\Hooks\\CustomPostQueryHookSet' => 'getCustomPostQueryHookSetService',
            'PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\Hooks\\UserQueryHookSet' => 'getUserQueryHookSetService',
            'PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet10Service',
            'PoPCMSSchema\\UsersWP\\Hooks\\RoutingHookSet' => 'getRoutingHookSet6Service',
            'PoPCMSSchema\\UsersWP\\Hooks\\RoutingStateHookSet' => 'getRoutingStateHookSet5Service',
            'PoPCMSSchema\\UsersWP\\LooseContracts\\LooseContractResolutionSet' => 'getLooseContractResolutionSet11Service',
            'PoPCMSSchema\\Users\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor10Service',
            'PoPCMSSchema\\Users\\ComponentProcessors\\UserFilterInputContainerComponentProcessor' => 'getUserFilterInputContainerComponentProcessorService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor' => 'getFieldDataloadComponentProcessor6Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor8Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor' => 'getFilterInputComponentProcessor11Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor' => 'getFieldDataloadComponentProcessor7Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostListUserObjectTypeFieldResolver' => 'getCustomPostListUserObjectTypeFieldResolverService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver' => 'getCustomPostObjectTypeFieldResolver3Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FilterInputs\\AuthorIDsFilterInput' => 'getAuthorIDsFilterInputService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FilterInputs\\AuthorSlugFilterInput' => 'getAuthorSlugFilterInputService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FilterInputs\\ExcludeAuthorIDsFilterInput' => 'getExcludeAuthorIDsFilterInputService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\Hooks\\QueryHookSet' => 'getQueryHookSet8Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\LooseContracts\\LooseContractSet' => 'getLooseContractSet10Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet' => 'getAddAuthorInputFieldsToCustomPostInputObjectTypeHookSet2Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\CustomPostOrderByEnumTypeHookSet' => 'getCustomPostOrderByEnumTypeHookSetService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\FilterInputHookSet' => 'getFilterInputHookSet6Service',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\UserEnumTypeHookSet' => 'getUserEnumTypeHookSetService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\TypeAPIs\\CustomPostUserTypeAPIInterface' => 'getCustomPostUserTypeAPIInterfaceService',
            'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\TypeResolvers\\InputObjectType\\UserCustomPostsFilterInputObjectTypeResolver' => 'getUserCustomPostsFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Users\\FieldResolvers\\InterfaceType\\WithAuthorInterfaceTypeFieldResolver' => 'getWithAuthorInterfaceTypeFieldResolverService',
            'PoPCMSSchema\\Users\\FieldResolvers\\ObjectType\\RootUserObjectTypeFieldResolver' => 'getRootUserObjectTypeFieldResolverService',
            'PoPCMSSchema\\Users\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver' => 'getUserObjectTypeFieldResolver5Service',
            'PoPCMSSchema\\Users\\FilterInputs\\EmailFilterInput' => 'getEmailFilterInputService',
            'PoPCMSSchema\\Users\\FilterInputs\\EmailOrEmailsFilterInput' => 'getEmailOrEmailsFilterInputService',
            'PoPCMSSchema\\Users\\FilterInputs\\NameFilterInput' => 'getNameFilterInputService',
            'PoPCMSSchema\\Users\\FilterInputs\\UsernameFilterInput' => 'getUsernameFilterInputService',
            'PoPCMSSchema\\Users\\FilterInputs\\UsernameOrUsernamesFilterInput' => 'getUsernameOrUsernamesFilterInputService',
            'PoPCMSSchema\\Users\\LooseContracts\\LooseContractSet' => 'getLooseContractSet11Service',
            'PoPCMSSchema\\Users\\RelationalTypeDataLoaders\\ObjectType\\UserObjectTypeDataLoader' => 'getUserObjectTypeDataLoaderService',
            'PoPCMSSchema\\Users\\State\\AppStateProvider' => 'getAppStateProvider11Service',
            'PoPCMSSchema\\Users\\TypeAPIs\\UserTypeAPIInterface' => 'getUserTypeAPIInterfaceService',
            'PoPCMSSchema\\Users\\TypeResolvers\\EnumType\\UserOrderByEnumTypeResolver' => 'getUserOrderByEnumTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\FilterByAuthorInputObjectTypeResolver' => 'getFilterByAuthorInputObjectTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserByOneofInputObjectTypeResolver' => 'getUserByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserPaginationInputObjectTypeResolver' => 'getUserPaginationInputObjectTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSearchByOneofInputObjectTypeResolver' => 'getUserSearchByOneofInputObjectTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSortInputObjectTypeResolver' => 'getUserSortInputObjectTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UsersFilterInputObjectTypeResolver' => 'getUsersFilterInputObjectTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\InterfaceType\\WithAuthorInterfaceTypeResolver' => 'getWithAuthorInterfaceTypeResolverService',
            'PoPCMSSchema\\Users\\TypeResolvers\\ObjectType\\UserObjectTypeResolver' => 'getUserObjectTypeResolverService',
            'PoPSchema\\SchemaCommons\\FeedbackItemProviders\\ErrorFeedbackItemProvider' => 'getErrorFeedbackItemProvider2Service',
            'PoPSchema\\SchemaCommons\\FeedbackItemProviders\\InputValueCoercionErrorFeedbackItemProvider' => 'getInputValueCoercionErrorFeedbackItemProviderService',
            'PoPSchema\\SchemaCommons\\FieldResolvers\\InterfaceType\\ErrorPayloadInterfaceTypeFieldResolver' => 'getErrorPayloadInterfaceTypeFieldResolverService',
            'PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\ErrorPayloadObjectTypeFieldResolver' => 'getErrorPayloadObjectTypeFieldResolverService',
            'PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\GenericErrorPayloadObjectTypeFieldResolver' => 'getGenericErrorPayloadObjectTypeFieldResolverService',
            'PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\TransientOperationPayloadObjectTypeFieldResolver' => 'getTransientOperationPayloadObjectTypeFieldResolverService',
            'PoPSchema\\SchemaCommons\\ObjectSerializers\\DateTimeObjectSerializer' => 'getDateTimeObjectSerializerService',
            'PoPSchema\\SchemaCommons\\RelationalTypeDataLoaders\\ObjectType\\GenericErrorPayloadObjectTypeDataLoader' => 'getGenericErrorPayloadObjectTypeDataLoaderService',
            'PoPSchema\\SchemaCommons\\RelationalTypeDataLoaders\\ObjectType\\ObjectMutationPayloadObjectTypeDataLoader' => 'getObjectMutationPayloadObjectTypeDataLoaderService',
            'PoPSchema\\SchemaCommons\\Services\\AllowOrDenySettingsServiceInterface' => 'getAllowOrDenySettingsServiceInterfaceService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OperationStatusEnumTypeResolver' => 'getOperationStatusEnumTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\InterfaceType\\ErrorPayloadInterfaceTypeResolver' => 'getErrorPayloadInterfaceTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ObjectType\\GenericErrorPayloadObjectTypeResolver' => 'getGenericErrorPayloadObjectTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateScalarTypeResolver' => 'getDateScalarTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateTimeScalarTypeResolver' => 'getDateTimeScalarTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\EmailScalarTypeResolver' => 'getEmailScalarTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\HTMLScalarTypeResolver' => 'getHTMLScalarTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\NumericScalarTypeResolver' => 'getNumericScalarTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLAbsolutePathScalarTypeResolver' => 'getURLAbsolutePathScalarTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLScalarTypeResolver' => 'getURLScalarTypeResolverService',
            'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\XMLScalarTypeResolver' => 'getXMLScalarTypeResolverService',
            'PoPWPSchema\\BlockContentParser\\BlockContentParserInterface' => 'getBlockContentParserInterfaceService',
            'PoPWPSchema\\Blocks\\FieldResolvers\\InterfaceType\\BlockInterfaceTypeFieldResolver' => 'getBlockInterfaceTypeFieldResolverService',
            'PoPWPSchema\\Blocks\\FieldResolvers\\ObjectType\\BlockObjectTypeFieldResolver' => 'getBlockObjectTypeFieldResolverService',
            'PoPWPSchema\\Blocks\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver' => 'getCustomPostObjectTypeFieldResolver4Service',
            'PoPWPSchema\\Blocks\\ObjectTypeResolverPickers\\GeneralBlockObjectTypeResolverPicker' => 'getGeneralBlockObjectTypeResolverPickerService',
            'PoPWPSchema\\Blocks\\RelationalTypeDataLoaders\\ObjectType\\GeneralBlockObjectTypeDataLoader' => 'getGeneralBlockObjectTypeDataLoaderService',
            'PoPWPSchema\\Blocks\\RelationalTypeDataLoaders\\UnionType\\BlockUnionTypeDataLoader' => 'getBlockUnionTypeDataLoaderService',
            'PoPWPSchema\\Blocks\\TypeResolvers\\InputObjectType\\BlockFilterByOneofInputObjectTypeResolver' => 'getBlockFilterByOneofInputObjectTypeResolverService',
            'PoPWPSchema\\Blocks\\TypeResolvers\\InterfaceType\\BlockInterfaceTypeResolver' => 'getBlockInterfaceTypeResolverService',
            'PoPWPSchema\\Blocks\\TypeResolvers\\ObjectType\\GeneralBlockObjectTypeResolver' => 'getGeneralBlockObjectTypeResolverService',
            'PoPWPSchema\\Blocks\\TypeResolvers\\UnionType\\BlockUnionTypeResolver' => 'getBlockUnionTypeResolverService',
            'PoPWPSchema\\CommentMeta\\Hooks\\CommentMetaOrderByQueryHookSet' => 'getCommentMetaOrderByQueryHookSetService',
            'PoPWPSchema\\CommentMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet' => 'getAddMetaQueryInputFieldsInputObjectTypeHookSetService',
            'PoPWPSchema\\CommentMeta\\SchemaHooks\\CommentMetaOrderByEnumTypeHookSet' => 'getCommentMetaOrderByEnumTypeHookSetService',
            'PoPWPSchema\\CommentMeta\\TypeResolvers\\InputObjectType\\CommentMetaQueryInputObjectTypeResolver' => 'getCommentMetaQueryInputObjectTypeResolverService',
            'PoPWPSchema\\Comments\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver' => 'getCommentObjectTypeFieldResolver6Service',
            'PoPWPSchema\\Comments\\Hooks\\QueryHookSet' => 'getQueryHookSet9Service',
            'PoPWPSchema\\Comments\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet' => 'getConvertDateQueryInputFieldToArrayInputObjectTypeHookSetService',
            'PoPWPSchema\\CustomPostMeta\\Hooks\\CustomPostMetaOrderByQueryHookSet' => 'getCustomPostMetaOrderByQueryHookSetService',
            'PoPWPSchema\\CustomPostMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet' => 'getAddMetaQueryInputFieldsInputObjectTypeHookSet2Service',
            'PoPWPSchema\\CustomPostMeta\\SchemaHooks\\CustomPostMetaOrderByEnumTypeHookSet' => 'getCustomPostMetaOrderByEnumTypeHookSetService',
            'PoPWPSchema\\CustomPostMeta\\TypeResolvers\\InputObjectType\\CustomPostMetaQueryInputObjectTypeResolver' => 'getCustomPostMetaQueryInputObjectTypeResolverService',
            'PoPWPSchema\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver' => 'getCustomPostObjectTypeFieldResolver5Service',
            'PoPWPSchema\\CustomPosts\\FilterInputs\\HasPasswordFilterInput' => 'getHasPasswordFilterInputService',
            'PoPWPSchema\\CustomPosts\\FilterInputs\\PasswordFilterInput' => 'getPasswordFilterInputService',
            'PoPWPSchema\\CustomPosts\\Hooks\\AddCustomPostPasswordToFilterInputQueryHookSet' => 'getAddCustomPostPasswordToFilterInputQueryHookSetService',
            'PoPWPSchema\\CustomPosts\\Hooks\\CustomPostOrderByQueryHookSet' => 'getCustomPostOrderByQueryHookSetService',
            'PoPWPSchema\\CustomPosts\\SchemaHooks\\AddCustomPostPasswordInputFieldsInputObjectTypeHookSet' => 'getAddCustomPostPasswordInputFieldsInputObjectTypeHookSetService',
            'PoPWPSchema\\CustomPosts\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet' => 'getConvertDateQueryInputFieldToArrayInputObjectTypeHookSet2Service',
            'PoPWPSchema\\CustomPosts\\SchemaHooks\\CustomPostQueryHookSet' => 'getCustomPostQueryHookSet2Service',
            'PoPWPSchema\\CustomPosts\\SchemaHooks\\FilterCustomPostStatusEnumTypeHookSet' => 'getFilterCustomPostStatusEnumTypeHookSetService',
            'PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver' => 'getMediaObjectTypeFieldResolver3Service',
            'PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\QueryableMediaObjectTypeFieldResolver' => 'getQueryableMediaObjectTypeFieldResolverService',
            'PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver19Service',
            'PoPWPSchema\\Media\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet' => 'getConvertDateQueryInputFieldToArrayInputObjectTypeHookSet3Service',
            'PoPWPSchema\\Media\\SchemaHooks\\InputObjectTypeHookSet' => 'getInputObjectTypeHookSet3Service',
            'PoPWPSchema\\Menus\\FieldResolvers\\ObjectType\\MenuObjectTypeFieldResolver' => 'getMenuObjectTypeFieldResolver2Service',
            'PoPWPSchema\\Menus\\FilterInputs\\LocationsFilterInput' => 'getLocationsFilterInputService',
            'PoPWPSchema\\Menus\\Hooks\\QueryHookSet' => 'getQueryHookSet10Service',
            'PoPWPSchema\\Menus\\TypeResolvers\\ScalarType\\MenuLocationEnumStringScalarTypeResolver' => 'getMenuLocationEnumStringScalarTypeResolverService',
            'PoPWPSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider' => 'getFeedbackItemProvider5Service',
            'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByArrayValueOperatorEnumTypeResolver' => 'getMetaQueryCompareByArrayValueOperatorEnumTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByKeyOperatorEnumTypeResolver' => 'getMetaQueryCompareByKeyOperatorEnumTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByNumericValueOperatorEnumTypeResolver' => 'getMetaQueryCompareByNumericValueOperatorEnumTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByStringValueOperatorEnumTypeResolver' => 'getMetaQueryCompareByStringValueOperatorEnumTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryValueTypeEnumTypeResolver' => 'getMetaQueryValueTypeEnumTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByArrayValueInputObjectTypeResolver' => 'getMetaQueryCompareByArrayValueInputObjectTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByKeyInputObjectTypeResolver' => 'getMetaQueryCompareByKeyInputObjectTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByNumericValueInputObjectTypeResolver' => 'getMetaQueryCompareByNumericValueInputObjectTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByOneofInputObjectTypeResolver' => 'getMetaQueryCompareByOneofInputObjectTypeResolverService',
            'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByStringValueInputObjectTypeResolver' => 'getMetaQueryCompareByStringValueInputObjectTypeResolverService',
            'PoPWPSchema\\Multisite\\FieldResolvers\\ObjectType\\NetworkSiteObjectTypeFieldResolver' => 'getNetworkSiteObjectTypeFieldResolverService',
            'PoPWPSchema\\Multisite\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver20Service',
            'PoPWPSchema\\Multisite\\RelationalTypeDataLoaders\\ObjectType\\NetworkSiteObjectTypeDataLoader' => 'getNetworkSiteObjectTypeDataLoaderService',
            'PoPWPSchema\\Multisite\\TypeAPIs\\MultisiteTypeAPIInterface' => 'getMultisiteTypeAPIInterfaceService',
            'PoPWPSchema\\Multisite\\TypeResolvers\\ObjectType\\NetworkSiteObjectTypeResolver' => 'getNetworkSiteObjectTypeResolverService',
            'PoPWPSchema\\PageBuilder\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver21Service',
            'PoPWPSchema\\PageBuilder\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver22Service',
            'PoPWPSchema\\PageBuilder\\Registries\\PageBuilderProviderRegistryInterface' => 'getPageBuilderProviderRegistryInterfaceService',
            'PoPWPSchema\\PageBuilder\\Services\\PageBuilderServiceInterface' => 'getPageBuilderServiceInterfaceService',
            'PoPWPSchema\\PageBuilder\\TypeAPIs\\PageBuilderTypeAPIInterface' => 'getPageBuilderTypeAPIInterfaceService',
            'PoPWPSchema\\PageBuilder\\TypeResolvers\\EnumType\\PageBuilderProvidersEnumStringTypeResolver' => 'getPageBuilderProvidersEnumStringTypeResolverService',
            'PoPWPSchema\\Pages\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver' => 'getPageObjectTypeFieldResolver4Service',
            'PoPWPSchema\\Pages\\Hooks\\AddPagePasswordToFilterInputQueryHookSet' => 'getAddPagePasswordToFilterInputQueryHookSetService',
            'PoPWPSchema\\Pages\\SchemaHooks\\AddPagePasswordInputFieldsInputObjectTypeHookSet' => 'getAddPagePasswordInputFieldsInputObjectTypeHookSetService',
            'PoPWPSchema\\Posts\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver' => 'getPostObjectTypeFieldResolver5Service',
            'PoPWPSchema\\Posts\\FilterInputs\\IsStickyFilterInput' => 'getIsStickyFilterInputService',
            'PoPWPSchema\\Posts\\Hooks\\AddPostPasswordToFilterInputQueryHookSet' => 'getAddPostPasswordToFilterInputQueryHookSetService',
            'PoPWPSchema\\Posts\\Hooks\\QueryHookSet' => 'getQueryHookSet11Service',
            'PoPWPSchema\\Posts\\SchemaHooks\\AddPostPasswordInputFieldsInputObjectTypeHookSet' => 'getAddPostPasswordInputFieldsInputObjectTypeHookSetService',
            'PoPWPSchema\\Posts\\SchemaHooks\\InputObjectTypeHookSet' => 'getInputObjectTypeHookSet4Service',
            'PoPWPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\RelationEnumTypeResolver' => 'getRelationEnumTypeResolverService',
            'PoPWPSchema\\Settings\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver23Service',
            'PoPWPSchema\\Settings\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver24Service',
            'PoPWPSchema\\Settings\\TypeAPIs\\SettingsTypeAPIInterface' => 'getSettingsTypeAPIInterface2Service',
            'PoPWPSchema\\Site\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver' => 'getRootObjectTypeFieldResolver25Service',
            'PoPWPSchema\\TaxonomyMeta\\Hooks\\TaxonomyMetaOrderByQueryHookSet' => 'getTaxonomyMetaOrderByQueryHookSetService',
            'PoPWPSchema\\TaxonomyMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet' => 'getAddMetaQueryInputFieldsInputObjectTypeHookSet3Service',
            'PoPWPSchema\\TaxonomyMeta\\SchemaHooks\\TaxonomyMetaOrderByEnumTypeHookSet' => 'getTaxonomyMetaOrderByEnumTypeHookSetService',
            'PoPWPSchema\\TaxonomyMeta\\TypeResolvers\\InputObjectType\\TaxonomyMetaQueryInputObjectTypeResolver' => 'getTaxonomyMetaQueryInputObjectTypeResolverService',
            'PoPWPSchema\\UserMeta\\Hooks\\UserMetaOrderByQueryHookSet' => 'getUserMetaOrderByQueryHookSetService',
            'PoPWPSchema\\UserMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet' => 'getAddMetaQueryInputFieldsInputObjectTypeHookSet4Service',
            'PoPWPSchema\\UserMeta\\SchemaHooks\\UserMetaOrderByEnumTypeHookSet' => 'getUserMetaOrderByEnumTypeHookSetService',
            'PoPWPSchema\\UserMeta\\TypeResolvers\\InputObjectType\\UserMetaQueryInputObjectTypeResolver' => 'getUserMetaQueryInputObjectTypeResolverService',
            'PoPWPSchema\\Users\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver' => 'getUserObjectTypeFieldResolver6Service',
            'PoPWPSchema\\Users\\Hooks\\QueryHookSet' => 'getQueryHookSet12Service',
            'PoP\\ComponentModel\\AttachableExtensions\\AttachExtensionServiceInterface' => 'getAttachExtensionServiceInterfaceService',
            'PoP\\ComponentModel\\AttachableExtensions\\AttachableExtensionManagerInterface' => 'getAttachableExtensionManagerInterfaceService',
            'PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface' => 'getCacheConfigurationManagerInterfaceService',
            'PoP\\ComponentModel\\Cache\\PersistentCacheInterface' => 'getPersistentCacheInterfaceService',
            'PoP\\ComponentModel\\Cache\\TransientCacheInterface' => 'getTransientCacheInterfaceService',
            'PoP\\ComponentModel\\ComponentFiltering\\ComponentFilterManagerInterface' => 'getComponentFilterManagerInterfaceService',
            'PoP\\ComponentModel\\ComponentFilters\\ComponentPaths' => 'getComponentPathsService',
            'PoP\\ComponentModel\\ComponentHelpers\\ComponentHelpersInterface' => 'getComponentHelpersInterfaceService',
            'PoP\\ComponentModel\\ComponentPath\\ComponentPathHelpersInterface' => 'getComponentPathHelpersInterfaceService',
            'PoP\\ComponentModel\\ComponentPath\\ComponentPathManagerInterface' => 'getComponentPathManagerInterfaceService',
            'PoP\\ComponentModel\\ComponentProcessors\\ComponentProcessorManager' => 'getComponentProcessorManagerService',
            'PoP\\ComponentModel\\ComponentProcessors\\ComponentProcessorManagerInterface' => 'getComponentProcessorManagerInterfaceService',
            'PoP\\ComponentModel\\ComponentProcessors\\DataloadingConstants' => 'getDataloadingConstantsService',
            'PoP\\ComponentModel\\ComponentProcessors\\RootComponentProcessors' => 'getRootComponentProcessorsService',
            'PoP\\ComponentModel\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor' => 'getEntryComponentRoutingProcessor9Service',
            'PoP\\ComponentModel\\DataStructureFormatters\\HTMLDataStructureFormatter' => 'getHTMLDataStructureFormatterService',
            'PoP\\ComponentModel\\DataStructureFormatters\\JSONDataStructureFormatter' => 'getJSONDataStructureFormatterService',
            'PoP\\ComponentModel\\DataStructure\\DataStructureManagerInterface' => 'getDataStructureManagerInterfaceService',
            'PoP\\ComponentModel\\Dictionaries\\ObjectDictionaryInterface' => 'getObjectDictionaryInterfaceService',
            'PoP\\ComponentModel\\DirectivePipeline\\DirectivePipelineServiceInterface' => 'getDirectivePipelineServiceInterfaceService',
            'PoP\\ComponentModel\\DirectiveResolvers\\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver' => 'getConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolverService',
            'PoP\\ComponentModel\\DirectiveResolvers\\HookNames' => 'getHookNamesService',
            'PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeFieldDirectiveResolver' => 'getResolveValueAndMergeFieldDirectiveResolverService',
            'PoP\\ComponentModel\\DirectiveResolvers\\SerializeLeafOutputTypeValuesFieldDirectiveResolver' => 'getSerializeLeafOutputTypeValuesFieldDirectiveResolverService',
            'PoP\\ComponentModel\\DirectiveResolvers\\ValidateFieldDirectiveResolver' => 'getValidateFieldDirectiveResolverService',
            'PoP\\ComponentModel\\Engine\\EngineInterface' => 'getEngineInterfaceService',
            'PoP\\ComponentModel\\EntryComponent\\EntryComponentManagerInterface' => 'getEntryComponentManagerInterfaceService',
            'PoP\\ComponentModel\\Error\\ErrorProviderInterface' => 'getErrorProviderInterfaceService',
            'PoP\\ComponentModel\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider' => 'getCheckpointErrorFeedbackItemProvider2Service',
            'PoP\\ComponentModel\\FeedbackItemProviders\\DeprecationFeedbackItemProvider' => 'getDeprecationFeedbackItemProviderService',
            'PoP\\ComponentModel\\FeedbackItemProviders\\ErrorFeedbackItemProvider' => 'getErrorFeedbackItemProvider3Service',
            'PoP\\ComponentModel\\FeedbackItemProviders\\FieldResolutionErrorFeedbackItemProvider' => 'getFieldResolutionErrorFeedbackItemProviderService',
            'PoP\\ComponentModel\\FeedbackItemProviders\\GenericFeedbackItemProvider' => 'getGenericFeedbackItemProviderService',
            'PoP\\ComponentModel\\FeedbackItemProviders\\InputValueCoercionGraphQLSpecErrorFeedbackItemProvider' => 'getInputValueCoercionGraphQLSpecErrorFeedbackItemProviderService',
            'PoP\\ComponentModel\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider' => 'getMutationErrorFeedbackItemProvider13Service',
            'PoP\\ComponentModel\\FeedbackItemProviders\\SuggestionFeedbackItemProvider' => 'getSuggestionFeedbackItemProviderService',
            'PoP\\ComponentModel\\FeedbackItemProviders\\WarningFeedbackItemProvider' => 'getWarningFeedbackItemProviderService',
            'PoP\\ComponentModel\\Feedback\\FeedbackEntryManagerInterface' => 'getFeedbackEntryManagerInterfaceService',
            'PoP\\ComponentModel\\FieldResolvers\\InterfaceType\\HookNames' => 'getHookNames2Service',
            'PoP\\ComponentModel\\FieldResolvers\\InterfaceType\\IdentifiableObjectInterfaceTypeFieldResolver' => 'getIdentifiableObjectInterfaceTypeFieldResolverService',
            'PoP\\ComponentModel\\FieldResolvers\\ObjectType\\CoreGlobalObjectTypeFieldResolver' => 'getCoreGlobalObjectTypeFieldResolverService',
            'PoP\\ComponentModel\\FieldResolvers\\ObjectType\\HookNames' => 'getHookNames3Service',
            'PoP\\ComponentModel\\FieldResolvers\\ObjectType\\IdentifiableObjectObjectTypeFieldResolver' => 'getIdentifiableObjectObjectTypeFieldResolverService',
            'PoP\\ComponentModel\\FieldResolvers\\ObjectType\\ObjectObjectTypeFieldResolver' => 'getObjectObjectTypeFieldResolverService',
            'PoP\\ComponentModel\\FieldResolvers\\ObjectType\\TypeNameGlobalObjectTypeFieldResolver' => 'getTypeNameGlobalObjectTypeFieldResolverService',
            'PoP\\ComponentModel\\HelperServices\\ApplicationStateHelperServiceInterface' => 'getApplicationStateHelperServiceInterfaceService',
            'PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface' => 'getDataloadHelperServiceInterfaceService',
            'PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface' => 'getRequestHelperServiceInterfaceService',
            'PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface' => 'getSemverHelperServiceInterfaceService',
            'PoP\\ComponentModel\\Hooks\\RemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSet' => 'getRemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSetService',
            'PoP\\ComponentModel\\Info\\ApplicationInfoInterface' => 'getApplicationInfoInterfaceService',
            'PoP\\ComponentModel\\ModelInstance\\ModelInstanceInterface' => 'getModelInstanceInterfaceService',
            'PoP\\ComponentModel\\ObjectSerialization\\ObjectSerializationManagerInterface' => 'getObjectSerializationManagerInterfaceService',
            'PoP\\ComponentModel\\QueryInputOutputHandlers\\ActionExecutionQueryInputOutputHandler' => 'getActionExecutionQueryInputOutputHandlerService',
            'PoP\\ComponentModel\\QueryInputOutputHandlers\\ListQueryInputOutputHandler' => 'getListQueryInputOutputHandlerService',
            'PoP\\ComponentModel\\QueryInputOutputHandlers\\ResponseConstants' => 'getResponseConstantsService',
            'PoP\\ComponentModel\\Registries\\DynamicVariableDefinerDirectiveRegistryInterface' => 'getDynamicVariableDefinerDirectiveRegistryInterfaceService',
            'PoP\\ComponentModel\\Registries\\FieldDirectiveResolverRegistryInterface' => 'getFieldDirectiveResolverRegistryInterfaceService',
            'PoP\\ComponentModel\\Registries\\MandatoryFieldDirectiveResolverRegistryInterface' => 'getMandatoryFieldDirectiveResolverRegistryInterfaceService',
            'PoP\\ComponentModel\\Registries\\MetaDirectiveRegistryInterface' => 'getMetaDirectiveRegistryInterfaceService',
            'PoP\\ComponentModel\\Registries\\OperationDependencyDefinerDirectiveRegistryInterface' => 'getOperationDependencyDefinerDirectiveRegistryInterfaceService',
            'PoP\\ComponentModel\\Registries\\TypeRegistryInterface' => 'getTypeRegistryInterfaceService',
            'PoP\\ComponentModel\\Response\\DatabaseEntryManagerInterface' => 'getDatabaseEntryManagerInterfaceService',
            'PoP\\ComponentModel\\Response\\OutputServiceInterface' => 'getOutputServiceInterfaceService',
            'PoP\\ComponentModel\\Schema\\InputCoercingServiceInterface' => 'getInputCoercingServiceInterfaceService',
            'PoP\\ComponentModel\\Schema\\SchemaCastingServiceInterface' => 'getSchemaCastingServiceInterfaceService',
            'PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface' => 'getSchemaDefinitionServiceInterface2Service',
            'PoP\\ComponentModel\\Schema\\SchemaNamespacingServiceInterface' => 'getSchemaNamespacingServiceInterfaceService',
            'PoP\\ComponentModel\\State\\AppStateProvider' => 'getAppStateProvider12Service',
            'PoP\\ComponentModel\\State\\ApplicationState' => 'getApplicationStateService',
            'PoP\\ComponentModel\\TypeResolvers\\EnumType\\HookNames' => 'getHookNames4Service',
            'PoP\\ComponentModel\\TypeResolvers\\HookHelpers' => 'getHookHelpersService',
            'PoP\\ComponentModel\\TypeResolvers\\Hooks' => 'getHooksService',
            'PoP\\ComponentModel\\TypeResolvers\\InputObjectType\\HookNames' => 'getHookNames5Service',
            'PoP\\ComponentModel\\TypeResolvers\\InterfaceType\\IdentifiableObjectInterfaceTypeResolver' => 'getIdentifiableObjectInterfaceTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\PipelinePositions' => 'getPipelinePositionsService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyBuiltInScalarScalarTypeResolver' => 'getAnyBuiltInScalarScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyScalarScalarTypeResolver' => 'getAnyScalarScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyStringScalarScalarTypeResolver' => 'getAnyStringScalarScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\BooleanScalarTypeResolver' => 'getBooleanScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\DangerouslyNonSpecificScalarTypeScalarTypeResolver' => 'getDangerouslyNonSpecificScalarTypeScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\FloatScalarTypeResolver' => 'getFloatScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IDScalarTypeResolver' => 'getIDScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IntScalarTypeResolver' => 'getIntScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\StringScalarTypeResolver' => 'getStringScalarTypeResolverService',
            'PoP\\ComponentModel\\TypeResolvers\\UnionType\\UnionTypeHelpers' => 'getUnionTypeHelpersService',
            'PoP\\ComponentModel\\TypeResolvers\\UnionType\\UnionTypeSymbols' => 'getUnionTypeSymbolsService',
            'PoP\\ComponentModel\\TypeSerialization\\TypeSerializationServiceInterface' => 'getTypeSerializationServiceInterfaceService',
            'PoP\\ComponentModel\\Variables\\VariableManagerInterface' => 'getVariableManagerInterfaceService',
            'PoP\\ComponentModel\\Versioning\\VersioningServiceInterface' => 'getVersioningServiceInterfaceService',
            'PoP\\ComponentRouting\\ComponentRoutingProcessorManagerInterface' => 'getComponentRoutingProcessorManagerInterfaceService',
            'PoP\\DOMCrawler\\CrawlerFactoryInterface' => 'getCrawlerFactoryInterfaceService',
            'PoP\\Definitions\\DefinitionManagerInterface' => 'getDefinitionManagerInterfaceService',
            'PoP\\EngineWP\\HelperServices\\TemplateHelpersInterface' => 'getTemplateHelpersInterfaceService',
            'PoP\\EngineWP\\Hooks\\TemplateHookSet' => 'getTemplateHookSetService',
            'PoP\\Engine\\Checkpoints\\DoingPostCheckpoint' => 'getDoingPostCheckpointService',
            'PoP\\Engine\\DirectiveResolvers\\IncludeFieldDirectiveResolver' => 'getIncludeFieldDirectiveResolverService',
            'PoP\\Engine\\DirectiveResolvers\\SkipFieldDirectiveResolver' => 'getSkipFieldDirectiveResolverService',
            'PoP\\Engine\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider' => 'getCheckpointErrorFeedbackItemProvider3Service',
            'PoP\\Engine\\FeedbackItemProviders\\ErrorFeedbackItemProvider' => 'getErrorFeedbackItemProvider4Service',
            'PoP\\Engine\\FieldResolvers\\ObjectType\\AppStateMethodsGlobalObjectTypeFieldResolver' => 'getAppStateMethodsGlobalObjectTypeFieldResolverService',
            'PoP\\Engine\\Hooks\\VarsHookSet' => 'getVarsHookSet6Service',
            'PoP\\Engine\\ObjectModels\\Root' => 'getRootService',
            'PoP\\Engine\\ObjectModels\\SuperRoot' => 'getSuperRootService',
            'PoP\\Engine\\RelationalTypeDataLoaders\\ObjectType\\RootObjectTypeDataLoader' => 'getRootObjectTypeDataLoaderService',
            'PoP\\Engine\\RelationalTypeDataLoaders\\ObjectType\\SuperRootObjectTypeDataLoader' => 'getSuperRootObjectTypeDataLoaderService',
            'PoP\\Engine\\Schema\\SchemaDefinitionServiceInterface' => 'getSchemaDefinitionServiceInterface3Service',
            'PoP\\Engine\\TypeResolvers\\ObjectType\\RootObjectTypeResolver' => 'getRootObjectTypeResolverService',
            'PoP\\Engine\\TypeResolvers\\ObjectType\\SuperRootObjectTypeResolver' => 'getSuperRootObjectTypeResolverService',
            'PoP\\Engine\\TypeResolvers\\ScalarType\\JSONObjectScalarTypeResolver' => 'getJSONObjectScalarTypeResolverService',
            'PoP\\GraphQLParser\\AST\\ASTHelperServiceInterface' => 'getASTHelperServiceInterfaceService',
            'PoP\\GraphQLParser\\AST\\ASTNodeDuplicatorServiceInterface' => 'getASTNodeDuplicatorServiceInterfaceService',
            'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLExtendedSpecErrorFeedbackItemProvider' => 'getGraphQLExtendedSpecErrorFeedbackItemProviderService',
            'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLParserErrorFeedbackItemProvider' => 'getGraphQLParserErrorFeedbackItemProviderService',
            'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLSpecErrorFeedbackItemProvider' => 'getGraphQLSpecErrorFeedbackItemProviderService',
            'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLUnsupportedFeatureErrorFeedbackItemProvider' => 'getGraphQLUnsupportedFeatureErrorFeedbackItemProviderService',
            'PoP\\GraphQLParser\\Query\\GraphQLQueryStringFormatterInterface' => 'getGraphQLQueryStringFormatterInterfaceService',
            'PoP\\GraphQLParser\\State\\AppStateProvider' => 'getAppStateProvider13Service',
            'PoP\\GuzzleHTTP\\Services\\GuzzleServiceInterface' => 'getGuzzleServiceInterfaceService',
            'PoP\\GuzzleHTTP\\Services\\HTTPResponseValidatorInterface' => 'getHTTPResponseValidatorInterfaceService',
            'PoP\\LooseContracts\\LooseContractManagerInterface' => 'getLooseContractManagerInterfaceService',
            'PoP\\LooseContracts\\NameResolverInterface' => 'getNameResolverInterfaceService',
            'PoP\\MarkdownConvertor\\MarkdownConvertorInterface' => 'getMarkdownConvertorInterfaceService',
            'PoP\\RootWP\\Hooks\\SetupCortexRoutingHookSet' => 'getSetupCortexRoutingHookSetService',
            'PoP\\Root\\Container\\ServiceInstantiatorInterface' => 'getServiceInstantiatorInterfaceService',
            'PoP\\Root\\FeedbackItemProviders\\GenericFeedbackItemProvider' => 'getGenericFeedbackItemProvider2Service',
            'PoP\\Root\\Instances\\InstanceManagerInterface' => 'getInstanceManagerInterfaceService',
            'PoP\\Root\\Registries\\AppStateProviderRegistryInterface' => 'getAppStateProviderRegistryInterfaceService',
            'PoP\\Root\\Registries\\FeedbackItemRegistryInterface' => 'getFeedbackItemRegistryInterfaceService',
            'PoP\\Root\\Routing\\RoutingHelperServiceInterface' => 'getRoutingHelperServiceInterfaceService',
            'PoP\\Root\\Routing\\RoutingManagerInterface' => 'getRoutingManagerInterfaceService',
            'PoP\\Root\\State\\AppStateProvider' => 'getAppStateProvider14Service',
            'PoP\\Root\\Translation\\TranslationAPIInterface' => 'getTranslationAPIInterfaceService',
            'persistent_cache_item_pool' => 'getPersistentCacheItemPoolService',
            'transient_cache_item_pool' => 'getTransientCacheItemPoolService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\EndpointEditorBlockServiceTagInterface' => true,
            'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\PersistedQueryEndpointEditorBlockServiceTagInterface' => true,
            'GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\CustomPostTypeInterface' => true,
            'GatoGraphQL\\GatoGraphQL\\Services\\GraphQLEndpointPathProviders\\GraphQLEndpointPathProviderInterface' => true,
            'GatoGraphQL\\GatoGraphQL\\Services\\Menus\\MenuInterface' => true,
            'GatoGraphQL\\GatoGraphQL\\Services\\ModuleTypeResolvers\\ModuleTypeResolverInterface' => true,
            'GatoGraphQL\\GatoGraphQL\\Services\\Taxonomies\\TaxonomyInterface' => true,
            'GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolverInterface' => true,
            'PoPCMSSchema\\Categories\\ObjectTypeResolverPickers\\CategoryObjectTypeResolverPickerInterface' => true,
            'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\FilterCustomPostsByCategoriesInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\Categories\\TypeResolvers\\ObjectType\\CategoryObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CreateCategoryTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\UpdateCategoryTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\DeleteGenericCategoryTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\DeleteGenericTagTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\CustomPosts\\ObjectTypeResolverPickers\\CustomPostObjectTypeResolverPickerInterface' => true,
            'PoPCMSSchema\\CustomPosts\\TypeResolvers\\ObjectType\\CustomPostObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemsFilterInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\CreatePageInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostCategoriesFilterInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\DeletePostCategoryTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\CreatePostInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\DeletePostTagTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostTagsFilterInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostsFilterInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\CreateTagTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\UpdateTagTermInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\Tags\\ObjectTypeResolverPickers\\TagObjectTypeResolverPickerInterface' => true,
            'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\FilterCustomPostsByTagsInputObjectTypeResolverInterface' => true,
            'PoPCMSSchema\\Tags\\TypeResolvers\\ObjectType\\TagObjectTypeResolverInterface' => true,
            'PoPWPSchema\\Blocks\\ObjectTypeResolverPickers\\BlockObjectTypeResolverPickerInterface' => true,
            'PoP\\ComponentModel\\ComponentFilters\\ComponentFilterInterface' => true,
            'PoP\\ComponentModel\\ComponentProcessors\\ComponentProcessorInterface' => true,
            'PoP\\ComponentModel\\FieldResolvers\\InterfaceType\\InterfaceTypeFieldResolverInterface' => true,
            'PoP\\ComponentModel\\FieldResolvers\\InterfaceType\\InterfaceTypeFieldSchemaDefinitionResolverInterface' => true,
            'PoP\\ComponentModel\\TypeResolvers\\InterfaceType\\InterfaceTypeResolverInterface' => true,
            'PoP\\Root\\FeedbackItemProviders\\FeedbackItemProviderInterface' => true,
            'PoP\\Root\\State\\AppStateProviderInterface' => true,
            'default_data_structure_formatter' => true,
        ];
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Container\ContainerManagerInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Container\ContainerManager
     */
    protected static function getContainerManagerInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Container\\ContainerManagerInterface'] = new \GatoGraphQL\GatoGraphQL\Container\ContainerManager();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ContentProcessors\MarkdownContentParserInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ContentProcessors\MarkdownContentParser
     */
    protected static function getMarkdownContentParserInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ContentProcessors\\MarkdownContentParserInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\ContentProcessors\MarkdownContentParser();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\FeedbackItemProviders\ErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\FeedbackItemProviders\ErrorFeedbackItemProvider
     */
    protected static function getErrorFeedbackItemProviderService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] = $instance = new \GatoGraphQL\GatoGraphQL\FeedbackItemProviders\ErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Hooks\ApplicationPasswordAuthorizationHookSet' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Hooks\ApplicationPasswordAuthorizationHookSet
     */
    protected static function getApplicationPasswordAuthorizationHookSetService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Hooks\\ApplicationPasswordAuthorizationHookSet'] = $instance = new \GatoGraphQL\GatoGraphQL\Hooks\ApplicationPasswordAuthorizationHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Log\LoggerInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Log\Logger
     */
    protected static function getLoggerInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Log\\LoggerInterface'] = new \GatoGraphQL\GatoGraphQL\Log\Logger();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Marketplace\LicenseValidationServiceInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Marketplace\LicenseValidationService
     */
    protected static function getLicenseValidationServiceInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Marketplace\\LicenseValidationServiceInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Marketplace\LicenseValidationService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Marketplace\MarketplaceProviderCommercialExtensionActivationServiceInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Marketplace\LemonSqueezyCommercialExtensionActivationService
     */
    protected static function getMarketplaceProviderCommercialExtensionActivationServiceInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Marketplace\\MarketplaceProviderCommercialExtensionActivationServiceInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Marketplace\LemonSqueezyCommercialExtensionActivationService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Marketplace\MarketplaceProviderCommercialPluginUpdaterServiceInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Marketplace\LemonSqueezyCommercialPluginUpdaterService
     */
    protected static function getMarketplaceProviderCommercialPluginUpdaterServiceInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Marketplace\\MarketplaceProviderCommercialPluginUpdaterServiceInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Marketplace\LemonSqueezyCommercialPluginUpdaterService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\ClientFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\ClientFunctionalityModuleResolver
     */
    protected static function getClientFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\ClientFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\DeprecatedClientFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\DeprecatedClientFunctionalityModuleResolver
     */
    protected static function getDeprecatedClientFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\DeprecatedClientFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointConfigurationFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointConfigurationFunctionalityModuleResolver
     */
    protected static function getEndpointConfigurationFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointConfigurationFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointFunctionalityModuleResolver
     */
    protected static function getEndpointFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\EndpointFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerBundleExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerBundleExtensionModuleResolver
     */
    protected static function getPowerBundleExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerBundleExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerExtensionModuleResolver
     */
    protected static function getPowerExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PowerExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumBundleExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumBundleExtensionModuleResolver
     */
    protected static function getPremiumBundleExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumBundleExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumExtensionModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumExtensionModuleResolver
     */
    protected static function getPremiumExtensionModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\Extensions\PremiumExtensionModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\MetaSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\MetaSchemaTypeModuleResolver
     */
    protected static function getMetaSchemaTypeModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\MetaSchemaTypeModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\MutationSchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\MutationSchemaTypeModuleResolver
     */
    protected static function getMutationSchemaTypeModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\MutationSchemaTypeModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginGeneralSettingsFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginGeneralSettingsFunctionalityModuleResolver
     */
    protected static function getPluginGeneralSettingsFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginGeneralSettingsFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginManagementFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginManagementFunctionalityModuleResolver
     */
    protected static function getPluginManagementFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\PluginManagementFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver
     */
    protected static function getSchemaConfigurationFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaConfigurationFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaTypeModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaTypeModuleResolver
     */
    protected static function getSchemaTypeModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\SchemaTypeModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\ModuleResolvers\UserInterfaceFunctionalityModuleResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\ModuleResolvers\UserInterfaceFunctionalityModuleResolver
     */
    protected static function getUserInterfaceFunctionalityModuleResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\ModuleResolvers\UserInterfaceFunctionalityModuleResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\PluginDataSetup\PluginDataSetupServiceInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\PluginDataSetup\PluginDataSetupService
     */
    protected static function getPluginDataSetupServiceInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\PluginDataSetup\\PluginDataSetupServiceInterface'] = new \GatoGraphQL\GatoGraphQL\PluginDataSetup\PluginDataSetupService();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\CustomPostTypeRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\CustomPostTypeRegistry
     */
    protected static function getCustomPostTypeRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\CustomPostTypeRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\CustomPostTypeRegistry();

        $instance->addCustomPostType(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'] ?? self::getGraphQLSchemaConfigurationCustomPostTypeService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\EndpointBlockRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\EndpointBlockRegistry
     */
    protected static function getEndpointBlockRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\EndpointBlockRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\EndpointBlockRegistry();

        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\EndpointSchemaConfigurationBlock'] ?? self::getEndpointSchemaConfigurationBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\EndpointSchemaConfigurationBlock');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\EndpointExecuterRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\EndpointExecuterRegistry
     */
    protected static function getEndpointExecuterRegistryInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\EndpointExecuterRegistryInterface'] = new \GatoGraphQL\GatoGraphQL\Registries\EndpointExecuterRegistry();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\EndpointSchemaConfigurationExecuterRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\EndpointSchemaConfigurationExecuterRegistry
     */
    protected static function getEndpointSchemaConfigurationExecuterRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\EndpointSchemaConfigurationExecuterRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\EndpointSchemaConfigurationExecuterRegistry();

        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ComposableDirectivesBlockSchemaConfigurationExecuter'] ?? self::getComposableDirectivesBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ComposableDirectivesBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ExposeSensitiveDataBlockSchemaConfigurationExecuter'] ?? self::getExposeSensitiveDataBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ExposeSensitiveDataBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\GlobalFieldsBlockSchemaConfigurationExecuter'] ?? self::getGlobalFieldsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\GlobalFieldsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MultiFieldDirectivesBlockSchemaConfigurationExecuter'] ?? self::getMultiFieldDirectivesBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MultiFieldDirectivesBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MutationSchemeBlockSchemaConfigurationExecuter'] ?? self::getMutationSchemeBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MutationSchemeBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\NamespacingBlockSchemaConfigurationExecuter'] ?? self::getNamespacingBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\NamespacingBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ResponseHeadersBlockSchemaConfigurationExecuter'] ?? self::getResponseHeadersBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ResponseHeadersBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoriesBlockSchemaConfigurationExecuter'] ?? self::getSchemaCategoriesBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoriesBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoryMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaCategoryMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoryMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMetaBlockSchemaConfigurationExecuter'] ?? self::getSchemaCommentMetaBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMetaBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaCommentMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMetaBlockSchemaConfigurationExecuter'] ?? self::getSchemaCustomPostMetaBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMetaBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaCustomPostMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostTagMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaCustomPostTagMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostTagMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostsBlockSchemaConfigurationExecuter'] ?? self::getSchemaCustomPostsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaMediaMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaMediaMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaMediaMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaSettingsBlockSchemaConfigurationExecuter'] ?? self::getSchemaSettingsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaSettingsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaTagMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagsBlockSchemaConfigurationExecuter'] ?? self::getSchemaTagsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTaxonomyMetaBlockSchemaConfigurationExecuter'] ?? self::getSchemaTaxonomyMetaBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTaxonomyMetaBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserMetaBlockSchemaConfigurationExecuter'] ?? self::getSchemaUserMetaBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserMetaBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserStateMutationsBlockSchemaConfigurationExecuter'] ?? self::getSchemaUserStateMutationsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserStateMutationsBlockSchemaConfigurationExecuter');
        $instance->addSchemaConfigurationExecuter(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SelfFieldsBlockSchemaConfigurationExecuter'] ?? self::getSelfFieldsBlockSchemaConfigurationExecuterService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SelfFieldsBlockSchemaConfigurationExecuter');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\GraphQLEndpointPathProviderRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\GraphQLEndpointPathProviderRegistry
     */
    protected static function getGraphQLEndpointPathProviderRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\GraphQLEndpointPathProviderRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\GraphQLEndpointPathProviderRegistry();

        $instance->addGraphQLEndpointPathProvider(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\GraphQLEndpointPathProviders\\GraphQLSingleEndpointPathProvider'] ?? self::getGraphQLSingleEndpointPathProviderService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\GraphQLEndpointPathProviders\\GraphQLSingleEndpointPathProvider');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\ModuleRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\ModuleRegistry
     */
    protected static function getModuleRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\ModuleRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\ModuleRegistry();

        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver'] ?? self::getClientFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\ClientFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver'] ?? self::getDeprecatedClientFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\DeprecatedClientFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver'] ?? self::getEndpointConfigurationFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointConfigurationFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver'] ?? self::getEndpointFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\EndpointFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver'] ?? self::getPowerBundleExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerBundleExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver'] ?? self::getPowerExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PowerExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver'] ?? self::getPremiumBundleExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumBundleExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver'] ?? self::getPremiumExtensionModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\Extensions\\PremiumExtensionModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver'] ?? self::getMetaSchemaTypeModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MetaSchemaTypeModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver'] ?? self::getMutationSchemaTypeModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\MutationSchemaTypeModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver'] ?? self::getPluginGeneralSettingsFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginGeneralSettingsFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver'] ?? self::getPluginManagementFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\PluginManagementFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver'] ?? self::getSchemaConfigurationFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaConfigurationFunctionalityModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver'] ?? self::getSchemaTypeModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\SchemaTypeModuleResolver');
        $instance->addModuleResolver(($container->services['GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver'] ?? self::getUserInterfaceFunctionalityModuleResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\ModuleResolvers\\UserInterfaceFunctionalityModuleResolver');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\ModuleTypeRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\ModuleTypeRegistry
     */
    protected static function getModuleTypeRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\ModuleTypeRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\ModuleTypeRegistry();

        $instance->addModuleTypeResolver(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\ModuleTypeResolvers\\ModuleTypeResolver'] ?? self::getModuleTypeResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\ModuleTypeResolvers\\ModuleTypeResolver');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\SchemaConfigBlockRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\SchemaConfigBlockRegistry
     */
    protected static function getSchemaConfigBlockRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\SchemaConfigBlockRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\SchemaConfigBlockRegistry();

        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigComposableDirectivesBlock'] ?? self::getSchemaConfigComposableDirectivesBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigComposableDirectivesBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigExposeSensitiveDataBlock'] ?? self::getSchemaConfigExposeSensitiveDataBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigExposeSensitiveDataBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigGlobalFieldsBlock'] ?? self::getSchemaConfigGlobalFieldsBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigGlobalFieldsBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMultiFieldDirectivesBlock'] ?? self::getSchemaConfigMultiFieldDirectivesBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMultiFieldDirectivesBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'] ?? self::getSchemaConfigMutationSchemeBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMutationSchemeBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigNamespacingBlock'] ?? self::getSchemaConfigNamespacingBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigNamespacingBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigPayloadTypesForMutationsBlock'] ?? self::getSchemaConfigPayloadTypesForMutationsBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigPayloadTypesForMutationsBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigResponseHeadersBlock'] ?? self::getSchemaConfigResponseHeadersBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigResponseHeadersBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCategoriesBlock'] ?? self::getSchemaConfigSchemaCategoriesBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCategoriesBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCommentMetaBlock'] ?? self::getSchemaConfigSchemaCommentMetaBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCommentMetaBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostMetaBlock'] ?? self::getSchemaConfigSchemaCustomPostMetaBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostMetaBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostsBlock'] ?? self::getSchemaConfigSchemaCustomPostsBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostsBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaSettingsBlock'] ?? self::getSchemaConfigSchemaSettingsBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaSettingsBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTagsBlock'] ?? self::getSchemaConfigSchemaTagsBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTagsBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTaxonomyMetaBlock'] ?? self::getSchemaConfigSchemaTaxonomyMetaBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTaxonomyMetaBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaUserMetaBlock'] ?? self::getSchemaConfigSchemaUserMetaBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaUserMetaBlock');
        $instance->addBlock(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSelfFieldsBlock'] ?? self::getSchemaConfigSelfFieldsBlockService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSelfFieldsBlock');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\SettingsCategoryRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\SettingsCategoryRegistry
     */
    protected static function getSettingsCategoryRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\SettingsCategoryRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\SettingsCategoryRegistry();

        $instance->addSettingsCategoryResolver(($container->services['GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver'] ?? self::getSettingsCategoryResolverService($container)), 'GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\TaxonomyRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\TaxonomyRegistry
     */
    protected static function getTaxonomyRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\TaxonomyRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\TaxonomyRegistry();

        $instance->addTaxonomy(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Taxonomies\\GraphQLEndpointCategoryTaxonomy'] ?? self::getGraphQLEndpointCategoryTaxonomyService($container)), 'GatoGraphQL\\GatoGraphQL\\Services\\Taxonomies\\GraphQLEndpointCategoryTaxonomy');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Registries\UserAuthorizationSchemeRegistryInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Registries\UserAuthorizationSchemeRegistry
     */
    protected static function getUserAuthorizationSchemeRegistryInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Registries\\UserAuthorizationSchemeRegistryInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Registries\UserAuthorizationSchemeRegistry();

        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme'] ?? self::getAdministratorRoleUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme');
        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme'] ?? self::getDownToAuthorRoleUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme');
        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme'] ?? self::getDownToEditorRoleUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme');
        $instance->addUserAuthorizationScheme(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme'] ?? self::getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService($container)), 'GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme');

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Request\PrematureRequestServiceInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Request\PrematureRequestService
     */
    protected static function getPrematureRequestServiceInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Request\\PrematureRequestServiceInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Request\PrematureRequestService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorization
     */
    protected static function getUserAuthorizationInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorization();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\AdministratorRoleUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\AdministratorRoleUserAuthorizationScheme
     */
    protected static function getAdministratorRoleUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\AdministratorRoleUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToAuthorRoleUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToAuthorRoleUserAuthorizationScheme
     */
    protected static function getDownToAuthorRoleUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToAuthorRoleUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToEditorRoleUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToEditorRoleUserAuthorizationScheme
     */
    protected static function getDownToEditorRoleUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\DownToEditorRoleUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\ManageGraphQLSchemaCapabilityUserAuthorizationScheme' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\ManageGraphQLSchemaCapabilityUserAuthorizationScheme
     */
    protected static function getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme'] = $instance = new \GatoGraphQL\GatoGraphQL\Security\UserAuthorizationSchemes\ManageGraphQLSchemaCapabilityUserAuthorizationScheme();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Aggregators\BundleExtensionAggregator' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Aggregators\BundleExtensionAggregator
     */
    protected static function getBundleExtensionAggregatorService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Aggregators\\BundleExtensionAggregator'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Aggregators\BundleExtensionAggregator();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Aggregators\ModuleAggregator' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Aggregators\ModuleAggregator
     */
    protected static function getModuleAggregatorService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Aggregators\\ModuleAggregator'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Aggregators\ModuleAggregator();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\BlockCategories\EndpointBlockCategory' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\BlockCategories\EndpointBlockCategory
     */
    protected static function getEndpointBlockCategoryService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\BlockCategories\\EndpointBlockCategory'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\BlockCategories\EndpointBlockCategory();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\BlockCategories\SchemaConfigurationBlockCategory' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\BlockCategories\SchemaConfigurationBlockCategory
     */
    protected static function getSchemaConfigurationBlockCategoryService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\BlockCategories\\SchemaConfigurationBlockCategory'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\BlockCategories\SchemaConfigurationBlockCategory();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\EndpointSchemaConfigurationBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\EndpointSchemaConfigurationBlock
     */
    protected static function getEndpointSchemaConfigurationBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\EndpointSchemaConfigurationBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\EndpointSchemaConfigurationBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigComposableDirectivesBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigComposableDirectivesBlock
     */
    protected static function getSchemaConfigComposableDirectivesBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigComposableDirectivesBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigComposableDirectivesBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigExposeSensitiveDataBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigExposeSensitiveDataBlock
     */
    protected static function getSchemaConfigExposeSensitiveDataBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigExposeSensitiveDataBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigExposeSensitiveDataBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigGlobalFieldsBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigGlobalFieldsBlock
     */
    protected static function getSchemaConfigGlobalFieldsBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigGlobalFieldsBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigGlobalFieldsBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigMultiFieldDirectivesBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigMultiFieldDirectivesBlock
     */
    protected static function getSchemaConfigMultiFieldDirectivesBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMultiFieldDirectivesBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigMultiFieldDirectivesBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigMutationSchemeBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigMutationSchemeBlock
     */
    protected static function getSchemaConfigMutationSchemeBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigMutationSchemeBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigNamespacingBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigNamespacingBlock
     */
    protected static function getSchemaConfigNamespacingBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigNamespacingBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigNamespacingBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigPayloadTypesForMutationsBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigPayloadTypesForMutationsBlock
     */
    protected static function getSchemaConfigPayloadTypesForMutationsBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigPayloadTypesForMutationsBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigPayloadTypesForMutationsBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigResponseHeadersBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigResponseHeadersBlock
     */
    protected static function getSchemaConfigResponseHeadersBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigResponseHeadersBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigResponseHeadersBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCategoriesBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCategoriesBlock
     */
    protected static function getSchemaConfigSchemaCategoriesBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCategoriesBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCategoriesBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCommentMetaBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCommentMetaBlock
     */
    protected static function getSchemaConfigSchemaCommentMetaBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCommentMetaBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCommentMetaBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCustomPostMetaBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCustomPostMetaBlock
     */
    protected static function getSchemaConfigSchemaCustomPostMetaBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostMetaBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCustomPostMetaBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCustomPostsBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCustomPostsBlock
     */
    protected static function getSchemaConfigSchemaCustomPostsBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostsBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaCustomPostsBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaSettingsBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaSettingsBlock
     */
    protected static function getSchemaConfigSchemaSettingsBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaSettingsBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaSettingsBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaTagsBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaTagsBlock
     */
    protected static function getSchemaConfigSchemaTagsBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTagsBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaTagsBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaTaxonomyMetaBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaTaxonomyMetaBlock
     */
    protected static function getSchemaConfigSchemaTaxonomyMetaBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTaxonomyMetaBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaTaxonomyMetaBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaUserMetaBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaUserMetaBlock
     */
    protected static function getSchemaConfigSchemaUserMetaBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaUserMetaBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSchemaUserMetaBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSelfFieldsBlock' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSelfFieldsBlock
     */
    protected static function getSchemaConfigSelfFieldsBlockService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSelfFieldsBlock'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Blocks\SchemaConfigSelfFieldsBlock();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType
     */
    protected static function getGraphQLSchemaConfigurationCustomPostTypeService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\CustomPostTypes\GraphQLSchemaConfigurationCustomPostType();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\DataProviders\TutorialLessonDataProvider' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\DataProviders\TutorialLessonDataProvider
     */
    protected static function getTutorialLessonDataProviderService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\DataProviders\\TutorialLessonDataProvider'] = new \GatoGraphQL\GatoGraphQL\Services\DataProviders\TutorialLessonDataProvider();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\EditorScripts\SchemaConfigurationAdditionalDocumentationEditorScript' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\EditorScripts\SchemaConfigurationAdditionalDocumentationEditorScript
     */
    protected static function getSchemaConfigurationAdditionalDocumentationEditorScriptService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\EditorScripts\\SchemaConfigurationAdditionalDocumentationEditorScript'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\EditorScripts\SchemaConfigurationAdditionalDocumentationEditorScript();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Endpoint\EndpointExecuterService' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Endpoint\EndpointExecuterService
     */
    protected static function getEndpointExecuterServiceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Endpoint\\EndpointExecuterService'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Endpoint\EndpointExecuterService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\GraphQLEndpointPathProviders\GraphQLSingleEndpointPathProvider' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\GraphQLEndpointPathProviders\GraphQLSingleEndpointPathProvider
     */
    protected static function getGraphQLSingleEndpointPathProviderService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\GraphQLEndpointPathProviders\\GraphQLSingleEndpointPathProvider'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\GraphQLEndpointPathProviders\GraphQLSingleEndpointPathProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\BlockHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\BlockHelpers
     */
    protected static function getBlockHelpersService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\BlockHelpers'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\BlockHelpers();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\BlockRenderingHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\BlockRenderingHelpers
     */
    protected static function getBlockRenderingHelpersService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\BlockRenderingHelpers'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\BlockRenderingHelpers();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\CPTUtils' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\CPTUtils
     */
    protected static function getCPTUtilsService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\CPTUtils'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\CPTUtils();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\EditorHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\EditorHelpers
     */
    protected static function getEditorHelpersService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EditorHelpers'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\EditorHelpers();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointBlockHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointBlockHelpers
     */
    protected static function getEndpointBlockHelpersService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EndpointBlockHelpers'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointBlockHelpers();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointHelpers
     */
    protected static function getEndpointHelpersService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\EndpointHelpers'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Helpers\EndpointHelpers();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\HookNamespacingHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\HookNamespacingHelpers
     */
    protected static function getHookNamespacingHelpersService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\HookNamespacingHelpers'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\HookNamespacingHelpers();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\LocaleHelper' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\LocaleHelper
     */
    protected static function getLocaleHelperService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\LocaleHelper'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\LocaleHelper();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\MenuPageHelper' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\MenuPageHelper
     */
    protected static function getMenuPageHelperService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\MenuPageHelper'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\MenuPageHelper();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\RenderingHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\RenderingHelpers
     */
    protected static function getRenderingHelpersService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\RenderingHelpers'] = new \GatoGraphQL\GatoGraphQL\Services\Helpers\RenderingHelpers();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Helpers\UserSettingsHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Helpers\UserSettingsHelpers
     */
    protected static function getUserSettingsHelpersService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Helpers\\UserSettingsHelpers'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Helpers\UserSettingsHelpers();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Hooks\PrintEndpointInEditorHookSet' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Hooks\PrintEndpointInEditorHookSet
     */
    protected static function getPrintEndpointInEditorHookSetService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Hooks\\PrintEndpointInEditorHookSet'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Hooks\PrintEndpointInEditorHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Hooks\QueryHookSet
     */
    protected static function getQueryHookSetService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Hooks\\QueryHookSet'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\BottomMenuPageAttacher' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\BottomMenuPageAttacher
     */
    protected static function getBottomMenuPageAttacherService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\BottomMenuPageAttacher'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\BottomMenuPageAttacher();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\SingleEndpointClientMenuPageAttacher' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\SingleEndpointClientMenuPageAttacher
     */
    protected static function getSingleEndpointClientMenuPageAttacherService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\SingleEndpointClientMenuPageAttacher'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\SingleEndpointClientMenuPageAttacher();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\TopMenuPageAttacher' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\TopMenuPageAttacher
     */
    protected static function getTopMenuPageAttacherService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\TopMenuPageAttacher'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPageAttachers\TopMenuPageAttacher();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\AboutMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\AboutMenuPage
     */
    protected static function getAboutMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\AboutMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\AboutMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionDocModuleDocumentationMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionDocModuleDocumentationMenuPage
     */
    protected static function getExtensionDocModuleDocumentationMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionDocModuleDocumentationMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionDocModuleDocumentationMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionDocsMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionDocsMenuPage
     */
    protected static function getExtensionDocsMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionDocsMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionDocsMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionModuleDocumentationMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionModuleDocumentationMenuPage
     */
    protected static function getExtensionModuleDocumentationMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionModuleDocumentationMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionModuleDocumentationMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionsMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionsMenuPage
     */
    protected static function getExtensionsMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionsMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ExtensionsMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\GraphQLVoyagerMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\GraphQLVoyagerMenuPage
     */
    protected static function getGraphQLVoyagerMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\GraphQLVoyagerMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\GraphQLVoyagerMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\GraphiQLMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\GraphiQLMenuPage
     */
    protected static function getGraphiQLMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\GraphiQLMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\GraphiQLMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ModuleDocumentationMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ModuleDocumentationMenuPage
     */
    protected static function getModuleDocumentationMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModuleDocumentationMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ModuleDocumentationMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ModulesMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ModulesMenuPage
     */
    protected static function getModulesMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModulesMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ModulesMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\ReleaseNotesAboutMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\ReleaseNotesAboutMenuPage
     */
    protected static function getReleaseNotesAboutMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ReleaseNotesAboutMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\ReleaseNotesAboutMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\SettingsMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\SettingsMenuPage
     */
    protected static function getSettingsMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\SettingsMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\SettingsMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\MenuPages\TutorialMenuPage' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\MenuPages\TutorialMenuPage
     */
    protected static function getTutorialMenuPageService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\TutorialMenuPage'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\MenuPages\TutorialMenuPage();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Menus\PluginMenu' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Menus\PluginMenu
     */
    protected static function getPluginMenuService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Menus\\PluginMenu'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Menus\PluginMenu();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\ModuleTypeResolvers\ModuleTypeResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\ModuleTypeResolvers\ModuleTypeResolver
     */
    protected static function getModuleTypeResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\ModuleTypeResolvers\\ModuleTypeResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\ModuleTypeResolvers\ModuleTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ComposableDirectivesBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ComposableDirectivesBlockSchemaConfigurationExecuter
     */
    protected static function getComposableDirectivesBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ComposableDirectivesBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ComposableDirectivesBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ExposeSensitiveDataBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ExposeSensitiveDataBlockSchemaConfigurationExecuter
     */
    protected static function getExposeSensitiveDataBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ExposeSensitiveDataBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ExposeSensitiveDataBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\GlobalFieldsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\GlobalFieldsBlockSchemaConfigurationExecuter
     */
    protected static function getGlobalFieldsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\GlobalFieldsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\GlobalFieldsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\MultiFieldDirectivesBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\MultiFieldDirectivesBlockSchemaConfigurationExecuter
     */
    protected static function getMultiFieldDirectivesBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MultiFieldDirectivesBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\MultiFieldDirectivesBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\MutationSchemeBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\MutationSchemeBlockSchemaConfigurationExecuter
     */
    protected static function getMutationSchemeBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\MutationSchemeBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\MutationSchemeBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\NamespacingBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\NamespacingBlockSchemaConfigurationExecuter
     */
    protected static function getNamespacingBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\NamespacingBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\NamespacingBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ResponseHeadersBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ResponseHeadersBlockSchemaConfigurationExecuter
     */
    protected static function getResponseHeadersBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\ResponseHeadersBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\ResponseHeadersBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCategoriesBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCategoriesBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCategoriesBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoriesBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCategoriesBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCategoryMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCategoryMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCategoryMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCategoryMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCategoryMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCommentMetaBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCommentMetaBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCommentMetaBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMetaBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCommentMetaBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCommentMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCommentMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCommentMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCommentMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCommentMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostCategoryMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMediaMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMetaBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMetaBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCustomPostMetaBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMetaBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMetaBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCustomPostMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostTagMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostTagMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCustomPostTagMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostTagMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostTagMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaCustomPostsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaCustomPostsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaCustomPostsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaMediaMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaMediaMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaMediaMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaMediaMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaMediaMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaSettingsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaSettingsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaSettingsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaSettingsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaSettingsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTagMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTagMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaTagMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTagMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTagsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTagsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaTagsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTagsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTagsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTaxonomyMetaBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTaxonomyMetaBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaTaxonomyMetaBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaTaxonomyMetaBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaTaxonomyMetaBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaUserMetaBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaUserMetaBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaUserMetaBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserMetaBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaUserMetaBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaUserStateMutationsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaUserStateMutationsBlockSchemaConfigurationExecuter
     */
    protected static function getSchemaUserStateMutationsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SchemaUserStateMutationsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SchemaUserStateMutationsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SelfFieldsBlockSchemaConfigurationExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SelfFieldsBlockSchemaConfigurationExecuter
     */
    protected static function getSelfFieldsBlockSchemaConfigurationExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurationExecuters\\SelfFieldsBlockSchemaConfigurationExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurationExecuters\SelfFieldsBlockSchemaConfigurationExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfiguratorExecuters\PrivateEndpointSchemaConfiguratorExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfiguratorExecuters\PrivateEndpointSchemaConfiguratorExecuter
     */
    protected static function getPrivateEndpointSchemaConfiguratorExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfiguratorExecuters\\PrivateEndpointSchemaConfiguratorExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfiguratorExecuters\PrivateEndpointSchemaConfiguratorExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfiguratorExecuters\SingleEndpointSchemaConfiguratorExecuter' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfiguratorExecuters\SingleEndpointSchemaConfiguratorExecuter
     */
    protected static function getSingleEndpointSchemaConfiguratorExecuterService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfiguratorExecuters\\SingleEndpointSchemaConfiguratorExecuter'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfiguratorExecuters\SingleEndpointSchemaConfiguratorExecuter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurators\PrivateEndpointSchemaConfigurator' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurators\PrivateEndpointSchemaConfigurator
     */
    protected static function getPrivateEndpointSchemaConfiguratorService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurators\\PrivateEndpointSchemaConfigurator'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurators\PrivateEndpointSchemaConfigurator();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\SchemaConfigurators\SingleEndpointSchemaConfigurator' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurators\SingleEndpointSchemaConfigurator
     */
    protected static function getSingleEndpointSchemaConfiguratorService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfigurators\\SingleEndpointSchemaConfigurator'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\SchemaConfigurators\SingleEndpointSchemaConfigurator();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Services\Taxonomies\GraphQLEndpointCategoryTaxonomy' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Services\Taxonomies\GraphQLEndpointCategoryTaxonomy
     */
    protected static function getGraphQLEndpointCategoryTaxonomyService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Services\\Taxonomies\\GraphQLEndpointCategoryTaxonomy'] = $instance = new \GatoGraphQL\GatoGraphQL\Services\Taxonomies\GraphQLEndpointCategoryTaxonomy();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\SettingsCategoryResolvers\SettingsCategoryResolver' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\SettingsCategoryResolvers\SettingsCategoryResolver
     */
    protected static function getSettingsCategoryResolverService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\SettingsCategoryResolvers\\SettingsCategoryResolver'] = $instance = new \GatoGraphQL\GatoGraphQL\SettingsCategoryResolvers\SettingsCategoryResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Settings\OptionNamespacerInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Settings\OptionNamespacer
     */
    protected static function getOptionNamespacerInterfaceService($container)
    {
        return $container->services['GatoGraphQL\\GatoGraphQL\\Settings\\OptionNamespacerInterface'] = new \GatoGraphQL\GatoGraphQL\Settings\OptionNamespacer();
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\Settings\SettingsNormalizerInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Settings\SettingsNormalizer
     */
    protected static function getSettingsNormalizerInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\Settings\\SettingsNormalizerInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Settings\SettingsNormalizer();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\State\AppStateProvider' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\State\AppStateProvider
     */
    protected static function getAppStateProviderService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\State\\AppStateProvider'] = $instance = new \GatoGraphQL\GatoGraphQL\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\State\ExecutingGraphQLRequestAppStateProvider' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\State\ExecutingGraphQLRequestAppStateProvider
     */
    protected static function getExecutingGraphQLRequestAppStateProviderService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\State\\ExecutingGraphQLRequestAppStateProvider'] = $instance = new \GatoGraphQL\GatoGraphQL\State\ExecutingGraphQLRequestAppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\GatoGraphQL\WPDataModel\WPDataModelProviderInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\WPDataModel\WPDataModelProvider
     */
    protected static function getWPDataModelProviderInterfaceService($container)
    {
        $container->services['GatoGraphQL\\GatoGraphQL\\WPDataModel\\WPDataModelProviderInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\WPDataModel\WPDataModelProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GatoGraphQL\PluginUtils\Services\Helpers\StringConversion' shared autowired service.
     *
     * @return \GatoGraphQL\PluginUtils\Services\Helpers\StringConversion
     */
    protected static function getStringConversionService($container)
    {
        return $container->services['GatoGraphQL\\PluginUtils\\Services\\Helpers\\StringConversion'] = new \GatoGraphQL\PluginUtils\Services\Helpers\StringConversion();
    }

    /**
     * Gets the public 'GatoGraphQL\PluginUtils\Services\Helpers\URLParamHelpers' shared autowired service.
     *
     * @return \GatoGraphQL\PluginUtils\Services\Helpers\URLParamHelpers
     */
    protected static function getURLParamHelpersService($container)
    {
        return $container->services['GatoGraphQL\\PluginUtils\\Services\\Helpers\\URLParamHelpers'] = new \GatoGraphQL\PluginUtils\Services\Helpers\URLParamHelpers();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLClientsForWP\Clients\GraphiQLClient' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLClientsForWP\ConditionalOnContext\UseGraphiQLExplorer\Overrides\Services\Clients\GraphiQLWithExplorerClient
     */
    protected static function getGraphiQLClientService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\GraphiQLClient'] = $instance = new \GraphQLByPoP\GraphQLClientsForWP\ConditionalOnContext\UseGraphiQLExplorer\Overrides\Services\Clients\GraphiQLWithExplorerClient();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLClientsForWP\Clients\VoyagerClient' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLClientsForWP\Clients\VoyagerClient
     */
    protected static function getVoyagerClientService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\VoyagerClient'] = $instance = new \GraphQLByPoP\GraphQLClientsForWP\Clients\VoyagerClient();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLEndpointForWP\EndpointHandlers\GraphQLEndpointHandler' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLEndpointForWP\EndpointHandlers\GraphQLEndpointHandler
     */
    protected static function getGraphQLEndpointHandlerService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLEndpointForWP\\EndpointHandlers\\GraphQLEndpointHandler'] = $instance = new \GraphQLByPoP\GraphQLEndpointForWP\EndpointHandlers\GraphQLEndpointHandler();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLEndpointForWP\State\GraphQLEndpointHandlerAppStateProvider' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Overrides\State\GraphQLEndpointHandlerAppStateProvider
     */
    protected static function getGraphQLEndpointHandlerAppStateProviderService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLEndpointForWP\\State\\GraphQLEndpointHandlerAppStateProvider'] = $instance = new \GatoGraphQL\GatoGraphQL\Overrides\State\GraphQLEndpointHandlerAppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLRequest\Execution\QueryRetrieverInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLRequest\Execution\QueryRetriever
     */
    protected static function getQueryRetrieverInterfaceService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLRequest\\Execution\\QueryRetrieverInterface'] = new \GraphQLByPoP\GraphQLRequest\Execution\QueryRetriever();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLRequest\State\AppStateProvider' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLRequest\State\AppStateProvider
     */
    protected static function getAppStateProvider2Service($container)
    {
        $container->services['GraphQLByPoP\\GraphQLRequest\\State\\AppStateProvider'] = $instance = new \GraphQLByPoP\GraphQLRequest\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\AppStateProviderServices\GraphQLServerAppStateProviderServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\AppStateProviderServices\GraphQLServerAppStateProviderService
     */
    protected static function getGraphQLServerAppStateProviderServiceInterfaceService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\AppStateProviderServices\\GraphQLServerAppStateProviderServiceInterface'] = new \GraphQLByPoP\GraphQLServer\AppStateProviderServices\GraphQLServerAppStateProviderService();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ComponentProcessors\GraphQLRelationalFieldQueryDataComponentProcessor' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ComponentProcessors\GraphQLRelationalFieldQueryDataComponentProcessor
     */
    protected static function getGraphQLRelationalFieldQueryDataComponentProcessorService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\ComponentProcessors\\GraphQLRelationalFieldQueryDataComponentProcessor'] = $instance = new \GraphQLByPoP\GraphQLServer\ComponentProcessors\GraphQLRelationalFieldQueryDataComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ComponentProcessors\RootRelationalFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ComponentProcessors\RootRelationalFieldDataloadComponentProcessor
     */
    protected static function getRootRelationalFieldDataloadComponentProcessorService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\ComponentProcessors\\RootRelationalFieldDataloadComponentProcessor'] = $instance = new \GraphQLByPoP\GraphQLServer\ComponentProcessors\RootRelationalFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ComponentProcessors\SuperRootGraphQLRelationalFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ComponentProcessors\SuperRootGraphQLRelationalFieldDataloadComponentProcessor
     */
    protected static function getSuperRootGraphQLRelationalFieldDataloadComponentProcessorService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\ComponentProcessors\\SuperRootGraphQLRelationalFieldDataloadComponentProcessor'] = $instance = new \GraphQLByPoP\GraphQLServer\ComponentProcessors\SuperRootGraphQLRelationalFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessorService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \GraphQLByPoP\GraphQLServer\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\DirectiveExtensionsObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\DirectiveExtensionsObjectTypeFieldResolver
     */
    protected static function getDirectiveExtensionsObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\DirectiveExtensionsObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\DirectiveExtensionsObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\DirectiveObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\DirectiveObjectTypeFieldResolver
     */
    protected static function getDirectiveObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\DirectiveObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\DirectiveObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\EnumValueExtensionsObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\EnumValueExtensionsObjectTypeFieldResolver
     */
    protected static function getEnumValueExtensionsObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\EnumValueExtensionsObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\EnumValueExtensionsObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\EnumValueObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\EnumValueObjectTypeFieldResolver
     */
    protected static function getEnumValueObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\EnumValueObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\EnumValueObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\DirectiveSchemaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\DirectiveSchemaObjectTypeFieldResolver
     */
    protected static function getDirectiveSchemaObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\DirectiveSchemaObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\DirectiveSchemaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\FilterSystemDirectiveSchemaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\FilterSystemDirectiveSchemaObjectTypeFieldResolver
     */
    protected static function getFilterSystemDirectiveSchemaObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\FilterSystemDirectiveSchemaObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\FilterSystemDirectiveSchemaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\SchemaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\SchemaObjectTypeFieldResolver
     */
    protected static function getSchemaObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\SchemaObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\SchemaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\TypeObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\TypeObjectTypeFieldResolver
     */
    protected static function getTypeObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\TypeObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\Extensions\TypeObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\FieldExtensionsObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\FieldExtensionsObjectTypeFieldResolver
     */
    protected static function getFieldExtensionsObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\FieldExtensionsObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\FieldExtensionsObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\FieldObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\FieldObjectTypeFieldResolver
     */
    protected static function getFieldObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\FieldObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\FieldObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\GlobalObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\GlobalObjectTypeFieldResolver
     */
    protected static function getGlobalObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\GlobalObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\GlobalObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\InputValueExtensionsObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\InputValueExtensionsObjectTypeFieldResolver
     */
    protected static function getInputValueExtensionsObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\InputValueExtensionsObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\InputValueExtensionsObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\InputValueObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\InputValueObjectTypeFieldResolver
     */
    protected static function getInputValueObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\InputValueObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\InputValueObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\NamedTypeExtensionsObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\NamedTypeExtensionsObjectTypeFieldResolver
     */
    protected static function getNamedTypeExtensionsObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\NamedTypeExtensionsObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\NamedTypeExtensionsObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\RegisterQueryAndMutationRootsRootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\RegisterQueryAndMutationRootsRootObjectTypeFieldResolver
     */
    protected static function getRegisterQueryAndMutationRootsRootObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\RegisterQueryAndMutationRootsRootObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\RegisterQueryAndMutationRootsRootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SchemaExtensionsObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SchemaExtensionsObjectTypeFieldResolver
     */
    protected static function getSchemaExtensionsObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SchemaExtensionsObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SchemaExtensionsObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SchemaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SchemaObjectTypeFieldResolver
     */
    protected static function getSchemaObjectTypeFieldResolver2Service($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SchemaObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SchemaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SuperRootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SuperRootObjectTypeFieldResolver
     */
    protected static function getSuperRootObjectTypeFieldResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SuperRootObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\SuperRootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\TypeObjectTypeFieldResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\TypeObjectTypeFieldResolver
     */
    protected static function getTypeObjectTypeFieldResolver2Service($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\TypeObjectTypeFieldResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\FieldResolvers\ObjectType\TypeObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Helpers\TypeResolverHelperInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Helpers\TypeResolverHelper
     */
    protected static function getTypeResolverHelperInterfaceService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\Helpers\\TypeResolverHelperInterface'] = new \GraphQLByPoP\GraphQLServer\Helpers\TypeResolverHelper();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\DBEntriesHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\DBEntriesHookSet
     */
    protected static function getDBEntriesHookSetService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\DBEntriesHookSet'] = $instance = new \GraphQLByPoP\GraphQLServer\Hooks\DBEntriesHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\NestedMutationHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\NestedMutationHookSet
     */
    protected static function getNestedMutationHookSetService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\NestedMutationHookSet'] = $instance = new \GraphQLByPoP\GraphQLServer\Hooks\NestedMutationHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\RemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\RemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSet
     */
    protected static function getRemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSetService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\RemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSet'] = $instance = new \GraphQLByPoP\GraphQLServer\Hooks\RemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\RemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\RemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSet
     */
    protected static function getRemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSetService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\RemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSet'] = $instance = new \GraphQLByPoP\GraphQLServer\Hooks\RemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\SchemaCacheHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\SchemaCacheHookSet
     */
    protected static function getSchemaCacheHookSetService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\SchemaCacheHookSet'] = $instance = new \GraphQLByPoP\GraphQLServer\Hooks\SchemaCacheHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Hooks\VarsHookSet
     */
    protected static function getVarsHookSetService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\VarsHookSet'] = $instance = new \GraphQLByPoP\GraphQLServer\Hooks\VarsHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\IFTTT\MandatoryDirectivesForFieldsRootTypeEntryDuplicatorInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\IFTTT\MandatoryDirectivesForFieldsRootTypeEntryDuplicator
     */
    protected static function getMandatoryDirectivesForFieldsRootTypeEntryDuplicatorInterfaceService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\IFTTT\\MandatoryDirectivesForFieldsRootTypeEntryDuplicatorInterface'] = $instance = new \GraphQLByPoP\GraphQLServer\IFTTT\MandatoryDirectivesForFieldsRootTypeEntryDuplicator();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ObjectModels\MutationRoot' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ObjectModels\MutationRoot
     */
    protected static function getMutationRootService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\ObjectModels\\MutationRoot'] = new \GraphQLByPoP\GraphQLServer\ObjectModels\MutationRoot();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\ObjectModels\QueryRoot' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\ObjectModels\QueryRoot
     */
    protected static function getQueryRootService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\ObjectModels\\QueryRoot'] = new \GraphQLByPoP\GraphQLServer\ObjectModels\QueryRoot();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\QueryResolution\GraphQLQueryASTTransformationServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\QueryResolution\GraphQLQueryASTTransformationService
     */
    protected static function getGraphQLQueryASTTransformationServiceInterfaceService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\QueryResolution\\GraphQLQueryASTTransformationServiceInterface'] = $instance = new \GraphQLByPoP\GraphQLServer\QueryResolution\GraphQLQueryASTTransformationService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Registries\MandatoryOperationDirectiveResolverRegistryInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Registries\MandatoryOperationDirectiveResolverRegistry
     */
    protected static function getMandatoryOperationDirectiveResolverRegistryInterfaceService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\Registries\\MandatoryOperationDirectiveResolverRegistryInterface'] = new \GraphQLByPoP\GraphQLServer\Registries\MandatoryOperationDirectiveResolverRegistry();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Registries\SchemaDefinitionReferenceRegistryInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Registries\SchemaDefinitionReferenceRegistry
     */
    protected static function getSchemaDefinitionReferenceRegistryInterfaceService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Registries\\SchemaDefinitionReferenceRegistryInterface'] = $instance = new \GraphQLByPoP\GraphQLServer\Registries\SchemaDefinitionReferenceRegistry();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\MutationRootObjectTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\MutationRootObjectTypeDataLoader
     */
    protected static function getMutationRootObjectTypeDataLoaderService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\MutationRootObjectTypeDataLoader'] = $instance = new \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\MutationRootObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\QueryRootObjectTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\QueryRootObjectTypeDataLoader
     */
    protected static function getQueryRootObjectTypeDataLoaderService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\QueryRootObjectTypeDataLoader'] = $instance = new \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\QueryRootObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\SchemaDefinitionReferenceObjectTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\SchemaDefinitionReferenceObjectTypeDataLoader
     */
    protected static function getSchemaDefinitionReferenceObjectTypeDataLoaderService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\SchemaDefinitionReferenceObjectTypeDataLoader'] = $instance = new \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\SchemaDefinitionReferenceObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\SchemaObjectTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\SchemaObjectTypeDataLoader
     */
    protected static function getSchemaObjectTypeDataLoaderService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\SchemaObjectTypeDataLoader'] = $instance = new \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\SchemaObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\WrappingTypeOrSchemaDefinitionReferenceObjectTypeDataLoader' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\WrappingTypeOrSchemaDefinitionReferenceObjectTypeDataLoader
     */
    protected static function getWrappingTypeOrSchemaDefinitionReferenceObjectTypeDataLoaderService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\RelationalTypeDataLoaders\\ObjectType\\WrappingTypeOrSchemaDefinitionReferenceObjectTypeDataLoader'] = $instance = new \GraphQLByPoP\GraphQLServer\RelationalTypeDataLoaders\ObjectType\WrappingTypeOrSchemaDefinitionReferenceObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService
     */
    protected static function getGraphQLSchemaDefinitionServiceInterfaceService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\Schema\\GraphQLSchemaDefinitionServiceInterface'] = $instance = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\State\AppStateProvider' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\State\AppStateProvider
     */
    protected static function getAppStateProvider3Service($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\State\\AppStateProvider'] = $instance = new \GraphQLByPoP\GraphQLServer\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\Syntax\GraphQLSyntaxServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Syntax\GraphQLSyntaxService
     */
    protected static function getGraphQLSyntaxServiceInterfaceService($container)
    {
        return $container->services['GraphQLByPoP\\GraphQLServer\\Syntax\\GraphQLSyntaxServiceInterface'] = new \GraphQLByPoP\GraphQLServer\Syntax\GraphQLSyntaxService();
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\DirectiveKindEnumTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\DirectiveKindEnumTypeResolver
     */
    protected static function getDirectiveKindEnumTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveKindEnumTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\DirectiveKindEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\DirectiveLocationEnumTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\DirectiveLocationEnumTypeResolver
     */
    protected static function getDirectiveLocationEnumTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveLocationEnumTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\DirectiveLocationEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\TypeKindEnumTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\TypeKindEnumTypeResolver
     */
    protected static function getTypeKindEnumTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\TypeKindEnumTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\EnumType\TypeKindEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\DirectiveExtensionsObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\DirectiveExtensionsObjectTypeResolver
     */
    protected static function getDirectiveExtensionsObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveExtensionsObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\DirectiveExtensionsObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\DirectiveObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\DirectiveObjectTypeResolver
     */
    protected static function getDirectiveObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\DirectiveObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\EnumValueExtensionsObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\EnumValueExtensionsObjectTypeResolver
     */
    protected static function getEnumValueExtensionsObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueExtensionsObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\EnumValueExtensionsObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\EnumValueObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\EnumValueObjectTypeResolver
     */
    protected static function getEnumValueObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\EnumValueObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\FieldExtensionsObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\FieldExtensionsObjectTypeResolver
     */
    protected static function getFieldExtensionsObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldExtensionsObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\FieldExtensionsObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\FieldObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\FieldObjectTypeResolver
     */
    protected static function getFieldObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\FieldObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\InputValueExtensionsObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\InputValueExtensionsObjectTypeResolver
     */
    protected static function getInputValueExtensionsObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueExtensionsObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\InputValueExtensionsObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\InputValueObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\InputValueObjectTypeResolver
     */
    protected static function getInputValueObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\InputValueObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\MutationRootObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\MutationRootObjectTypeResolver
     */
    protected static function getMutationRootObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\MutationRootObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\MutationRootObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\NamedTypeExtensionsObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\NamedTypeExtensionsObjectTypeResolver
     */
    protected static function getNamedTypeExtensionsObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\NamedTypeExtensionsObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\NamedTypeExtensionsObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\QueryRootObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\QueryRootObjectTypeResolver
     */
    protected static function getQueryRootObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\QueryRootObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\QueryRootObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\SchemaExtensionsObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\SchemaExtensionsObjectTypeResolver
     */
    protected static function getSchemaExtensionsObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaExtensionsObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\SchemaExtensionsObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\SchemaObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\SchemaObjectTypeResolver
     */
    protected static function getSchemaObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\SchemaObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\TypeObjectTypeResolver' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\TypeObjectTypeResolver
     */
    protected static function getTypeObjectTypeResolverService($container)
    {
        $container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\TypeObjectTypeResolver'] = $instance = new \GraphQLByPoP\GraphQLServer\TypeResolvers\ObjectType\TypeObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\APIEndpointsForWP\EndpointHandlers\NativeAPIEndpointHandler' shared autowired service.
     *
     * @return \PoPAPI\APIEndpointsForWP\EndpointHandlers\NativeAPIEndpointHandler
     */
    protected static function getNativeAPIEndpointHandlerService($container)
    {
        $container->services['PoPAPI\\APIEndpointsForWP\\EndpointHandlers\\NativeAPIEndpointHandler'] = $instance = new \PoPAPI\APIEndpointsForWP\EndpointHandlers\NativeAPIEndpointHandler();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\APIEndpointsForWP\State\NativeAPIEndpointHandlerAppStateProvider' shared autowired service.
     *
     * @return \PoPAPI\APIEndpointsForWP\State\NativeAPIEndpointHandlerAppStateProvider
     */
    protected static function getNativeAPIEndpointHandlerAppStateProviderService($container)
    {
        $container->services['PoPAPI\\APIEndpointsForWP\\State\\NativeAPIEndpointHandlerAppStateProvider'] = $instance = new \PoPAPI\APIEndpointsForWP\State\NativeAPIEndpointHandlerAppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\APIMirrorQuery\DataStructureFormatters\MirrorQueryDataStructureFormatter' shared autowired service.
     *
     * @return \PoPAPI\APIMirrorQuery\DataStructureFormatters\MirrorQueryDataStructureFormatter
     */
    protected static function getMirrorQueryDataStructureFormatterService($container)
    {
        $container->services['PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter'] = $instance = new \PoPAPI\APIMirrorQuery\DataStructureFormatters\MirrorQueryDataStructureFormatter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\APIMirrorQuery\DataStructureFormatters\PropertyMirrorQueryDataStructureFormatter' shared autowired service.
     *
     * @return \PoPAPI\APIMirrorQuery\DataStructureFormatters\PropertyMirrorQueryDataStructureFormatter
     */
    protected static function getPropertyMirrorQueryDataStructureFormatterService($container)
    {
        $container->services['PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter'] = $instance = new \PoPAPI\APIMirrorQuery\DataStructureFormatters\PropertyMirrorQueryDataStructureFormatter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\APIMirrorQuery\DataStructureFormatters\XMLMirrorQueryDataStructureFormatter' shared autowired service.
     *
     * @return \PoPAPI\APIMirrorQuery\DataStructureFormatters\XMLMirrorQueryDataStructureFormatter
     */
    protected static function getXMLMirrorQueryDataStructureFormatterService($container)
    {
        $container->services['PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter'] = $instance = new \PoPAPI\APIMirrorQuery\DataStructureFormatters\XMLMirrorQueryDataStructureFormatter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\ComponentProcessors\RelationalFieldQueryDataComponentProcessor' shared autowired service.
     *
     * @return \PoPAPI\API\ComponentProcessors\RelationalFieldQueryDataComponentProcessor
     */
    protected static function getRelationalFieldQueryDataComponentProcessorService($container)
    {
        $container->services['PoPAPI\\API\\ComponentProcessors\\RelationalFieldQueryDataComponentProcessor'] = $instance = new \PoPAPI\API\ComponentProcessors\RelationalFieldQueryDataComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\ComponentProcessors\RootRelationalFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPAPI\API\ComponentProcessors\RootRelationalFieldDataloadComponentProcessor
     */
    protected static function getRootRelationalFieldDataloadComponentProcessor2Service($container)
    {
        $container->services['PoPAPI\\API\\ComponentProcessors\\RootRelationalFieldDataloadComponentProcessor'] = $instance = new \PoPAPI\API\ComponentProcessors\RootRelationalFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoPAPI\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor2Service($container)
    {
        $container->services['PoPAPI\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoPAPI\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\FeedbackItemProviders\FeedbackItemProvider' shared autowired service.
     *
     * @return \PoPAPI\API\FeedbackItemProviders\FeedbackItemProvider
     */
    protected static function getFeedbackItemProviderService($container)
    {
        $container->services['PoPAPI\\API\\FeedbackItemProviders\\FeedbackItemProvider'] = $instance = new \PoPAPI\API\FeedbackItemProviders\FeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPAPI\API\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPAPI\\API\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPAPI\API\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\HelperServices\ApplicationStateFillerServiceInterface' shared autowired service.
     *
     * @return \PoPAPI\API\HelperServices\ApplicationStateFillerService
     */
    protected static function getApplicationStateFillerServiceInterfaceService($container)
    {
        $container->services['PoPAPI\\API\\HelperServices\\ApplicationStateFillerServiceInterface'] = $instance = new \PoPAPI\API\HelperServices\ApplicationStateFillerService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\Hooks\DBEntriesHookSet' shared autowired service.
     *
     * @return \PoPAPI\API\Hooks\DBEntriesHookSet
     */
    protected static function getDBEntriesHookSet2Service($container)
    {
        $container->services['PoPAPI\\API\\Hooks\\DBEntriesHookSet'] = $instance = new \PoPAPI\API\Hooks\DBEntriesHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPAPI\API\Hooks\RoutingHookSet
     */
    protected static function getRoutingHookSetService($container)
    {
        $container->services['PoPAPI\\API\\Hooks\\RoutingHookSet'] = $instance = new \PoPAPI\API\Hooks\RoutingHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPAPI\API\Hooks\VarsHookSet
     */
    protected static function getVarsHookSet2Service($container)
    {
        $container->services['PoPAPI\\API\\Hooks\\VarsHookSet'] = $instance = new \PoPAPI\API\Hooks\VarsHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\PersistedQueries\PersistedFragmentManagerInterface' shared autowired service.
     *
     * @return \PoPAPI\API\PersistedQueries\PersistedFragmentManager
     */
    protected static function getPersistedFragmentManagerInterfaceService($container)
    {
        return $container->services['PoPAPI\\API\\PersistedQueries\\PersistedFragmentManagerInterface'] = new \PoPAPI\API\PersistedQueries\PersistedFragmentManager();
    }

    /**
     * Gets the public 'PoPAPI\API\PersistedQueries\PersistedQueryManagerInterface' shared autowired service.
     *
     * @return \PoPAPI\API\PersistedQueries\PersistedQueryManager
     */
    protected static function getPersistedQueryManagerInterfaceService($container)
    {
        return $container->services['PoPAPI\\API\\PersistedQueries\\PersistedQueryManagerInterface'] = new \PoPAPI\API\PersistedQueries\PersistedQueryManager();
    }

    /**
     * Gets the public 'PoPAPI\API\QueryParsing\GraphQLParserHelperServiceInterface' shared autowired service.
     *
     * @return \PoPAPI\API\QueryParsing\GraphQLParserHelperService
     */
    protected static function getGraphQLParserHelperServiceInterfaceService($container)
    {
        $container->services['PoPAPI\\API\\QueryParsing\\GraphQLParserHelperServiceInterface'] = $instance = new \PoPAPI\API\QueryParsing\GraphQLParserHelperService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\QueryResolution\QueryASTTransformationServiceInterface' shared autowired service.
     *
     * @return \PoPAPI\API\QueryResolution\QueryASTTransformationService
     */
    protected static function getQueryASTTransformationServiceInterfaceService($container)
    {
        $container->services['PoPAPI\\API\\QueryResolution\\QueryASTTransformationServiceInterface'] = $instance = new \PoPAPI\API\QueryResolution\QueryASTTransformationService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\Schema\SchemaDefinitionServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService
     */
    protected static function getSchemaDefinitionServiceInterfaceService($container)
    {
        $container->services['PoPAPI\\API\\Schema\\SchemaDefinitionServiceInterface'] = $instance = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\API\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPAPI\API\State\AppStateProvider
     */
    protected static function getAppStateProvider4Service($container)
    {
        $container->services['PoPAPI\\API\\State\\AppStateProvider'] = $instance = new \PoPAPI\API\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPAPI\GraphQLAPI\DataStructureFormatters\GraphQLDataStructureFormatter' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Overrides\DataStructureFormatters\GraphQLDataStructureFormatter
     */
    protected static function getGraphQLDataStructureFormatterService($container)
    {
        $container->services['PoPAPI\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter'] = $instance = new \GraphQLByPoP\GraphQLServer\Overrides\DataStructureFormatters\GraphQLDataStructureFormatter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoriesWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoriesWP\Hooks\RoutingStateHookSet
     */
    protected static function getRoutingStateHookSetService($container)
    {
        $container->services['PoPCMSSchema\\CategoriesWP\\Hooks\\RoutingStateHookSet'] = $instance = new \PoPCMSSchema\CategoriesWP\Hooks\RoutingStateHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoriesWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoriesWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSetService($container)
    {
        $container->services['PoPCMSSchema\\CategoriesWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\CategoriesWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\ComponentProcessors\CategoryFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\ComponentProcessors\CategoryFilterInputContainerComponentProcessor
     */
    protected static function getCategoryFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\ComponentProcessors\\CategoryFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Categories\ComponentProcessors\CategoryFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\Categories\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\ConditionalOnModule\Users\SchemaHooks\UserCustomPostsAddCategoryFilterInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\ConditionalOnModule\Users\SchemaHooks\UserCustomPostsAddCategoryFilterInputObjectTypeHookSet
     */
    protected static function getUserCustomPostsAddCategoryFilterInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\ConditionalOnModule\\Users\\SchemaHooks\\UserCustomPostsAddCategoryFilterInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\Categories\ConditionalOnModule\Users\SchemaHooks\UserCustomPostsAddCategoryFilterInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\FieldResolvers\InterfaceType\CategoryInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\FieldResolvers\InterfaceType\CategoryInterfaceTypeFieldResolver
     */
    protected static function getCategoryInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\FieldResolvers\\InterfaceType\\CategoryInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\Categories\FieldResolvers\InterfaceType\CategoryInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCategoryListObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCategoryListObjectTypeFieldResolver
     */
    protected static function getGenericCategoryListObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCategoryListObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCategoryListObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCategoryObjectTypeFieldResolver
     */
    protected static function getGenericCategoryObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCustomPostQueryableObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCustomPostQueryableObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostQueryableObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCustomPostQueryableObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Categories\FieldResolvers\ObjectType\GenericCustomPostQueryableObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\FieldResolvers\ObjectType\RootCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\FieldResolvers\ObjectType\RootCategoryObjectTypeFieldResolver
     */
    protected static function getRootCategoryObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\RootCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Categories\FieldResolvers\ObjectType\RootCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\FilterInputs\CategoryIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\FilterInputs\CategoryIDsFilterInput
     */
    protected static function getCategoryIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\FilterInputs\\CategoryIDsFilterInput'] = $instance = new \PoPCMSSchema\Categories\FilterInputs\CategoryIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\FilterInputs\CategoryTaxonomyFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\FilterInputs\CategoryTaxonomyFilterInput
     */
    protected static function getCategoryTaxonomyFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\FilterInputs\\CategoryTaxonomyFilterInput'] = $instance = new \PoPCMSSchema\Categories\FilterInputs\CategoryTaxonomyFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSetService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\Categories\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\ObjectTypeResolverPickers\CategoryUnionGenericCategoryObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\ObjectTypeResolverPickers\CategoryUnionGenericCategoryObjectTypeResolverPicker
     */
    protected static function getCategoryUnionGenericCategoryObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\ObjectTypeResolverPickers\\CategoryUnionGenericCategoryObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\Categories\ObjectTypeResolverPickers\CategoryUnionGenericCategoryObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\Registries\CategoryObjectTypeResolverPickerRegistryInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\Registries\CategoryObjectTypeResolverPickerRegistry
     */
    protected static function getCategoryObjectTypeResolverPickerRegistryInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\Registries\\CategoryObjectTypeResolverPickerRegistryInterface'] = $instance = new \PoPCMSSchema\Categories\Registries\CategoryObjectTypeResolverPickerRegistry();

        $instance->addCategoryObjectTypeResolverPicker(($container->services['PoPCMSSchema\\Categories\\ObjectTypeResolverPickers\\CategoryUnionGenericCategoryObjectTypeResolverPicker'] ?? self::getCategoryUnionGenericCategoryObjectTypeResolverPickerService($container)), 'PoPCMSSchema\\Categories\\ObjectTypeResolverPickers\\CategoryUnionGenericCategoryObjectTypeResolverPicker');
        $instance->addCategoryObjectTypeResolverPicker(($container->services['PoPCMSSchema\\PostCategories\\ObjectTypeResolverPickers\\CategoryUnionPostCategoryObjectTypeResolverPicker'] ?? self::getCategoryUnionPostCategoryObjectTypeResolverPickerService($container)), 'PoPCMSSchema\\PostCategories\\ObjectTypeResolverPickers\\CategoryUnionPostCategoryObjectTypeResolverPicker');

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\RelationalTypeDataLoaders\ObjectType\QueryableCategoryListObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\RelationalTypeDataLoaders\ObjectType\QueryableCategoryListObjectTypeDataLoader
     */
    protected static function getQueryableCategoryListObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\RelationalTypeDataLoaders\\ObjectType\\QueryableCategoryListObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Categories\RelationalTypeDataLoaders\ObjectType\QueryableCategoryListObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\RelationalTypeDataLoaders\UnionType\CategoryUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoriesWP\Overrides\RelationalTypeDataLoaders\UnionType\CategoryUnionTypeDataLoader
     */
    protected static function getCategoryUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\RelationalTypeDataLoaders\\UnionType\\CategoryUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CategoriesWP\Overrides\RelationalTypeDataLoaders\UnionType\CategoryUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\SchemaHooks\RootCustomPostsAddCategoryFilterInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\SchemaHooks\RootCustomPostsAddCategoryFilterInputObjectTypeHookSet
     */
    protected static function getRootCustomPostsAddCategoryFilterInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\SchemaHooks\\RootCustomPostsAddCategoryFilterInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\Categories\SchemaHooks\RootCustomPostsAddCategoryFilterInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\State\AppStateProvider
     */
    protected static function getAppStateProvider5Service($container)
    {
        $container->services['PoPCMSSchema\\Categories\\State\\AppStateProvider'] = $instance = new \PoPCMSSchema\Categories\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeAPIs\QueryableCategoryTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoriesWP\TypeAPIs\QueryableCategoryTypeAPI
     */
    protected static function getQueryableCategoryTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeAPIs\\QueryableCategoryTypeAPIInterface'] = $instance = new \PoPCMSSchema\CategoriesWP\TypeAPIs\QueryableCategoryTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeAPIs\UniversalCategoryTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoriesWP\TypeAPIs\UniversalCategoryTypeAPI
     */
    protected static function getUniversalCategoryTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeAPIs\\UniversalCategoryTypeAPIInterface'] = $instance = new \PoPCMSSchema\CategoriesWP\TypeAPIs\UniversalCategoryTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\EnumType\CategoryTaxonomyEnumStringScalarTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\EnumType\CategoryTaxonomyEnumStringScalarTypeResolver
     */
    protected static function getCategoryTaxonomyEnumStringScalarTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\EnumType\\CategoryTaxonomyEnumStringScalarTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\EnumType\CategoryTaxonomyEnumStringScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CategoryByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CategoryByOneofInputObjectTypeResolver
     */
    protected static function getCategoryByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CategoryByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CategoryPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CategoryPaginationInputObjectTypeResolver
     */
    protected static function getCategoryPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CategoryPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CustomPostCategoriesFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CustomPostCategoriesFilterInputObjectTypeResolver
     */
    protected static function getCustomPostCategoriesFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostCategoriesFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CustomPostCategoriesFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolver
     */
    protected static function getCustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\CustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\InputObjectType\RootCategoriesFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\RootCategoriesFilterInputObjectTypeResolver
     */
    protected static function getRootCategoriesFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\RootCategoriesFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\InputObjectType\RootCategoriesFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\InterfaceType\CategoryInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\InterfaceType\CategoryInterfaceTypeResolver
     */
    protected static function getCategoryInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InterfaceType\\CategoryInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\InterfaceType\CategoryInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\ObjectType\GenericCategoryObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Categories\TypeResolvers\ObjectType\GenericCategoryObjectTypeResolver
     */
    protected static function getGenericCategoryObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\ObjectType\\GenericCategoryObjectTypeResolver'] = $instance = new \PoPCMSSchema\Categories\TypeResolvers\ObjectType\GenericCategoryObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Categories\TypeResolvers\UnionType\CategoryUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoriesWP\Overrides\TypeResolvers\UnionType\CategoryUnionTypeResolver
     */
    protected static function getCategoryUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Categories\\TypeResolvers\\UnionType\\CategoryUnionTypeResolver'] = $instance = new \PoPCMSSchema\CategoriesWP\Overrides\TypeResolvers\UnionType\CategoryUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoryMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoryMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProviderService($container)
    {
        $container->services['PoPCMSSchema\\CategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\CategoryMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoryMutations\RelationalTypeDataLoaders\ObjectType\CategoryTermDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoryMutations\RelationalTypeDataLoaders\ObjectType\CategoryTermDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getCategoryTermDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CategoryMutations\\RelationalTypeDataLoaders\\ObjectType\\CategoryTermDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CategoryMutations\RelationalTypeDataLoaders\ObjectType\CategoryTermDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoryMutations\TypeAPIs\CategoryTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoryMutationsWP\TypeAPIs\CategoryTypeMutationAPI
     */
    protected static function getCategoryTypeMutationAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\CategoryMutations\\TypeAPIs\\CategoryTypeMutationAPIInterface'] = $instance = new \PoPCMSSchema\CategoryMutationsWP\TypeAPIs\CategoryTypeMutationAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoryMutations\TypeResolvers\InputObjectType\CategoryByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoryMutations\TypeResolvers\InputObjectType\CategoryByOneofInputObjectTypeResolver
     */
    protected static function getCategoryByOneofInputObjectTypeResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CategoryMutations\TypeResolvers\InputObjectType\CategoryByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoryMutations\TypeResolvers\InputObjectType\CategoryTermUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoryMutations\TypeResolvers\InputObjectType\CategoryTermUpdateInputObjectTypeResolver
     */
    protected static function getCategoryTermUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryTermUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CategoryMutations\TypeResolvers\InputObjectType\CategoryTermUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CategoryMutations\TypeResolvers\ObjectType\CategoryTermDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CategoryMutations\TypeResolvers\ObjectType\CategoryTermDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CategoryMutations\\TypeResolvers\\ObjectType\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CategoryMutations\TypeResolvers\ObjectType\CategoryTermDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMetaWP\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMetaWP\\Hooks\\QueryHookSet'] = $instance = new \PoPCMSSchema\CommentMetaWP\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMeta\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMeta\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver
     */
    protected static function getCommentObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMeta\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMeta\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMeta\TypeAPIs\CommentMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMetaWP\TypeAPIs\CommentMetaTypeAPI
     */
    protected static function getCommentMetaTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\CommentMeta\\TypeAPIs\\CommentMetaTypeAPIInterface'] = $instance = new \PoPCMSSchema\CommentMetaWP\TypeAPIs\CommentMetaTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ComponentProcessors\CommentFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ComponentProcessors\CommentFilterInputContainerComponentProcessor
     */
    protected static function getCommentFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ComponentProcessors\\CommentFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\CommentMutations\ComponentProcessors\CommentFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver
     */
    protected static function getCommentObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver
     */
    protected static function getCommentObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\ConditionalOnModule\Users\Overrides\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider2Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\CommentMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentMutationPayloadObjectTypeFieldResolver
     */
    protected static function getCommentMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCommentMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver
     */
    protected static function getCommentObjectTypeFieldResolver4Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\CustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver4Service($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\RootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\UserStateRootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\UserStateRootObjectTypeFieldResolver
     */
    protected static function getUserStateRootObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\UserStateRootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CommentMutations\FieldResolvers\ObjectType\UserStateRootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostBulkOperationMutationResolver
     */
    protected static function getAddCommentToCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\MutationResolvers\\AddCommentToCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostMutationResolver
     */
    protected static function getAddCommentToCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\MutationResolvers\\AddCommentToCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CommentMutations\MutationResolvers\AddCommentToCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\MutationResolvers\PayloadableAddCommentToCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\MutationResolvers\PayloadableAddCommentToCustomPostBulkOperationMutationResolver
     */
    protected static function getPayloadableAddCommentToCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\MutationResolvers\\PayloadableAddCommentToCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CommentMutations\MutationResolvers\PayloadableAddCommentToCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\MutationResolvers\PayloadableAddCommentToCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\MutationResolvers\PayloadableAddCommentToCustomPostMutationResolver
     */
    protected static function getPayloadableAddCommentToCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\MutationResolvers\\PayloadableAddCommentToCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CommentMutations\MutationResolvers\PayloadableAddCommentToCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CommentMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentAuthorEmailIsMissingErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentAuthorEmailIsMissingErrorPayloadObjectTypeDataLoader
     */
    protected static function getCommentAuthorEmailIsMissingErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentAuthorEmailIsMissingErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentAuthorNameIsMissingErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentAuthorNameIsMissingErrorPayloadObjectTypeDataLoader
     */
    protected static function getCommentAuthorNameIsMissingErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentAuthorNameIsMissingErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentAuthorNameIsMissingErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentParentCommentDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentParentCommentDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getCommentParentCommentDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentParentCommentDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeDataLoader
     */
    protected static function getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader
     */
    protected static function getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\ObjectType\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\ObjectType\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\CommentReplyMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\CommentReplyMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getCommentReplyMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\CommentReplyMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\CommentReplyMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\CustomPostAddCommentMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\CustomPostAddCommentMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getCustomPostAddCommentMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\CustomPostAddCommentMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\CustomPostAddCommentMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootAddCommentToCustomPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\RootReplyCommentMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\RootReplyCommentMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootReplyCommentMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\RelationalTypeDataLoaders\\UnionType\\RootReplyCommentMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CommentMutations\RelationalTypeDataLoaders\UnionType\RootReplyCommentMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\SchemaHooks\RemoveAuthorFilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\SchemaHooks\RemoveAuthorFilterInputHookSet
     */
    protected static function getRemoveAuthorFilterInputHookSetService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] = $instance = new \PoPCMSSchema\CommentMutations\SchemaHooks\RemoveAuthorFilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeAPIs\CommentTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutationsWP\TypeAPIs\CommentTypeMutationAPI
     */
    protected static function getCommentTypeMutationAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeAPIs\\CommentTypeMutationAPIInterface'] = $instance = new \PoPCMSSchema\CommentMutationsWP\TypeAPIs\CommentTypeMutationAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CommentAsOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CommentAsOneofInputObjectTypeResolver
     */
    protected static function getCommentAsOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentAsOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CommentAsOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CommentReplyInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CommentReplyInputObjectTypeResolver
     */
    protected static function getCommentReplyInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentReplyInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CommentReplyInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CustomPostAddCommentInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CustomPostAddCommentInputObjectTypeResolver
     */
    protected static function getCustomPostAddCommentInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CustomPostAddCommentInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\CustomPostAddCommentInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootAddCommentToCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootAddCommentToCustomPostInputObjectTypeResolver
     */
    protected static function getRootAddCommentToCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootAddCommentToCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootAddCommentToCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootMyCommentsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootMyCommentsFilterInputObjectTypeResolver
     */
    protected static function getRootMyCommentsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootMyCommentsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootMyCommentsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootReplyCommentInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootReplyCommentInputObjectTypeResolver
     */
    protected static function getRootReplyCommentInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootReplyCommentInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\InputObjectType\RootReplyCommentInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolver
     */
    protected static function getCommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolver
     */
    protected static function getCommentAuthorNameIsMissingErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getCommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentReplyMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentReplyMutationPayloadObjectTypeResolver
     */
    protected static function getCommentReplyMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentReplyMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentReplyMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolver
     */
    protected static function getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver
     */
    protected static function getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CustomPostAddCommentMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CustomPostAddCommentMutationPayloadObjectTypeResolver
     */
    protected static function getCustomPostAddCommentMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CustomPostAddCommentMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\CustomPostAddCommentMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\RootAddCommentToCustomPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\RootAddCommentToCustomPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootAddCommentToCustomPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootAddCommentToCustomPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\RootAddCommentToCustomPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\RootReplyCommentMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\RootReplyCommentMutationPayloadObjectTypeResolver
     */
    protected static function getRootReplyCommentMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootReplyCommentMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\ObjectType\RootReplyCommentMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\CommentReplyMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\CommentReplyMutationErrorPayloadUnionTypeResolver
     */
    protected static function getCommentReplyMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CommentReplyMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\CommentReplyMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\CustomPostAddCommentMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\CustomPostAddCommentMutationErrorPayloadUnionTypeResolver
     */
    protected static function getCustomPostAddCommentMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CustomPostAddCommentMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\CustomPostAddCommentMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\RootReplyCommentMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\RootReplyCommentMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootReplyCommentMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootReplyCommentMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CommentMutations\TypeResolvers\UnionType\RootReplyCommentMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentsWP\ConditionalOnModule\Users\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentsWP\ConditionalOnModule\Users\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\CommentsWP\\ConditionalOnModule\\Users\\Hooks\\QueryHookSet'] = $instance = new \PoPCMSSchema\CommentsWP\ConditionalOnModule\Users\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CommentsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentsWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet2Service($container)
    {
        $container->services['PoPCMSSchema\\CommentsWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\CommentsWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ComponentProcessors\CommentFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ComponentProcessors\CommentFilterInputContainerComponentProcessor
     */
    protected static function getCommentFilterInputContainerComponentProcessor2Service($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ComponentProcessors\\CommentFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Comments\ComponentProcessors\CommentFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor2Service($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\Comments\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ComponentProcessors\SingleCommentFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ComponentProcessors\SingleCommentFilterInputContainerComponentProcessor
     */
    protected static function getSingleCommentFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ComponentProcessors\\SingleCommentFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Comments\ComponentProcessors\SingleCommentFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\API\ComponentProcessors\CommentRelationalFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\API\ComponentProcessors\CommentRelationalFieldDataloadComponentProcessor
     */
    protected static function getCommentRelationalFieldDataloadComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\API\\ComponentProcessors\\CommentRelationalFieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\API\ComponentProcessors\CommentRelationalFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\Users\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor3Service($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\Users\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\FieldResolvers\ObjectType\CommentUserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\Users\FieldResolvers\ObjectType\CommentUserObjectTypeFieldResolver
     */
    protected static function getCommentUserObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\CommentUserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\Users\FieldResolvers\ObjectType\CommentUserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\FilterInputs\CustomPostAuthorIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\Users\FilterInputs\CustomPostAuthorIDsFilterInput
     */
    protected static function getCustomPostAuthorIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\FilterInputs\\CustomPostAuthorIDsFilterInput'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\Users\FilterInputs\CustomPostAuthorIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\FilterInputs\ExcludeCustomPostAuthorIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\Users\FilterInputs\ExcludeCustomPostAuthorIDsFilterInput
     */
    protected static function getExcludeCustomPostAuthorIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\FilterInputs\\ExcludeCustomPostAuthorIDsFilterInput'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\Users\FilterInputs\ExcludeCustomPostAuthorIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\EnumTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\EnumTypeHookSet
     */
    protected static function getEnumTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\EnumTypeHookSet'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\EnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\FilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\FilterInputHookSet
     */
    protected static function getFilterInputHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\FilterInputHookSet'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\FilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\InputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\InputObjectTypeHookSet
     */
    protected static function getInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\InputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\Comments\ConditionalOnModule\Users\SchemaHooks\InputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\ConditionalOnModule\Users\TypeAPIs\CommentTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentsWP\ConditionalOnModule\Users\TypeAPIs\CommentTypeAPI
     */
    protected static function getCommentTypeAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\TypeAPIs\\CommentTypeAPIInterface'] = new \PoPCMSSchema\CommentsWP\ConditionalOnModule\Users\TypeAPIs\CommentTypeAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FieldResolvers\InterfaceType\CommentableInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FieldResolvers\InterfaceType\CommentableInterfaceTypeFieldResolver
     */
    protected static function getCommentableInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FieldResolvers\\InterfaceType\\CommentableInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\Comments\FieldResolvers\InterfaceType\CommentableInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver
     */
    protected static function getCommentObjectTypeFieldResolver5Service($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Comments\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FieldResolvers\ObjectType\CommentableGenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FieldResolvers\ObjectType\CommentableGenericCustomPostObjectTypeFieldResolver
     */
    protected static function getCommentableGenericCustomPostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\CommentableGenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Comments\FieldResolvers\ObjectType\CommentableGenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver5Service($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Comments\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FilterInputs\CommentStatusFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FilterInputs\CommentStatusFilterInput
     */
    protected static function getCommentStatusFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FilterInputs\\CommentStatusFilterInput'] = $instance = new \PoPCMSSchema\Comments\FilterInputs\CommentStatusFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FilterInputs\CommentTypesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FilterInputs\CommentTypesFilterInput
     */
    protected static function getCommentTypesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FilterInputs\\CommentTypesFilterInput'] = $instance = new \PoPCMSSchema\Comments\FilterInputs\CommentTypesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FilterInputs\CustomPostIDFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FilterInputs\CustomPostIDFilterInput
     */
    protected static function getCustomPostIDFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FilterInputs\\CustomPostIDFilterInput'] = $instance = new \PoPCMSSchema\Comments\FilterInputs\CustomPostIDFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FilterInputs\CustomPostIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FilterInputs\CustomPostIDsFilterInput
     */
    protected static function getCustomPostIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FilterInputs\\CustomPostIDsFilterInput'] = $instance = new \PoPCMSSchema\Comments\FilterInputs\CustomPostIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FilterInputs\CustomPostStatusFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FilterInputs\CustomPostStatusFilterInput
     */
    protected static function getCustomPostStatusFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FilterInputs\\CustomPostStatusFilterInput'] = $instance = new \PoPCMSSchema\Comments\FilterInputs\CustomPostStatusFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\FilterInputs\ExcludeCustomPostIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\FilterInputs\ExcludeCustomPostIDsFilterInput
     */
    protected static function getExcludeCustomPostIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\FilterInputs\\ExcludeCustomPostIDsFilterInput'] = $instance = new \PoPCMSSchema\Comments\FilterInputs\ExcludeCustomPostIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\Hooks\WhitelistParamHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\Hooks\WhitelistParamHookSet
     */
    protected static function getWhitelistParamHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\Hooks\\WhitelistParamHookSet'] = $instance = new \PoPCMSSchema\Comments\Hooks\WhitelistParamHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet2Service($container)
    {
        $container->services['PoPCMSSchema\\Comments\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\Comments\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\RelationalTypeDataLoaders\ObjectType\CommentObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPWPSchema\Comments\Overrides\RelationalTypeDataLoaders\ObjectType\CommentObjectTypeDataLoader
     */
    protected static function getCommentObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\RelationalTypeDataLoaders\\ObjectType\\CommentObjectTypeDataLoader'] = $instance = new \PoPWPSchema\Comments\Overrides\RelationalTypeDataLoaders\ObjectType\CommentObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeAPIs\CommentTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CommentsWP\TypeAPIs\CommentTypeAPI
     */
    protected static function getCommentTypeAPIInterface2Service($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeAPIs\\CommentTypeAPIInterface'] = $instance = new \PoPCMSSchema\CommentsWP\TypeAPIs\CommentTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\EnumType\CommentOrderByEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Comments\Overrides\TypeResolvers\EnumType\CommentOrderByEnumTypeResolver
     */
    protected static function getCommentOrderByEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentOrderByEnumTypeResolver'] = $instance = new \PoPWPSchema\Comments\Overrides\TypeResolvers\EnumType\CommentOrderByEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\EnumType\CommentStatusEnumTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\EnumType\CommentStatusEnumTypeResolver
     */
    protected static function getCommentStatusEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentStatusEnumTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\EnumType\CommentStatusEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\EnumType\CommentTypeEnumTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\EnumType\CommentTypeEnumTypeResolver
     */
    protected static function getCommentTypeEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentTypeEnumTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\EnumType\CommentTypeEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentByOneofInputObjectTypeResolver
     */
    protected static function getCommentByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentResponsePaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentResponsePaginationInputObjectTypeResolver
     */
    protected static function getCommentResponsePaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsePaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentResponsePaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentResponsesFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentResponsesFilterInputObjectTypeResolver
     */
    protected static function getCommentResponsesFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsesFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentResponsesFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentSortInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentSortInputObjectTypeResolver
     */
    protected static function getCommentSortInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentSortInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CommentSortInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CustomPostCommentPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CustomPostCommentPaginationInputObjectTypeResolver
     */
    protected static function getCustomPostCommentPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CustomPostCommentPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CustomPostCommentsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CustomPostCommentsFilterInputObjectTypeResolver
     */
    protected static function getCustomPostCommentsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\CustomPostCommentsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\FilterCommentsByCommentAuthorInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\FilterCommentsByCommentAuthorInputObjectTypeResolver
     */
    protected static function getFilterCommentsByCommentAuthorInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCommentAuthorInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\FilterCommentsByCommentAuthorInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\FilterCommentsByCustomPostAuthorInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\FilterCommentsByCustomPostAuthorInputObjectTypeResolver
     */
    protected static function getFilterCommentsByCustomPostAuthorInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCustomPostAuthorInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\FilterCommentsByCustomPostAuthorInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\RootCommentPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\RootCommentPaginationInputObjectTypeResolver
     */
    protected static function getRootCommentPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\RootCommentPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InputObjectType\RootCommentsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\RootCommentsFilterInputObjectTypeResolver
     */
    protected static function getRootCommentsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InputObjectType\RootCommentsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\InterfaceType\CommentableInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\InterfaceType\CommentableInterfaceTypeResolver
     */
    protected static function getCommentableInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InterfaceType\\CommentableInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\InterfaceType\CommentableInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Comments\TypeResolvers\ObjectType\CommentObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Comments\TypeResolvers\ObjectType\CommentObjectTypeResolver
     */
    protected static function getCommentObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Comments\\TypeResolvers\\ObjectType\\CommentObjectTypeResolver'] = $instance = new \PoPCMSSchema\Comments\TypeResolvers\ObjectType\CommentObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryMutationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCategoryMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryObjectTypeFieldResolver
     */
    protected static function getGenericCategoryObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\GenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootGenericCategoryCRUDObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootGenericCategoryCRUDObjectTypeFieldResolver
     */
    protected static function getRootGenericCategoryCRUDObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootGenericCategoryCRUDObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootGenericCategoryCRUDObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver6Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\FieldResolvers\ObjectType\RootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\Hooks\MutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\Hooks\MutationResolverHookSet
     */
    protected static function getMutationResolverHookSetService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\Hooks\\MutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\Hooks\MutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\CreateGenericCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\CreateGenericCategoryTermBulkOperationMutationResolver
     */
    protected static function getCreateGenericCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\CreateGenericCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\CreateGenericCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\CreateGenericCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\CreateGenericCategoryTermMutationResolver
     */
    protected static function getCreateGenericCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\CreateGenericCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\CreateGenericCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\DeleteGenericCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\DeleteGenericCategoryTermBulkOperationMutationResolver
     */
    protected static function getDeleteGenericCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\DeleteGenericCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\DeleteGenericCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\DeleteGenericCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\DeleteGenericCategoryTermMutationResolver
     */
    protected static function getDeleteGenericCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\DeleteGenericCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\DeleteGenericCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableCreateGenericCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableCreateGenericCategoryTermBulkOperationMutationResolver
     */
    protected static function getPayloadableCreateGenericCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableCreateGenericCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableCreateGenericCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableCreateGenericCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableCreateGenericCategoryTermMutationResolver
     */
    protected static function getPayloadableCreateGenericCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableCreateGenericCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableCreateGenericCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableDeleteGenericCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableDeleteGenericCategoryTermBulkOperationMutationResolver
     */
    protected static function getPayloadableDeleteGenericCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableDeleteGenericCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableDeleteGenericCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableDeleteGenericCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableDeleteGenericCategoryTermMutationResolver
     */
    protected static function getPayloadableDeleteGenericCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableDeleteGenericCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableDeleteGenericCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnCustomPostBulkOperationMutationResolver
     */
    protected static function getPayloadableSetCategoriesOnCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnCustomPostMutationResolver
     */
    protected static function getPayloadableSetCategoriesOnCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableUpdateGenericCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableUpdateGenericCategoryTermBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdateGenericCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableUpdateGenericCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableUpdateGenericCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableUpdateGenericCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableUpdateGenericCategoryTermMutationResolver
     */
    protected static function getPayloadableUpdateGenericCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\PayloadableUpdateGenericCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\PayloadableUpdateGenericCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\SetCategoriesOnCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\SetCategoriesOnCustomPostBulkOperationMutationResolver
     */
    protected static function getSetCategoriesOnCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\SetCategoriesOnCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\SetCategoriesOnCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\SetCategoriesOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\SetCategoriesOnCustomPostMutationResolver
     */
    protected static function getSetCategoriesOnCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\SetCategoriesOnCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\SetCategoriesOnCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\UpdateGenericCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\UpdateGenericCategoryTermBulkOperationMutationResolver
     */
    protected static function getUpdateGenericCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\UpdateGenericCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\UpdateGenericCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\UpdateGenericCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\UpdateGenericCategoryTermMutationResolver
     */
    protected static function getUpdateGenericCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\MutationResolvers\\UpdateGenericCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\MutationResolvers\UpdateGenericCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker
     */
    protected static function getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCategoryDeleteMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCategoryDeleteMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getGenericCategoryDeleteMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCategoryDeleteMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCategoryDeleteMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCategoryUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCategoryUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getGenericCategoryUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCategoryUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCategoryUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getGenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\SchemaHooks\GenericCustomPostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\SchemaHooks\GenericCustomPostMutationResolverHookSet
     */
    protected static function getGenericCustomPostMutationResolverHookSetService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\SchemaHooks\\GenericCustomPostMutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\SchemaHooks\GenericCustomPostMutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeAPIs\CustomPostCategoryTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutationsWP\TypeAPIs\CustomPostCategoryTypeMutationAPI
     */
    protected static function getCustomPostCategoryTypeMutationAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeAPIs\\CustomPostCategoryTypeMutationAPIInterface'] = new \PoPCMSSchema\CustomPostCategoryMutationsWP\TypeAPIs\CustomPostCategoryTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\CategoriesByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\CategoriesByOneofInputObjectTypeResolver
     */
    protected static function getCategoriesByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\CategoriesByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\CategoriesByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\GenericCategoryTermUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\GenericCategoryTermUpdateInputObjectTypeResolver
     */
    protected static function getGenericCategoryTermUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCategoryTermUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\GenericCategoryTermUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\GenericCustomPostSetCategoriesInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\GenericCustomPostSetCategoriesInputObjectTypeResolver
     */
    protected static function getGenericCustomPostSetCategoriesInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetCategoriesInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\GenericCustomPostSetCategoriesInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootCreateGenericCategoryTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootCreateGenericCategoryTermInputObjectTypeResolver
     */
    protected static function getRootCreateGenericCategoryTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCategoryTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootCreateGenericCategoryTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootDeleteGenericCategoryTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootDeleteGenericCategoryTermInputObjectTypeResolver
     */
    protected static function getRootDeleteGenericCategoryTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericCategoryTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootDeleteGenericCategoryTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootSetCategoriesOnCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootSetCategoriesOnCustomPostInputObjectTypeResolver
     */
    protected static function getRootSetCategoriesOnCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootSetCategoriesOnCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootUpdateGenericCategoryTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootUpdateGenericCategoryTermInputObjectTypeResolver
     */
    protected static function getRootUpdateGenericCategoryTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCategoryTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\InputObjectType\RootUpdateGenericCategoryTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCategoryDeleteMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCategoryDeleteMutationPayloadObjectTypeResolver
     */
    protected static function getGenericCategoryDeleteMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryDeleteMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCategoryDeleteMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCategoryUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCategoryUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getGenericCategoryUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCategoryUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCustomPostSetCategoriesMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCustomPostSetCategoriesMutationPayloadObjectTypeResolver
     */
    protected static function getGenericCustomPostSetCategoriesMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetCategoriesMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\GenericCustomPostSetCategoriesMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootCreateGenericCategoryTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootCreateGenericCategoryTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreateGenericCategoryTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCategoryTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootCreateGenericCategoryTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootDeleteGenericCategoryTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootDeleteGenericCategoryTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootDeleteGenericCategoryTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericCategoryTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootDeleteGenericCategoryTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootUpdateGenericCategoryTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootUpdateGenericCategoryTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdateGenericCategoryTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCategoryTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\ObjectType\RootUpdateGenericCategoryTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCategoryDeleteMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCategoryDeleteMutationErrorPayloadUnionTypeResolver
     */
    protected static function getGenericCategoryDeleteMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryDeleteMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCategoryDeleteMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCategoryUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCategoryUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getGenericCategoryUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCategoryUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolver
     */
    protected static function getGenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostCategoryMutations\TypeResolvers\UnionType\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostMutationPayloadObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\CustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver7Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\RootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver
     */
    protected static function getWithFeaturedImageGenericCustomPostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\Hooks\CustomPostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\Hooks\CustomPostMutationResolverHookSet
     */
    protected static function getCustomPostMutationResolverHookSetService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\Hooks\\CustomPostMutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\Hooks\CustomPostMutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\Hooks\MutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\Hooks\MutationResolverHookSet
     */
    protected static function getMutationResolverHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\Hooks\\MutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\Hooks\MutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableRemoveFeaturedImageFromCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableRemoveFeaturedImageFromCustomPostBulkOperationMutationResolver
     */
    protected static function getPayloadableRemoveFeaturedImageFromCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableRemoveFeaturedImageFromCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableRemoveFeaturedImageFromCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableRemoveFeaturedImageFromCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableRemoveFeaturedImageFromCustomPostMutationResolver
     */
    protected static function getPayloadableRemoveFeaturedImageFromCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableRemoveFeaturedImageFromCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableRemoveFeaturedImageFromCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableSetFeaturedImageOnCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableSetFeaturedImageOnCustomPostBulkOperationMutationResolver
     */
    protected static function getPayloadableSetFeaturedImageOnCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableSetFeaturedImageOnCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableSetFeaturedImageOnCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableSetFeaturedImageOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableSetFeaturedImageOnCustomPostMutationResolver
     */
    protected static function getPayloadableSetFeaturedImageOnCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\PayloadableSetFeaturedImageOnCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\PayloadableSetFeaturedImageOnCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageFromCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageFromCustomPostBulkOperationMutationResolver
     */
    protected static function getRemoveFeaturedImageFromCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\RemoveFeaturedImageFromCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageFromCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageFromCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageFromCustomPostMutationResolver
     */
    protected static function getRemoveFeaturedImageFromCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\RemoveFeaturedImageFromCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\RemoveFeaturedImageFromCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostBulkOperationMutationResolver
     */
    protected static function getSetFeaturedImageOnCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\SetFeaturedImageOnCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostMutationResolver
     */
    protected static function getSetFeaturedImageOnCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\MutationResolvers\\SetFeaturedImageOnCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\MutationResolvers\SetFeaturedImageOnCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\CreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\CreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\CreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\CreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker
     */
    protected static function getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getMediaItemDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\ObjectType\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\ObjectType\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader
     */
    protected static function getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\ObjectType\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\ObjectType\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getCustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getCustomPostSetFeaturedImageMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\RelationalTypeDataLoaders\UnionType\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeAPIs\CustomPostMediaTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutationsWP\TypeAPIs\CustomPostMediaTypeMutationAPI
     */
    protected static function getCustomPostMediaTypeMutationAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeAPIs\\CustomPostMediaTypeMutationAPIInterface'] = new \PoPCMSSchema\CustomPostMediaMutationsWP\TypeAPIs\CustomPostMediaTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\CustomPostSetFeaturedImageInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\CustomPostSetFeaturedImageInputObjectTypeResolver
     */
    protected static function getCustomPostSetFeaturedImageInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\CustomPostSetFeaturedImageInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\CustomPostSetFeaturedImageInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\FeaturedImageByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\FeaturedImageByOneofInputObjectTypeResolver
     */
    protected static function getFeaturedImageByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\FeaturedImageByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\FeaturedImageByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\RootRemoveFeaturedImageFromCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\RootRemoveFeaturedImageFromCustomPostInputObjectTypeResolver
     */
    protected static function getRootRemoveFeaturedImageFromCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootRemoveFeaturedImageFromCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\RootRemoveFeaturedImageFromCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\RootSetFeaturedImageOnCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\RootSetFeaturedImageOnCustomPostInputObjectTypeResolver
     */
    protected static function getRootSetFeaturedImageOnCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootSetFeaturedImageOnCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\InputObjectType\RootSetFeaturedImageOnCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\CustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\CustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolver
     */
    protected static function getCustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\CustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\CustomPostSetFeaturedImageMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\CustomPostSetFeaturedImageMutationPayloadObjectTypeResolver
     */
    protected static function getCustomPostSetFeaturedImageMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostSetFeaturedImageMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\CustomPostSetFeaturedImageMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver
     */
    protected static function getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\RootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\RootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\RootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\RootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\RootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\ObjectType\RootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolver
     */
    protected static function getCustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolver
     */
    protected static function getCustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMediaMutations\TypeResolvers\UnionType\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMedia\FieldResolvers\InterfaceType\WithFeaturedImageInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMedia\FieldResolvers\InterfaceType\WithFeaturedImageInterfaceTypeFieldResolver
     */
    protected static function getWithFeaturedImageInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMedia\\FieldResolvers\\InterfaceType\\WithFeaturedImageInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMedia\FieldResolvers\InterfaceType\WithFeaturedImageInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver
     */
    protected static function getWithFeaturedImageGenericCustomPostObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMedia\TypeAPIs\CustomPostMediaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMediaWP\TypeAPIs\CustomPostMediaTypeAPI
     */
    protected static function getCustomPostMediaTypeAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\CustomPostMedia\\TypeAPIs\\CustomPostMediaTypeAPIInterface'] = new \PoPCMSSchema\CustomPostMediaWP\TypeAPIs\CustomPostMediaTypeAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMedia\TypeResolvers\InterfaceType\WithFeaturedImageInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMedia\TypeResolvers\InterfaceType\WithFeaturedImageInterfaceTypeResolver
     */
    protected static function getWithFeaturedImageInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMedia\\TypeResolvers\\InterfaceType\\WithFeaturedImageInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMedia\TypeResolvers\InterfaceType\WithFeaturedImageInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMetaWP\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMetaWP\\Hooks\\QueryHookSet'] = $instance = new \PoPCMSSchema\CustomPostMetaWP\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMeta\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMeta\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver
     */
    protected static function getCustomPostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMeta\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMeta\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMeta\TypeAPIs\CustomPostMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMetaWP\TypeAPIs\CustomPostMetaTypeAPI
     */
    protected static function getCustomPostMetaTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMeta\\TypeAPIs\\CustomPostMetaTypeAPIInterface'] = $instance = new \PoPCMSSchema\CustomPostMetaWP\TypeAPIs\CustomPostMetaTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutationsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutationsWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutationsWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\CustomPostMutationsWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ComponentProcessors\CustomPostMutationFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ComponentProcessors\CustomPostMutationFilterInputContainerComponentProcessor
     */
    protected static function getCustomPostMutationFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ComponentProcessors\\CustomPostMutationFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\CustomPostMutations\ComponentProcessors\CustomPostMutationFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet
     */
    protected static function getRemoveAuthorFilterInputHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] = $instance = new \PoPCMSSchema\CustomPostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSet
     */
    protected static function getRemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\CustomPostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider5Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\CustomPostMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostMutationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostObjectTypeFieldResolver4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\GenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver8Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver
     */
    protected static function getRootQueryableObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\FieldResolvers\ObjectType\RootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\CustomPostMutations\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\CreateGenericCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\CreateGenericCustomPostBulkOperationMutationResolver
     */
    protected static function getCreateGenericCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\CreateGenericCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\CreateGenericCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\CreateGenericCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\CreateGenericCustomPostMutationResolver
     */
    protected static function getCreateGenericCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\CreateGenericCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\CreateGenericCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableCreateGenericCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableCreateGenericCustomPostBulkOperationMutationResolver
     */
    protected static function getPayloadableCreateGenericCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableCreateGenericCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableCreateGenericCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableCreateGenericCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableCreateGenericCustomPostMutationResolver
     */
    protected static function getPayloadableCreateGenericCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableCreateGenericCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableCreateGenericCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableUpdateGenericCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableUpdateGenericCustomPostBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdateGenericCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableUpdateGenericCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableUpdateGenericCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableUpdateGenericCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableUpdateGenericCustomPostMutationResolver
     */
    protected static function getPayloadableUpdateGenericCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\PayloadableUpdateGenericCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\PayloadableUpdateGenericCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\UpdateGenericCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\UpdateGenericCustomPostBulkOperationMutationResolver
     */
    protected static function getUpdateGenericCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\UpdateGenericCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\UpdateGenericCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\MutationResolvers\UpdateGenericCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\MutationResolvers\UpdateGenericCustomPostMutationResolver
     */
    protected static function getUpdateGenericCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\MutationResolvers\\UpdateGenericCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\MutationResolvers\UpdateGenericCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\CustomPostDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\CustomPostDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\CustomPostDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\CustomPostDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getGenericCustomPostUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCustomPostUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreateGenericCustomPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdateGenericCustomPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeAPIs\CustomPostTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutationsWP\TypeAPIs\CustomPostTypeMutationAPI
     */
    protected static function getCustomPostTypeMutationAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeAPIs\\CustomPostTypeMutationAPIInterface'] = $instance = new \PoPCMSSchema\CustomPostMutationsWP\TypeAPIs\CustomPostTypeMutationAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\CustomPostContentAsOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\CustomPostContentAsOneofInputObjectTypeResolver
     */
    protected static function getCustomPostContentAsOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostContentAsOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\CustomPostContentAsOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\CustomPostUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\CustomPostUpdateInputObjectTypeResolver
     */
    protected static function getCustomPostUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\CustomPostUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\GenericCustomPostUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\GenericCustomPostUpdateInputObjectTypeResolver
     */
    protected static function getGenericCustomPostUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\GenericCustomPostUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootCreateCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootCreateCustomPostInputObjectTypeResolver
     */
    protected static function getRootCreateCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootCreateCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootCreateGenericCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootCreateGenericCustomPostInputObjectTypeResolver
     */
    protected static function getRootCreateGenericCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootCreateGenericCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootMyCustomPostsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootMyCustomPostsFilterInputObjectTypeResolver
     */
    protected static function getRootMyCustomPostsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootMyCustomPostsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootMyCustomPostsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootUpdateCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootUpdateCustomPostInputObjectTypeResolver
     */
    protected static function getRootUpdateCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootUpdateCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootUpdateGenericCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootUpdateGenericCustomPostInputObjectTypeResolver
     */
    protected static function getRootUpdateGenericCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\InputObjectType\RootUpdateGenericCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\CustomPostDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\CustomPostDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\CustomPostDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\CustomPostDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\GenericCustomPostUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\GenericCustomPostUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getGenericCustomPostUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\GenericCustomPostUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\GenericCustomPostUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\RootCreateGenericCustomPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\RootCreateGenericCustomPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreateGenericCustomPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCustomPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\RootCreateGenericCustomPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\RootUpdateGenericCustomPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\RootUpdateGenericCustomPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdateGenericCustomPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCustomPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\ObjectType\RootUpdateGenericCustomPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\GenericCustomPostUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\GenericCustomPostUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getGenericCustomPostUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\GenericCustomPostUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\GenericCustomPostUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostMutations\TypeResolvers\UnionType\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider6Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostMutationPayloadObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\CustomPostMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostObjectTypeFieldResolver5Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericCustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagMutationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericTagMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagObjectTypeFieldResolver
     */
    protected static function getGenericTagObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getGenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\GenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootGenericTagCRUDObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootGenericTagCRUDObjectTypeFieldResolver
     */
    protected static function getRootGenericTagCRUDObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootGenericTagCRUDObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootGenericTagCRUDObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver9Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\FieldResolvers\ObjectType\RootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\Hooks\MutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\Hooks\MutationResolverHookSet
     */
    protected static function getMutationResolverHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\Hooks\\MutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\Hooks\MutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\CreateGenericTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\CreateGenericTagTermBulkOperationMutationResolver
     */
    protected static function getCreateGenericTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\CreateGenericTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\CreateGenericTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\CreateGenericTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\CreateGenericTagTermMutationResolver
     */
    protected static function getCreateGenericTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\CreateGenericTagTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\CreateGenericTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\DeleteGenericTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\DeleteGenericTagTermBulkOperationMutationResolver
     */
    protected static function getDeleteGenericTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\DeleteGenericTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\DeleteGenericTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\DeleteGenericTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\DeleteGenericTagTermMutationResolver
     */
    protected static function getDeleteGenericTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\DeleteGenericTagTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\DeleteGenericTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableCreateGenericTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableCreateGenericTagTermBulkOperationMutationResolver
     */
    protected static function getPayloadableCreateGenericTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableCreateGenericTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableCreateGenericTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableCreateGenericTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableCreateGenericTagTermMutationResolver
     */
    protected static function getPayloadableCreateGenericTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableCreateGenericTagTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableCreateGenericTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableDeleteGenericTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableDeleteGenericTagTermBulkOperationMutationResolver
     */
    protected static function getPayloadableDeleteGenericTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableDeleteGenericTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableDeleteGenericTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableDeleteGenericTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableDeleteGenericTagTermMutationResolver
     */
    protected static function getPayloadableDeleteGenericTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableDeleteGenericTagTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableDeleteGenericTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableSetTagsOnCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableSetTagsOnCustomPostBulkOperationMutationResolver
     */
    protected static function getPayloadableSetTagsOnCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableSetTagsOnCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableSetTagsOnCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableSetTagsOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableSetTagsOnCustomPostMutationResolver
     */
    protected static function getPayloadableSetTagsOnCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableSetTagsOnCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableSetTagsOnCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableUpdateGenericTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableUpdateGenericTagTermBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdateGenericTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableUpdateGenericTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableUpdateGenericTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableUpdateGenericTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableUpdateGenericTagTermMutationResolver
     */
    protected static function getPayloadableUpdateGenericTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\PayloadableUpdateGenericTagTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\PayloadableUpdateGenericTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\SetTagsOnCustomPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\SetTagsOnCustomPostBulkOperationMutationResolver
     */
    protected static function getSetTagsOnCustomPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\SetTagsOnCustomPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\SetTagsOnCustomPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\SetTagsOnCustomPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\SetTagsOnCustomPostMutationResolver
     */
    protected static function getSetTagsOnCustomPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\SetTagsOnCustomPostMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\SetTagsOnCustomPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\UpdateGenericTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\UpdateGenericTagTermBulkOperationMutationResolver
     */
    protected static function getUpdateGenericTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\UpdateGenericTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\UpdateGenericTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\MutationResolvers\UpdateGenericTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\UpdateGenericTagTermMutationResolver
     */
    protected static function getUpdateGenericTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\MutationResolvers\\UpdateGenericTagTermMutationResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\MutationResolvers\UpdateGenericTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker5Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\GenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\GenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\GenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\GenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker5Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getTagTermDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker
     */
    protected static function getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker5Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getGenericCustomPostSetTagsMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericTagDeleteMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericTagDeleteMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getGenericTagDeleteMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\GenericTagDeleteMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericTagDeleteMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericTagUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericTagUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getGenericTagUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\GenericTagUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\GenericTagUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericTagTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericTagTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreateGenericTagTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateGenericTagTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootCreateGenericTagTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootDeleteGenericTagTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootSetTagsOnCustomPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdateGenericTagTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\RelationalTypeDataLoaders\UnionType\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\SchemaHooks\GenericCustomPostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\SchemaHooks\GenericCustomPostMutationResolverHookSet
     */
    protected static function getGenericCustomPostMutationResolverHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\SchemaHooks\\GenericCustomPostMutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\SchemaHooks\GenericCustomPostMutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeAPIs\CustomPostTagTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutationsWP\TypeAPIs\CustomPostTagTypeMutationAPI
     */
    protected static function getCustomPostTagTypeMutationAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeAPIs\\CustomPostTagTypeMutationAPIInterface'] = new \PoPCMSSchema\CustomPostTagMutationsWP\TypeAPIs\CustomPostTagTypeMutationAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\GenericCustomPostSetTagsInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\GenericCustomPostSetTagsInputObjectTypeResolver
     */
    protected static function getGenericCustomPostSetTagsInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetTagsInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\GenericCustomPostSetTagsInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\GenericTagTermUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\GenericTagTermUpdateInputObjectTypeResolver
     */
    protected static function getGenericTagTermUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericTagTermUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\GenericTagTermUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootCreateGenericTagTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootCreateGenericTagTermInputObjectTypeResolver
     */
    protected static function getRootCreateGenericTagTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericTagTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootCreateGenericTagTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootDeleteGenericTagTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootDeleteGenericTagTermInputObjectTypeResolver
     */
    protected static function getRootDeleteGenericTagTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericTagTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootDeleteGenericTagTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootSetTagsOnCustomPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootSetTagsOnCustomPostInputObjectTypeResolver
     */
    protected static function getRootSetTagsOnCustomPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnCustomPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootSetTagsOnCustomPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootUpdateGenericTagTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootUpdateGenericTagTermInputObjectTypeResolver
     */
    protected static function getRootUpdateGenericTagTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericTagTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\RootUpdateGenericTagTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\TagsByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\TagsByOneofInputObjectTypeResolver
     */
    protected static function getTagsByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\TagsByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\InputObjectType\TagsByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericCustomPostSetTagsMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericCustomPostSetTagsMutationPayloadObjectTypeResolver
     */
    protected static function getGenericCustomPostSetTagsMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetTagsMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericCustomPostSetTagsMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericTagDeleteMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericTagDeleteMutationPayloadObjectTypeResolver
     */
    protected static function getGenericTagDeleteMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagDeleteMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericTagDeleteMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericTagUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericTagUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getGenericTagUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\GenericTagUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootCreateGenericTagTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootCreateGenericTagTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreateGenericTagTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootCreateGenericTagTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootCreateGenericTagTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootDeleteGenericTagTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootDeleteGenericTagTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootDeleteGenericTagTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericTagTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootDeleteGenericTagTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootSetTagsOnCustomPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootSetTagsOnCustomPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootSetTagsOnCustomPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnCustomPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootSetTagsOnCustomPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootUpdateGenericTagTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootUpdateGenericTagTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdateGenericTagTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericTagTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\ObjectType\RootUpdateGenericTagTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolver
     */
    protected static function getGenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericTagDeleteMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericTagDeleteMutationErrorPayloadUnionTypeResolver
     */
    protected static function getGenericTagDeleteMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagDeleteMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericTagDeleteMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericTagUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericTagUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getGenericTagUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\GenericTagUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootCreateGenericTagTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootCreateGenericTagTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreateGenericTagTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootCreateGenericTagTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootCreateGenericTagTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostTagMutations\TypeResolvers\UnionType\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutationsWP\Hooks\CustomPostMutationTypeAPIQueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutationsWP\Hooks\CustomPostMutationTypeAPIQueryHookSet
     */
    protected static function getCustomPostMutationTypeAPIQueryHookSetService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutationsWP\\Hooks\\CustomPostMutationTypeAPIQueryHookSet'] = $instance = new \PoPCMSSchema\CustomPostUserMutationsWP\Hooks\CustomPostMutationTypeAPIQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider7Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\CustomPostUserMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutations\Hooks\CustomPostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutations\Hooks\CustomPostMutationResolverHookSet
     */
    protected static function getCustomPostMutationResolverHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutations\\Hooks\\CustomPostMutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostUserMutations\Hooks\CustomPostMutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutations\Hooks\MutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutations\Hooks\MutationResolverHookSet
     */
    protected static function getMutationResolverHookSet4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutations\\Hooks\\MutationResolverHookSet'] = $instance = new \PoPCMSSchema\CustomPostUserMutations\Hooks\MutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutations\ObjectTypeResolverPickers\CreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutations\ObjectTypeResolverPickers\CreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutations\\ObjectTypeResolverPickers\\CreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostUserMutations\ObjectTypeResolverPickers\CreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutations\RelationalTypeDataLoaders\ObjectType\UserDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutations\RelationalTypeDataLoaders\ObjectType\UserDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getUserDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutations\\RelationalTypeDataLoaders\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostUserMutations\RelationalTypeDataLoaders\ObjectType\UserDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutations\TypeResolvers\InputObjectType\AuthorByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutations\TypeResolvers\InputObjectType\AuthorByOneofInputObjectTypeResolver
     */
    protected static function getAuthorByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\InputObjectType\\AuthorByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostUserMutations\TypeResolvers\InputObjectType\AuthorByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostUserMutations\TypeResolvers\ObjectType\UserDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostUserMutations\TypeResolvers\ObjectType\UserDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getUserDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostUserMutations\TypeResolvers\ObjectType\UserDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostsWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostsWP\Hooks\RoutingStateHookSet
     */
    protected static function getRoutingStateHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostsWP\\Hooks\\RoutingStateHookSet'] = $instance = new \PoPCMSSchema\CustomPostsWP\Hooks\RoutingStateHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPostsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostsWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPostsWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\CustomPostsWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\ComponentProcessors\CommonCustomPostFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\ComponentProcessors\CommonCustomPostFilterInputContainerComponentProcessor
     */
    protected static function getCommonCustomPostFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\ComponentProcessors\\CommonCustomPostFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\CustomPosts\ComponentProcessors\CommonCustomPostFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\ComponentProcessors\CustomPostFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\ComponentProcessors\CustomPostFilterInputContainerComponentProcessor
     */
    protected static function getCustomPostFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\ComponentProcessors\\CustomPostFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\CustomPosts\ComponentProcessors\CustomPostFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\CustomPosts\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\ConditionalOnModule\API\ComponentProcessors\CustomPostRelationalFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\ConditionalOnModule\API\ComponentProcessors\CustomPostRelationalFieldDataloadComponentProcessor
     */
    protected static function getCustomPostRelationalFieldDataloadComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\ConditionalOnModule\\API\\ComponentProcessors\\CustomPostRelationalFieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\CustomPosts\ConditionalOnModule\API\ComponentProcessors\CustomPostRelationalFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\FieldResolvers\InterfaceType\CustomPostInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\FieldResolvers\InterfaceType\CustomPostInterfaceTypeFieldResolver
     */
    protected static function getCustomPostInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\FieldResolvers\\InterfaceType\\CustomPostInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPosts\FieldResolvers\InterfaceType\CustomPostInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver
     */
    protected static function getCustomPostObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\FieldResolvers\ObjectType\RootCustomPostListObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\FieldResolvers\ObjectType\RootCustomPostListObjectTypeFieldResolver
     */
    protected static function getRootCustomPostListObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\FieldResolvers\\ObjectType\\RootCustomPostListObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\CustomPosts\FieldResolvers\ObjectType\RootCustomPostListObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\FilterInputs\CustomPostStatusFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\FilterInputs\CustomPostStatusFilterInput
     */
    protected static function getCustomPostStatusFilterInput2Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\FilterInputs\\CustomPostStatusFilterInput'] = $instance = new \PoPCMSSchema\CustomPosts\FilterInputs\CustomPostStatusFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\FilterInputs\CustomPostTypesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\FilterInputs\CustomPostTypesFilterInput
     */
    protected static function getCustomPostTypesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\FilterInputs\\CustomPostTypesFilterInput'] = $instance = new \PoPCMSSchema\CustomPosts\FilterInputs\CustomPostTypesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\FilterInputs\UnionCustomPostTypesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\FilterInputs\UnionCustomPostTypesFilterInput
     */
    protected static function getUnionCustomPostTypesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\FilterInputs\\UnionCustomPostTypesFilterInput'] = $instance = new \PoPCMSSchema\CustomPosts\FilterInputs\UnionCustomPostTypesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\Hooks\VarsHookSet
     */
    protected static function getVarsHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\Hooks\\VarsHookSet'] = $instance = new \PoPCMSSchema\CustomPosts\Hooks\VarsHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet4Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\CustomPosts\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\ObjectTypeResolverPickers\CustomPostUnionGenericCustomPostObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostsWP\Overrides\ObjectTypeResolverPickers\CustomPostUnionGenericCustomPostObjectTypeResolverPicker
     */
    protected static function getCustomPostUnionGenericCustomPostObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\ObjectTypeResolverPickers\\CustomPostUnionGenericCustomPostObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\CustomPostsWP\Overrides\ObjectTypeResolverPickers\CustomPostUnionGenericCustomPostObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\Registries\CustomPostObjectTypeResolverPickerRegistryInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\Registries\CustomPostObjectTypeResolverPickerRegistry
     */
    protected static function getCustomPostObjectTypeResolverPickerRegistryInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\Registries\\CustomPostObjectTypeResolverPickerRegistryInterface'] = $instance = new \PoPCMSSchema\CustomPosts\Registries\CustomPostObjectTypeResolverPickerRegistry();

        $instance->addCustomPostObjectTypeResolverPicker(($container->services['PoPCMSSchema\\CustomPosts\\ObjectTypeResolverPickers\\CustomPostUnionGenericCustomPostObjectTypeResolverPicker'] ?? self::getCustomPostUnionGenericCustomPostObjectTypeResolverPickerService($container)), 'PoPCMSSchema\\CustomPosts\\ObjectTypeResolverPickers\\CustomPostUnionGenericCustomPostObjectTypeResolverPicker');
        $instance->addCustomPostObjectTypeResolverPicker(($container->services['PoPCMSSchema\\Pages\\ObjectTypeResolverPickers\\PageCustomPostObjectTypeResolverPicker'] ?? self::getPageCustomPostObjectTypeResolverPickerService($container)), 'PoPCMSSchema\\Pages\\ObjectTypeResolverPickers\\PageCustomPostObjectTypeResolverPicker');
        $instance->addCustomPostObjectTypeResolverPicker(($container->services['PoPCMSSchema\\Posts\\ObjectTypeResolverPickers\\PostCustomPostObjectTypeResolverPicker'] ?? self::getPostCustomPostObjectTypeResolverPickerService($container)), 'PoPCMSSchema\\Posts\\ObjectTypeResolverPickers\\PostCustomPostObjectTypeResolverPicker');

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\RelationalTypeDataLoaders\ObjectType\CustomPostObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\Overrides\RelationalTypeDataLoaders\ObjectType\CustomPostObjectTypeDataLoader
     */
    protected static function getCustomPostObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\RelationalTypeDataLoaders\\ObjectType\\CustomPostObjectTypeDataLoader'] = $instance = new \PoPWPSchema\CustomPosts\Overrides\RelationalTypeDataLoaders\ObjectType\CustomPostObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\RelationalTypeDataLoaders\UnionType\CustomPostUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostsWP\Overrides\RelationalTypeDataLoaders\UnionType\CustomPostUnionTypeDataLoader
     */
    protected static function getCustomPostUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\RelationalTypeDataLoaders\\UnionType\\CustomPostUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\CustomPostsWP\Overrides\RelationalTypeDataLoaders\UnionType\CustomPostUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\State\AppStateProvider
     */
    protected static function getAppStateProvider6Service($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\State\\AppStateProvider'] = $instance = new \PoPCMSSchema\CustomPosts\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeAPIs\CustomPostTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostsWP\TypeAPIs\CustomPostTypeAPI
     */
    protected static function getCustomPostTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeAPIs\\CustomPostTypeAPIInterface'] = $instance = new \PoPCMSSchema\CustomPostsWP\TypeAPIs\CustomPostTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\CustomPostEnumStringScalarTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\CustomPostEnumStringScalarTypeResolver
     */
    protected static function getCustomPostEnumStringScalarTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostEnumStringScalarTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\CustomPostEnumStringScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\CustomPostOrderByEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\Overrides\TypeResolvers\EnumType\CustomPostOrderByEnumTypeResolver
     */
    protected static function getCustomPostOrderByEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostOrderByEnumTypeResolver'] = $instance = new \PoPWPSchema\CustomPosts\Overrides\TypeResolvers\EnumType\CustomPostOrderByEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\CustomPostStatusEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\Overrides\TypeResolvers\EnumType\CustomPostStatusEnumTypeResolver
     */
    protected static function getCustomPostStatusEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostStatusEnumTypeResolver'] = $instance = new \PoPWPSchema\CustomPosts\Overrides\TypeResolvers\EnumType\CustomPostStatusEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\FilterCustomPostStatusEnumTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\FilterCustomPostStatusEnumTypeResolver
     */
    protected static function getFilterCustomPostStatusEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\FilterCustomPostStatusEnumTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\EnumType\FilterCustomPostStatusEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostByOneofInputObjectTypeResolver
     */
    protected static function getCustomPostByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostPaginationInputObjectTypeResolver
     */
    protected static function getCustomPostPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostSortInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostSortInputObjectTypeResolver
     */
    protected static function getCustomPostSortInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostSortInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\CustomPostSortInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\RootCustomPostsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\RootCustomPostsFilterInputObjectTypeResolver
     */
    protected static function getRootCustomPostsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootCustomPostsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\RootCustomPostsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\RootPredefinedCustomPostsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\RootPredefinedCustomPostsFilterInputObjectTypeResolver
     */
    protected static function getRootPredefinedCustomPostsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootPredefinedCustomPostsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\InputObjectType\RootPredefinedCustomPostsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\InterfaceType\CustomPostInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\InterfaceType\CustomPostInterfaceTypeResolver
     */
    protected static function getCustomPostInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InterfaceType\\CustomPostInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\InterfaceType\CustomPostInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\ObjectType\GenericCustomPostObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPosts\TypeResolvers\ObjectType\GenericCustomPostObjectTypeResolver
     */
    protected static function getGenericCustomPostObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\ObjectType\\GenericCustomPostObjectTypeResolver'] = $instance = new \PoPCMSSchema\CustomPosts\TypeResolvers\ObjectType\GenericCustomPostObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\CustomPosts\TypeResolvers\UnionType\CustomPostUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\CustomPostsWP\Overrides\TypeResolvers\UnionType\CustomPostUnionTypeResolver
     */
    protected static function getCustomPostUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\UnionType\\CustomPostUnionTypeResolver'] = $instance = new \PoPCMSSchema\CustomPostsWP\Overrides\TypeResolvers\UnionType\CustomPostUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutationsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutationsWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet5Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutationsWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\MediaMutationsWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ComponentProcessors\MyMediaFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ComponentProcessors\MyMediaFilterInputContainerComponentProcessor
     */
    protected static function getMyMediaFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ComponentProcessors\\MyMediaFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\MediaMutations\ComponentProcessors\MyMediaFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\Hooks\MutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\Hooks\MutationResolverHookSet
     */
    protected static function getMutationResolverHookSet5Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\Hooks\\MutationResolverHookSet'] = $instance = new \PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\Hooks\MutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker6Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\SchemaHooks\AddCustomPostInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\SchemaHooks\AddCustomPostInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddCustomPostInputFieldsInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\SchemaHooks\\AddCustomPostInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\MediaMutations\ConditionalOnModule\CustomPostMutations\SchemaHooks\AddCustomPostInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider8Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\MediaMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaItemMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaItemMutationPayloadObjectTypeFieldResolver
     */
    protected static function getMediaItemMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaItemMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaItemMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getMediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver
     */
    protected static function getMediaObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getMediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\MediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver10Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\RootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\UserStateRootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\UserStateRootObjectTypeFieldResolver
     */
    protected static function getUserStateRootObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\UserStateRootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\MediaMutations\FieldResolvers\ObjectType\UserStateRootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet5Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\MediaMutations\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\CreateMediaItemBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\CreateMediaItemBulkOperationMutationResolver
     */
    protected static function getCreateMediaItemBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\CreateMediaItemBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\CreateMediaItemBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\CreateMediaItemMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\CreateMediaItemMutationResolver
     */
    protected static function getCreateMediaItemMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\CreateMediaItemMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\CreateMediaItemMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableCreateMediaItemBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableCreateMediaItemBulkOperationMutationResolver
     */
    protected static function getPayloadableCreateMediaItemBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableCreateMediaItemBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableCreateMediaItemBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableCreateMediaItemMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableCreateMediaItemMutationResolver
     */
    protected static function getPayloadableCreateMediaItemMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableCreateMediaItemMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableCreateMediaItemMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableUpdateMediaItemBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableUpdateMediaItemBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdateMediaItemBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableUpdateMediaItemBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableUpdateMediaItemBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableUpdateMediaItemMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableUpdateMediaItemMutationResolver
     */
    protected static function getPayloadableUpdateMediaItemMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\PayloadableUpdateMediaItemMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\PayloadableUpdateMediaItemMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\UpdateMediaItemBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\UpdateMediaItemBulkOperationMutationResolver
     */
    protected static function getUpdateMediaItemBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\UpdateMediaItemBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\UpdateMediaItemBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\MutationResolvers\UpdateMediaItemMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\MutationResolvers\UpdateMediaItemMutationResolver
     */
    protected static function getUpdateMediaItemMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\MutationResolvers\\UpdateMediaItemMutationResolver'] = $instance = new \PoPCMSSchema\MediaMutations\MutationResolvers\UpdateMediaItemMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker7Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker6Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker6Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\MediaMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\MediaItemDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\MediaItemDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getMediaItemDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\MediaItemDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\MediaItemDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getUserDoesNotExistErrorPayloadObjectTypeDataLoader2Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeDataLoader
     */
    protected static function getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeDataLoader
     */
    protected static function getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\ObjectType\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\ObjectType\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\MediaUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\MediaUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getMediaUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\UnionType\\MediaUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\MediaUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\RootCreateMediaItemMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\RootCreateMediaItemMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreateMediaItemMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreateMediaItemMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\RootCreateMediaItemMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\RootUpdateMediaItemMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\RootUpdateMediaItemMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdateMediaItemMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdateMediaItemMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\MediaMutations\RelationalTypeDataLoaders\UnionType\RootUpdateMediaItemMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\SchemaHooks\RemoveAuthorFilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\SchemaHooks\RemoveAuthorFilterInputHookSet
     */
    protected static function getRemoveAuthorFilterInputHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] = $instance = new \PoPCMSSchema\MediaMutations\SchemaHooks\RemoveAuthorFilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeAPIs\MediaTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutationsWP\TypeAPIs\MediaTypeMutationAPI
     */
    protected static function getMediaTypeMutationAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeAPIs\\MediaTypeMutationAPIInterface'] = $instance = new \PoPCMSSchema\MediaMutationsWP\TypeAPIs\MediaTypeMutationAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromContentInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromContentInputObjectTypeResolver
     */
    protected static function getCreateMediaItemFromContentInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromContentInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromContentInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromOneofInputObjectTypeResolver
     */
    protected static function getCreateMediaItemFromOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromURLInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromURLInputObjectTypeResolver
     */
    protected static function getCreateMediaItemFromURLInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromURLInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\CreateMediaItemFromURLInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\MediaUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\MediaUpdateInputObjectTypeResolver
     */
    protected static function getMediaUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\MediaUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\MediaUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootCreateMediaItemInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootCreateMediaItemInputObjectTypeResolver
     */
    protected static function getRootCreateMediaItemInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootCreateMediaItemInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootCreateMediaItemInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootMyMediaItemsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootMyMediaItemsFilterInputObjectTypeResolver
     */
    protected static function getRootMyMediaItemsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootMyMediaItemsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootMyMediaItemsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootUpdateMediaItemInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootUpdateMediaItemInputObjectTypeResolver
     */
    protected static function getRootUpdateMediaItemInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootUpdateMediaItemInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\InputObjectType\RootUpdateMediaItemInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\MediaItemDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\MediaItemDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getMediaItemDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaItemDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\MediaItemDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\MediaUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\MediaUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getMediaUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\MediaUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\RootCreateMediaItemMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\RootCreateMediaItemMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreateMediaItemMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootCreateMediaItemMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\RootCreateMediaItemMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\RootUpdateMediaItemMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\RootUpdateMediaItemMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdateMediaItemMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootUpdateMediaItemMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\RootUpdateMediaItemMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getUserDoesNotExistErrorPayloadObjectTypeResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolver
     */
    protected static function getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolver
     */
    protected static function getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\ObjectType\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\MediaUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\MediaUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getMediaUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\MediaUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\MediaUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\RootCreateMediaItemMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\RootCreateMediaItemMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreateMediaItemMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootCreateMediaItemMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\RootCreateMediaItemMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\RootUpdateMediaItemMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\RootUpdateMediaItemMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdateMediaItemMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootUpdateMediaItemMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\MediaMutations\TypeResolvers\UnionType\RootUpdateMediaItemMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor5Service($container)
    {
        $container->services['PoPCMSSchema\\Media\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\Media\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\ComponentProcessors\MediaFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\ComponentProcessors\MediaFilterInputContainerComponentProcessor
     */
    protected static function getMediaFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Media\\ComponentProcessors\\MediaFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Media\ComponentProcessors\MediaFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\ConditionalOnModule\Users\FieldResolvers\ObjectType\MediaUserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\ConditionalOnModule\Users\FieldResolvers\ObjectType\MediaUserObjectTypeFieldResolver
     */
    protected static function getMediaUserObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\MediaUserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Media\ConditionalOnModule\Users\FieldResolvers\ObjectType\MediaUserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet
     */
    protected static function getAddAuthorInputFieldsToCustomPostInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\EnumTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\EnumTypeHookSet
     */
    protected static function getEnumTypeHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\EnumTypeHookSet'] = $instance = new \PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\EnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\FilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\FilterInputHookSet
     */
    protected static function getFilterInputHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\FilterInputHookSet'] = $instance = new \PoPCMSSchema\Media\ConditionalOnModule\Users\SchemaHooks\FilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\ConditionalOnModule\Users\TypeAPIs\UserMediaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaWP\ConditionalOnModule\Users\TypeAPIs\UserMediaTypeAPI
     */
    protected static function getUserMediaTypeAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\TypeAPIs\\UserMediaTypeAPIInterface'] = new \PoPCMSSchema\MediaWP\ConditionalOnModule\Users\TypeAPIs\UserMediaTypeAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver
     */
    protected static function getMediaObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\Media\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Media\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver11Service($container)
    {
        $container->services['PoPCMSSchema\\Media\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Media\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\FilterInputs\MimeTypesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\FilterInputs\MimeTypesFilterInput
     */
    protected static function getMimeTypesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Media\\FilterInputs\\MimeTypesFilterInput'] = $instance = new \PoPCMSSchema\Media\FilterInputs\MimeTypesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\RelationalTypeDataLoaders\ObjectType\MediaObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\RelationalTypeDataLoaders\ObjectType\MediaObjectTypeDataLoader
     */
    protected static function getMediaObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Media\\RelationalTypeDataLoaders\\ObjectType\\MediaObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Media\RelationalTypeDataLoaders\ObjectType\MediaObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\TypeAPIs\MediaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\MediaWP\TypeAPIs\MediaTypeAPI
     */
    protected static function getMediaTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Media\\TypeAPIs\\MediaTypeAPIInterface'] = $instance = new \PoPCMSSchema\MediaWP\TypeAPIs\MediaTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\TypeResolvers\EnumType\MediaItemOrderByEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Media\Overrides\TypeResolvers\EnumType\MediaItemOrderByEnumTypeResolver
     */
    protected static function getMediaItemOrderByEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Media\\TypeResolvers\\EnumType\\MediaItemOrderByEnumTypeResolver'] = $instance = new \PoPWPSchema\Media\Overrides\TypeResolvers\EnumType\MediaItemOrderByEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\TypeResolvers\InputObjectType\MediaItemByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\TypeResolvers\InputObjectType\MediaItemByOneofInputObjectTypeResolver
     */
    protected static function getMediaItemByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Media\TypeResolvers\InputObjectType\MediaItemByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\TypeResolvers\InputObjectType\MediaItemSortInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\TypeResolvers\InputObjectType\MediaItemSortInputObjectTypeResolver
     */
    protected static function getMediaItemSortInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemSortInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Media\TypeResolvers\InputObjectType\MediaItemSortInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\TypeResolvers\InputObjectType\RootMediaItemPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\TypeResolvers\InputObjectType\RootMediaItemPaginationInputObjectTypeResolver
     */
    protected static function getRootMediaItemPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Media\TypeResolvers\InputObjectType\RootMediaItemPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\TypeResolvers\InputObjectType\RootMediaItemsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\TypeResolvers\InputObjectType\RootMediaItemsFilterInputObjectTypeResolver
     */
    protected static function getRootMediaItemsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Media\TypeResolvers\InputObjectType\RootMediaItemsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Media\TypeResolvers\ObjectType\MediaObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Media\TypeResolvers\ObjectType\MediaObjectTypeResolver
     */
    protected static function getMediaObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Media\\TypeResolvers\\ObjectType\\MediaObjectTypeResolver'] = $instance = new \PoPCMSSchema\Media\TypeResolvers\ObjectType\MediaObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\ComponentProcessors\MenuFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\ComponentProcessors\MenuFilterInputContainerComponentProcessor
     */
    protected static function getMenuFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\ComponentProcessors\\MenuFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Menus\ComponentProcessors\MenuFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\FieldResolvers\ObjectType\MenuItemObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\FieldResolvers\ObjectType\MenuItemObjectTypeFieldResolver
     */
    protected static function getMenuItemObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\MenuItemObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Menus\FieldResolvers\ObjectType\MenuItemObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\FieldResolvers\ObjectType\MenuObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\FieldResolvers\ObjectType\MenuObjectTypeFieldResolver
     */
    protected static function getMenuObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\MenuObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Menus\FieldResolvers\ObjectType\MenuObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Menus\Overrides\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver12Service($container)
    {
        $container->services['PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Menus\Overrides\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\RelationalTypeDataLoaders\ObjectType\MenuItemObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\RelationalTypeDataLoaders\ObjectType\MenuItemObjectTypeDataLoader
     */
    protected static function getMenuItemObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\RelationalTypeDataLoaders\\ObjectType\\MenuItemObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Menus\RelationalTypeDataLoaders\ObjectType\MenuItemObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\RelationalTypeDataLoaders\ObjectType\MenuObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\RelationalTypeDataLoaders\ObjectType\MenuObjectTypeDataLoader
     */
    protected static function getMenuObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\RelationalTypeDataLoaders\\ObjectType\\MenuObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Menus\RelationalTypeDataLoaders\ObjectType\MenuObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\RuntimeRegistries\MenuItemRuntimeRegistryInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\RuntimeRegistries\MenuItemRuntimeRegistry
     */
    protected static function getMenuItemRuntimeRegistryInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\Menus\\RuntimeRegistries\\MenuItemRuntimeRegistryInterface'] = new \PoPCMSSchema\Menus\RuntimeRegistries\MenuItemRuntimeRegistry();
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeAPIs\MenuTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\MenusWP\TypeAPIs\MenuTypeAPI
     */
    protected static function getMenuTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeAPIs\\MenuTypeAPIInterface'] = $instance = new \PoPCMSSchema\MenusWP\TypeAPIs\MenuTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeResolvers\EnumType\MenuOrderByEnumTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\TypeResolvers\EnumType\MenuOrderByEnumTypeResolver
     */
    protected static function getMenuOrderByEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeResolvers\\EnumType\\MenuOrderByEnumTypeResolver'] = $instance = new \PoPCMSSchema\Menus\TypeResolvers\EnumType\MenuOrderByEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeResolvers\InputObjectType\MenuByInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Menus\Overrides\TypeResolvers\InputObjectType\MenuByInputObjectTypeResolver
     */
    protected static function getMenuByInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuByInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Menus\Overrides\TypeResolvers\InputObjectType\MenuByInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeResolvers\InputObjectType\MenuSortInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\TypeResolvers\InputObjectType\MenuSortInputObjectTypeResolver
     */
    protected static function getMenuSortInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuSortInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Menus\TypeResolvers\InputObjectType\MenuSortInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeResolvers\InputObjectType\RootMenuPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\TypeResolvers\InputObjectType\RootMenuPaginationInputObjectTypeResolver
     */
    protected static function getRootMenuPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenuPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Menus\TypeResolvers\InputObjectType\RootMenuPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeResolvers\InputObjectType\RootMenusFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Menus\Overrides\TypeResolvers\InputObjectType\RootMenusFilterInputObjectTypeResolver
     */
    protected static function getRootMenusFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenusFilterInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Menus\Overrides\TypeResolvers\InputObjectType\RootMenusFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeResolvers\ObjectType\MenuItemObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\TypeResolvers\ObjectType\MenuItemObjectTypeResolver
     */
    protected static function getMenuItemObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuItemObjectTypeResolver'] = $instance = new \PoPCMSSchema\Menus\TypeResolvers\ObjectType\MenuItemObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Menus\TypeResolvers\ObjectType\MenuObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Menus\TypeResolvers\ObjectType\MenuObjectTypeResolver
     */
    protected static function getMenuObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuObjectTypeResolver'] = $instance = new \PoPCMSSchema\Menus\TypeResolvers\ObjectType\MenuObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Meta\FeedbackItemProviders\FeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\Meta\FeedbackItemProviders\FeedbackItemProvider
     */
    protected static function getFeedbackItemProvider2Service($container)
    {
        $container->services['PoPCMSSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider'] = $instance = new \PoPCMSSchema\Meta\FeedbackItemProviders\FeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Meta\FieldResolvers\InterfaceType\WithMetaInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Meta\FieldResolvers\InterfaceType\WithMetaInterfaceTypeFieldResolver
     */
    protected static function getWithMetaInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Meta\\FieldResolvers\\InterfaceType\\WithMetaInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\Meta\FieldResolvers\InterfaceType\WithMetaInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Meta\TypeResolvers\InterfaceType\WithMetaInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Meta\TypeResolvers\InterfaceType\WithMetaInterfaceTypeResolver
     */
    protected static function getWithMetaInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Meta\\TypeResolvers\\InterfaceType\\WithMetaInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\Meta\TypeResolvers\InterfaceType\WithMetaInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMediaMutations\ConditionalOnModule\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImagePageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMediaMutations\ConditionalOnModule\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImagePageObjectTypeFieldResolver
     */
    protected static function getWithFeaturedImagePageObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMediaMutations\\ConditionalOnModule\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImagePageObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMediaMutations\ConditionalOnModule\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImagePageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutationsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutationsWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet6Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutationsWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\PageMutationsWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\ComponentProcessors\PageMutationFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\ComponentProcessors\PageMutationFilterInputContainerComponentProcessor
     */
    protected static function getPageMutationFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\ComponentProcessors\\PageMutationFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\PageMutations\ComponentProcessors\PageMutationFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor
     */
    protected static function getFieldDataloadComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\PageMutations\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\ConditionalOnModule\CommentMutations\FieldResolvers\ObjectType\PageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\ConditionalOnModule\CommentMutations\FieldResolvers\ObjectType\PageObjectTypeFieldResolver
     */
    protected static function getPageObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\ConditionalOnModule\\CommentMutations\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\ConditionalOnModule\CommentMutations\FieldResolvers\ObjectType\PageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet
     */
    protected static function getRemoveAuthorFilterInputHookSet4Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] = $instance = new \PoPCMSSchema\PageMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider9Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\PageMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageMutationPayloadObjectTypeFieldResolver
     */
    protected static function getPageMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPageMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageObjectTypeFieldResolver
     */
    protected static function getPageObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\PageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver13Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver
     */
    protected static function getRootQueryableObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PageMutations\FieldResolvers\ObjectType\RootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet6Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\PageMutations\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\CreatePageBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\CreatePageBulkOperationMutationResolver
     */
    protected static function getCreatePageBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\CreatePageBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\CreatePageBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\CreatePageMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\CreatePageMutationResolver
     */
    protected static function getCreatePageMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\CreatePageMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\CreatePageMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\PayloadableCreatePageBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableCreatePageBulkOperationMutationResolver
     */
    protected static function getPayloadableCreatePageBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableCreatePageBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableCreatePageBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\PayloadableCreatePageMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableCreatePageMutationResolver
     */
    protected static function getPayloadableCreatePageMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableCreatePageMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableCreatePageMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\PayloadableUpdatePageBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableUpdatePageBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdatePageBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableUpdatePageBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableUpdatePageBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\PayloadableUpdatePageMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableUpdatePageMutationResolver
     */
    protected static function getPayloadableUpdatePageMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\PayloadableUpdatePageMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\PayloadableUpdatePageMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\UpdatePageBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\UpdatePageBulkOperationMutationResolver
     */
    protected static function getUpdatePageBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\UpdatePageBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\UpdatePageBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\MutationResolvers\UpdatePageMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\MutationResolvers\UpdatePageMutationResolver
     */
    protected static function getUpdatePageMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\MutationResolvers\\UpdatePageMutationResolver'] = $instance = new \PoPCMSSchema\PageMutations\MutationResolvers\UpdatePageMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker7Service($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PageMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\PageUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\PageUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPageUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\UnionType\\PageUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\PageUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\RootCreatePageMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\RootCreatePageMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreatePageMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePageMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\RootCreatePageMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePageMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePageMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdatePageMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePageMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PageMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePageMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\PageContentAsOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\PageContentAsOneofInputObjectTypeResolver
     */
    protected static function getPageContentAsOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageContentAsOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\PageContentAsOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\PageUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\PageUpdateInputObjectTypeResolver
     */
    protected static function getPageUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\PageUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootCreatePageInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootCreatePageInputObjectTypeResolver
     */
    protected static function getRootCreatePageInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootCreatePageInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootCreatePageInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootMyPagesFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootMyPagesFilterInputObjectTypeResolver
     */
    protected static function getRootMyPagesFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootMyPagesFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootMyPagesFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootUpdatePageInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootUpdatePageInputObjectTypeResolver
     */
    protected static function getRootUpdatePageInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootUpdatePageInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\InputObjectType\RootUpdatePageInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\PageUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\PageUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getPageUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\PageUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\PageUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\RootCreatePageMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\RootCreatePageMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreatePageMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootCreatePageMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\RootCreatePageMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\RootUpdatePageMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\RootUpdatePageMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdatePageMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootUpdatePageMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\ObjectType\RootUpdatePageMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\UnionType\PageUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\UnionType\PageUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPageUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\PageUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\UnionType\PageUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\UnionType\RootCreatePageMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\UnionType\RootCreatePageMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreatePageMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootCreatePageMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\UnionType\RootCreatePageMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PageMutations\TypeResolvers\UnionType\RootUpdatePageMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PageMutations\TypeResolvers\UnionType\RootUpdatePageMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdatePageMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootUpdatePageMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PageMutations\TypeResolvers\UnionType\RootUpdatePageMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PagesWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PagesWP\Hooks\RoutingStateHookSet
     */
    protected static function getRoutingStateHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\PagesWP\\Hooks\\RoutingStateHookSet'] = $instance = new \PoPCMSSchema\PagesWP\Hooks\RoutingStateHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PagesWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PagesWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet7Service($container)
    {
        $container->services['PoPCMSSchema\\PagesWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\PagesWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\ComponentProcessors\FieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\ComponentProcessors\FieldDataloadComponentProcessor
     */
    protected static function getFieldDataloadComponentProcessor2Service($container)
    {
        $container->services['PoPCMSSchema\\Pages\\ComponentProcessors\\FieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\Pages\ComponentProcessors\FieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\ComponentProcessors\PageFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\ComponentProcessors\PageFilterInputContainerComponentProcessor
     */
    protected static function getPageFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\ComponentProcessors\\PageFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Pages\ComponentProcessors\PageFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor3Service($container)
    {
        $container->services['PoPCMSSchema\\Pages\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoPCMSSchema\Pages\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\ConditionalOnModule\Comments\FieldResolvers\ObjectType\CommentablePageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\ConditionalOnModule\Comments\FieldResolvers\ObjectType\CommentablePageObjectTypeFieldResolver
     */
    protected static function getCommentablePageObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\ConditionalOnModule\\Comments\\FieldResolvers\\ObjectType\\CommentablePageObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Pages\ConditionalOnModule\Comments\FieldResolvers\ObjectType\CommentablePageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\ConditionalOnModule\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImagePageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\ConditionalOnModule\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImagePageObjectTypeFieldResolver
     */
    protected static function getWithFeaturedImagePageObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\Pages\\ConditionalOnModule\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImagePageObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Pages\ConditionalOnModule\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImagePageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\FieldResolvers\ObjectType\PageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\FieldResolvers\ObjectType\PageObjectTypeFieldResolver
     */
    protected static function getPageObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\Pages\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Pages\FieldResolvers\ObjectType\PageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\FieldResolvers\ObjectType\RootPageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\FieldResolvers\ObjectType\RootPageObjectTypeFieldResolver
     */
    protected static function getRootPageObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\FieldResolvers\\ObjectType\\RootPageObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Pages\FieldResolvers\ObjectType\RootPageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\Hooks\PageAddDefaultCustomPostTypeModuleConfigurationHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\Hooks\PageAddDefaultCustomPostTypeModuleConfigurationHookSet
     */
    protected static function getPageAddDefaultCustomPostTypeModuleConfigurationHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\Hooks\\PageAddDefaultCustomPostTypeModuleConfigurationHookSet'] = $instance = new \PoPCMSSchema\Pages\Hooks\PageAddDefaultCustomPostTypeModuleConfigurationHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\Hooks\VarsHookSet
     */
    protected static function getVarsHookSet4Service($container)
    {
        $container->services['PoPCMSSchema\\Pages\\Hooks\\VarsHookSet'] = $instance = new \PoPCMSSchema\Pages\Hooks\VarsHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet7Service($container)
    {
        $container->services['PoPCMSSchema\\Pages\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\Pages\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\ObjectTypeResolverPickers\PageCustomPostObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PagesWP\Overrides\ObjectTypeResolverPickers\PageCustomPostObjectTypeResolverPicker
     */
    protected static function getPageCustomPostObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\ObjectTypeResolverPickers\\PageCustomPostObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PagesWP\Overrides\ObjectTypeResolverPickers\PageCustomPostObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\RelationalTypeDataLoaders\ObjectType\PageObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\RelationalTypeDataLoaders\ObjectType\PageObjectTypeDataLoader
     */
    protected static function getPageObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\RelationalTypeDataLoaders\\ObjectType\\PageObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Pages\RelationalTypeDataLoaders\ObjectType\PageObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\State\AppStateProvider
     */
    protected static function getAppStateProvider7Service($container)
    {
        $container->services['PoPCMSSchema\\Pages\\State\\AppStateProvider'] = $instance = new \PoPCMSSchema\Pages\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\TypeAPIs\PageTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\PagesWP\TypeAPIs\PageTypeAPI
     */
    protected static function getPageTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\TypeAPIs\\PageTypeAPIInterface'] = $instance = new \PoPCMSSchema\PagesWP\TypeAPIs\PageTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PageByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PageByOneofInputObjectTypeResolver
     */
    protected static function getPageByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PageByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PageChildrenFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PageChildrenFilterInputObjectTypeResolver
     */
    protected static function getPageChildrenFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageChildrenFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PageChildrenFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PagePaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PagePaginationInputObjectTypeResolver
     */
    protected static function getPagePaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PagePaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\PagePaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\TypeResolvers\InputObjectType\RootPagesFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\RootPagesFilterInputObjectTypeResolver
     */
    protected static function getRootPagesFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\RootPagesFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Pages\TypeResolvers\InputObjectType\RootPagesFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Pages\TypeResolvers\ObjectType\PageObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Pages\TypeResolvers\ObjectType\PageObjectTypeResolver
     */
    protected static function getPageObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Pages\\TypeResolvers\\ObjectType\\PageObjectTypeResolver'] = $instance = new \PoPCMSSchema\Pages\TypeResolvers\ObjectType\PageObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoriesWP\Hooks\PostCategoryQueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoriesWP\Hooks\PostCategoryQueryHookSet
     */
    protected static function getPostCategoryQueryHookSetService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoriesWP\\Hooks\\PostCategoryQueryHookSet'] = $instance = new \PoPCMSSchema\PostCategoriesWP\Hooks\PostCategoryQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoriesWP\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoriesWP\Hooks\RoutingHookSet
     */
    protected static function getRoutingHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoriesWP\\Hooks\\RoutingHookSet'] = $instance = new \PoPCMSSchema\PostCategoriesWP\Hooks\RoutingHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor6Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\PostCategories\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\ComponentProcessors\PostCategoryFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\ComponentProcessors\PostCategoryFilterInputContainerComponentProcessor
     */
    protected static function getPostCategoryFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\ComponentProcessors\\PostCategoryFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\PostCategories\ComponentProcessors\PostCategoryFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentProcessors\CategoryPostFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentProcessors\CategoryPostFieldDataloadComponentProcessor
     */
    protected static function getCategoryPostFieldDataloadComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentProcessors\\CategoryPostFieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentProcessors\CategoryPostFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentProcessors\PostCategoryFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentProcessors\PostCategoryFieldDataloadComponentProcessor
     */
    protected static function getPostCategoryFieldDataloadComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentProcessors\\PostCategoryFieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentProcessors\PostCategoryFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor4Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoPCMSSchema\PostCategories\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\ChildPostCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\ChildPostCategoryObjectTypeFieldResolver
     */
    protected static function getChildPostCategoryObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\ChildPostCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\ChildPostCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\CustomPostListPostCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\CustomPostListPostCategoryObjectTypeFieldResolver
     */
    protected static function getCustomPostListPostCategoryObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\CustomPostListPostCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\CustomPostListPostCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostCategoryListObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostCategoryListObjectTypeFieldResolver
     */
    protected static function getPostCategoryListObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostCategoryListObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostCategoryListObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostCategoryObjectTypeFieldResolver
     */
    protected static function getPostCategoryObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostQueryableObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostQueryableObjectTypeFieldResolver
     */
    protected static function getPostQueryableObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostQueryableObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\PostQueryableObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\RootPostCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\RootPostCategoryObjectTypeFieldResolver
     */
    protected static function getRootPostCategoryObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\RootPostCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategories\FieldResolvers\ObjectType\RootPostCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\Hooks\ModelInstanceHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\Hooks\ModelInstanceHookSet
     */
    protected static function getModelInstanceHookSetService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\Hooks\\ModelInstanceHookSet'] = $instance = new \PoPCMSSchema\PostCategories\Hooks\ModelInstanceHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\ObjectTypeResolverPickers\CategoryUnionPostCategoryObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\ObjectTypeResolverPickers\CategoryUnionPostCategoryObjectTypeResolverPicker
     */
    protected static function getCategoryUnionPostCategoryObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\ObjectTypeResolverPickers\\CategoryUnionPostCategoryObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategories\ObjectTypeResolverPickers\CategoryUnionPostCategoryObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\RelationalTypeDataLoaders\ObjectType\PostCategoryObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\RelationalTypeDataLoaders\ObjectType\PostCategoryObjectTypeDataLoader
     */
    protected static function getPostCategoryObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\RelationalTypeDataLoaders\\ObjectType\\PostCategoryObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategories\RelationalTypeDataLoaders\ObjectType\PostCategoryObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\SchemaHooks\AddPostCategoryFilterInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\SchemaHooks\AddPostCategoryFilterInputObjectTypeHookSet
     */
    protected static function getAddPostCategoryFilterInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\SchemaHooks\\AddPostCategoryFilterInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\PostCategories\SchemaHooks\AddPostCategoryFilterInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\SchemaHooks\FilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\SchemaHooks\FilterInputHookSet
     */
    protected static function getFilterInputHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\SchemaHooks\\FilterInputHookSet'] = $instance = new \PoPCMSSchema\PostCategories\SchemaHooks\FilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\TypeAPIs\PostCategoryTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoriesWP\TypeAPIs\PostCategoryTypeAPI
     */
    protected static function getPostCategoryTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\TypeAPIs\\PostCategoryTypeAPIInterface'] = $instance = new \PoPCMSSchema\PostCategoriesWP\TypeAPIs\PostCategoryTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\TypeResolvers\EnumType\PostCategoryTaxonomyEnumStringScalarTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\TypeResolvers\EnumType\PostCategoryTaxonomyEnumStringScalarTypeResolver
     */
    protected static function getPostCategoryTaxonomyEnumStringScalarTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\EnumType\\PostCategoryTaxonomyEnumStringScalarTypeResolver'] = $instance = new \PoPCMSSchema\PostCategories\TypeResolvers\EnumType\PostCategoryTaxonomyEnumStringScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\PostCategoryByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\PostCategoryByOneofInputObjectTypeResolver
     */
    protected static function getPostCategoryByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostCategoryByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\PostCategoryByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\PostsFilterCustomPostsByCategoriesInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\PostsFilterCustomPostsByCategoriesInputObjectTypeResolver
     */
    protected static function getPostsFilterCustomPostsByCategoriesInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByCategoriesInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\PostsFilterCustomPostsByCategoriesInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\RootPostCategoriesFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\RootPostCategoriesFilterInputObjectTypeResolver
     */
    protected static function getRootPostCategoriesFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\RootPostCategoriesFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategories\TypeResolvers\InputObjectType\RootPostCategoriesFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategories\TypeResolvers\ObjectType\PostCategoryObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategories\TypeResolvers\ObjectType\PostCategoryObjectTypeResolver
     */
    protected static function getPostCategoryObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\ObjectType\\PostCategoryObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategories\TypeResolvers\ObjectType\PostCategoryObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryMutationPayloadObjectTypeFieldResolver
     */
    protected static function getPostCategoryMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryObjectTypeFieldResolver
     */
    protected static function getPostCategoryObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver
     */
    protected static function getPostMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver
     */
    protected static function getPostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\PostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver14Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootPostCategoryCRUDObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootPostCategoryCRUDObjectTypeFieldResolver
     */
    protected static function getRootPostCategoryCRUDObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootPostCategoryCRUDObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootPostCategoryCRUDObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\FieldResolvers\ObjectType\RootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\Hooks\MutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\Hooks\MutationResolverHookSet
     */
    protected static function getMutationResolverHookSet6Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\Hooks\\MutationResolverHookSet'] = $instance = new \PoPCMSSchema\PostCategoryMutations\Hooks\MutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\CreatePostCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\CreatePostCategoryTermBulkOperationMutationResolver
     */
    protected static function getCreatePostCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\CreatePostCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\CreatePostCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\CreatePostCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\CreatePostCategoryTermMutationResolver
     */
    protected static function getCreatePostCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\CreatePostCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\CreatePostCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\DeletePostCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\DeletePostCategoryTermBulkOperationMutationResolver
     */
    protected static function getDeletePostCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\DeletePostCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\DeletePostCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\DeletePostCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\DeletePostCategoryTermMutationResolver
     */
    protected static function getDeletePostCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\DeletePostCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\DeletePostCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableCreatePostCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableCreatePostCategoryTermBulkOperationMutationResolver
     */
    protected static function getPayloadableCreatePostCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableCreatePostCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableCreatePostCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableCreatePostCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableCreatePostCategoryTermMutationResolver
     */
    protected static function getPayloadableCreatePostCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableCreatePostCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableCreatePostCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableDeletePostCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableDeletePostCategoryTermBulkOperationMutationResolver
     */
    protected static function getPayloadableDeletePostCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableDeletePostCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableDeletePostCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableDeletePostCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableDeletePostCategoryTermMutationResolver
     */
    protected static function getPayloadableDeletePostCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableDeletePostCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableDeletePostCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnPostBulkOperationMutationResolver
     */
    protected static function getPayloadableSetCategoriesOnPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnPostMutationResolver
     */
    protected static function getPayloadableSetCategoriesOnPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableSetCategoriesOnPostMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableSetCategoriesOnPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableUpdatePostCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableUpdatePostCategoryTermBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdatePostCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableUpdatePostCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableUpdatePostCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableUpdatePostCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableUpdatePostCategoryTermMutationResolver
     */
    protected static function getPayloadableUpdatePostCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\PayloadableUpdatePostCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\PayloadableUpdatePostCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostBulkOperationMutationResolver
     */
    protected static function getSetCategoriesOnPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\SetCategoriesOnPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostMutationResolver
     */
    protected static function getSetCategoriesOnPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\SetCategoriesOnPostMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\SetCategoriesOnPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\UpdatePostCategoryTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\UpdatePostCategoryTermBulkOperationMutationResolver
     */
    protected static function getUpdatePostCategoryTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\UpdatePostCategoryTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\UpdatePostCategoryTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\MutationResolvers\UpdatePostCategoryTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\MutationResolvers\UpdatePostCategoryTermMutationResolver
     */
    protected static function getUpdatePostCategoryTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\MutationResolvers\\UpdatePostCategoryTermMutationResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\MutationResolvers\UpdatePostCategoryTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker8Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker7Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker5Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker5Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker
     */
    protected static function getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker8Service($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostCategoryMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostCategoryDeleteMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostCategoryDeleteMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPostCategoryDeleteMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\PostCategoryDeleteMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostCategoryDeleteMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostCategoryUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostCategoryUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPostCategoryUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\PostCategoryUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostCategoryUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostSetCategoriesMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostSetCategoriesMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPostSetCategoriesMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\PostSetCategoriesMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\PostSetCategoriesMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreatePostCategoryTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootDeletePostCategoryTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootSetCategoriesOnPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdatePostCategoryTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostCategoryMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\SchemaHooks\PostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\SchemaHooks\PostMutationResolverHookSet
     */
    protected static function getPostMutationResolverHookSetService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\SchemaHooks\\PostMutationResolverHookSet'] = $instance = new \PoPCMSSchema\PostCategoryMutations\SchemaHooks\PostMutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\PostCategoryTermUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\PostCategoryTermUpdateInputObjectTypeResolver
     */
    protected static function getPostCategoryTermUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostCategoryTermUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\PostCategoryTermUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\PostSetCategoriesInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\PostSetCategoriesInputObjectTypeResolver
     */
    protected static function getPostSetCategoriesInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostSetCategoriesInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\PostSetCategoriesInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootCreatePostCategoryTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootCreatePostCategoryTermInputObjectTypeResolver
     */
    protected static function getRootCreatePostCategoryTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreatePostCategoryTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootCreatePostCategoryTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootDeletePostCategoryTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootDeletePostCategoryTermInputObjectTypeResolver
     */
    protected static function getRootDeletePostCategoryTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeletePostCategoryTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootDeletePostCategoryTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootSetCategoriesOnPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootSetCategoriesOnPostInputObjectTypeResolver
     */
    protected static function getRootSetCategoriesOnPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootSetCategoriesOnPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootUpdatePostCategoryTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootUpdatePostCategoryTermInputObjectTypeResolver
     */
    protected static function getRootUpdatePostCategoryTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostCategoryTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\InputObjectType\RootUpdatePostCategoryTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostCategoryDeleteMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostCategoryDeleteMutationPayloadObjectTypeResolver
     */
    protected static function getPostCategoryDeleteMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryDeleteMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostCategoryDeleteMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostCategoryUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostCategoryUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getPostCategoryUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostCategoryUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostSetCategoriesMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostSetCategoriesMutationPayloadObjectTypeResolver
     */
    protected static function getPostSetCategoriesMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostSetCategoriesMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\PostSetCategoriesMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootCreatePostCategoryTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootCreatePostCategoryTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreatePostCategoryTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreatePostCategoryTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootCreatePostCategoryTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootDeletePostCategoryTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootDeletePostCategoryTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootDeletePostCategoryTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeletePostCategoryTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootDeletePostCategoryTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootSetCategoriesOnPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootSetCategoriesOnPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootSetCategoriesOnPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootSetCategoriesOnPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootUpdatePostCategoryTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootUpdatePostCategoryTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdatePostCategoryTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdatePostCategoryTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\ObjectType\RootUpdatePostCategoryTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostCategoryDeleteMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostCategoryDeleteMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPostCategoryDeleteMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryDeleteMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostCategoryDeleteMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostCategoryUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostCategoryUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPostCategoryUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostCategoryUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostSetCategoriesMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostSetCategoriesMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPostSetCategoriesMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostSetCategoriesMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\PostSetCategoriesMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostCategoryMutations\TypeResolvers\UnionType\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMediaMutations\ConditionalOnModule\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImagePostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMediaMutations\ConditionalOnModule\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImagePostObjectTypeFieldResolver
     */
    protected static function getWithFeaturedImagePostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMediaMutations\\ConditionalOnModule\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImagePostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMediaMutations\ConditionalOnModule\CustomPostMediaMutations\FieldResolvers\ObjectType\WithFeaturedImagePostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\ComponentProcessors\PostMutationFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\ComponentProcessors\PostMutationFilterInputContainerComponentProcessor
     */
    protected static function getPostMutationFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\ComponentProcessors\\PostMutationFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\PostMutations\ComponentProcessors\PostMutationFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor
     */
    protected static function getFieldDataloadComponentProcessor3Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\PostMutations\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\ConditionalOnModule\CommentMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\ConditionalOnModule\CommentMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver
     */
    protected static function getPostObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\ConditionalOnModule\\CommentMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\ConditionalOnModule\CommentMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet
     */
    protected static function getRemoveAuthorFilterInputHookSet5Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] = $instance = new \PoPCMSSchema\PostMutations\ConditionalOnModule\Users\SchemaHooks\RemoveAuthorFilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver
     */
    protected static function getPostMutationPayloadObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver
     */
    protected static function getPostObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\PostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver15Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver
     */
    protected static function getRootQueryableObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootQueryableObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostMutations\FieldResolvers\ObjectType\RootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\CreatePostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\CreatePostBulkOperationMutationResolver
     */
    protected static function getCreatePostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\CreatePostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\CreatePostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\CreatePostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\CreatePostMutationResolver
     */
    protected static function getCreatePostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\CreatePostMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\CreatePostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\PayloadableCreatePostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableCreatePostBulkOperationMutationResolver
     */
    protected static function getPayloadableCreatePostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableCreatePostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableCreatePostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\PayloadableCreatePostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableCreatePostMutationResolver
     */
    protected static function getPayloadableCreatePostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableCreatePostMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableCreatePostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\PayloadableUpdatePostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableUpdatePostBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdatePostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableUpdatePostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableUpdatePostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\PayloadableUpdatePostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableUpdatePostMutationResolver
     */
    protected static function getPayloadableUpdatePostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\PayloadableUpdatePostMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\PayloadableUpdatePostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\UpdatePostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\UpdatePostBulkOperationMutationResolver
     */
    protected static function getUpdatePostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\UpdatePostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\UpdatePostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\MutationResolvers\UpdatePostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\MutationResolvers\UpdatePostMutationResolver
     */
    protected static function getUpdatePostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\MutationResolvers\\UpdatePostMutationResolver'] = $instance = new \PoPCMSSchema\PostMutations\MutationResolvers\UpdatePostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\PostUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\PostUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPostUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\RelationalTypeDataLoaders\\UnionType\\PostUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\PostUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreatePostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdatePostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\PostContentAsOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\PostContentAsOneofInputObjectTypeResolver
     */
    protected static function getPostContentAsOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostContentAsOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\PostContentAsOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\PostUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\PostUpdateInputObjectTypeResolver
     */
    protected static function getPostUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\PostUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootCreatePostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootCreatePostInputObjectTypeResolver
     */
    protected static function getRootCreatePostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootCreatePostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootCreatePostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootMyPostsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootMyPostsFilterInputObjectTypeResolver
     */
    protected static function getRootMyPostsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootMyPostsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootMyPostsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootUpdatePostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootUpdatePostInputObjectTypeResolver
     */
    protected static function getRootUpdatePostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\InputObjectType\RootUpdatePostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\PostUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\PostUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getPostUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\PostUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\PostUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\RootCreatePostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\RootCreatePostMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreatePostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootCreatePostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\RootCreatePostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\RootUpdatePostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\RootUpdatePostMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdatePostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootUpdatePostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\ObjectType\RootUpdatePostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\UnionType\PostUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\UnionType\PostUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPostUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\PostUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\UnionType\PostUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\UnionType\RootCreatePostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\UnionType\RootCreatePostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreatePostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootCreatePostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\UnionType\RootCreatePostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostMutations\TypeResolvers\UnionType\RootUpdatePostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostMutations\TypeResolvers\UnionType\RootUpdatePostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdatePostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootUpdatePostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostMutations\TypeResolvers\UnionType\RootUpdatePostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver
     */
    protected static function getPostMutationPayloadObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver
     */
    protected static function getPostObjectTypeFieldResolver4Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagMutationPayloadObjectTypeFieldResolver
     */
    protected static function getPostTagMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagObjectTypeFieldResolver
     */
    protected static function getPostTagObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getPostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\PostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver16Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootPostTagCRUDObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootPostTagCRUDObjectTypeFieldResolver
     */
    protected static function getRootPostTagCRUDObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootPostTagCRUDObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootPostTagCRUDObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\FieldResolvers\ObjectType\RootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\Hooks\MutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\Hooks\MutationResolverHookSet
     */
    protected static function getMutationResolverHookSet7Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\Hooks\\MutationResolverHookSet'] = $instance = new \PoPCMSSchema\PostTagMutations\Hooks\MutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\CreatePostTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\CreatePostTagTermBulkOperationMutationResolver
     */
    protected static function getCreatePostTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\CreatePostTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\CreatePostTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\CreatePostTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\CreatePostTagTermMutationResolver
     */
    protected static function getCreatePostTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\CreatePostTagTermMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\CreatePostTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\DeletePostTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\DeletePostTagTermBulkOperationMutationResolver
     */
    protected static function getDeletePostTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\DeletePostTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\DeletePostTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\DeletePostTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\DeletePostTagTermMutationResolver
     */
    protected static function getDeletePostTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\DeletePostTagTermMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\DeletePostTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableCreatePostTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableCreatePostTagTermBulkOperationMutationResolver
     */
    protected static function getPayloadableCreatePostTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableCreatePostTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableCreatePostTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableCreatePostTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableCreatePostTagTermMutationResolver
     */
    protected static function getPayloadableCreatePostTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableCreatePostTagTermMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableCreatePostTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableDeletePostTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableDeletePostTagTermBulkOperationMutationResolver
     */
    protected static function getPayloadableDeletePostTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableDeletePostTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableDeletePostTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableDeletePostTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableDeletePostTagTermMutationResolver
     */
    protected static function getPayloadableDeletePostTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableDeletePostTagTermMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableDeletePostTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableSetTagsOnPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableSetTagsOnPostBulkOperationMutationResolver
     */
    protected static function getPayloadableSetTagsOnPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableSetTagsOnPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableSetTagsOnPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableSetTagsOnPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableSetTagsOnPostMutationResolver
     */
    protected static function getPayloadableSetTagsOnPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableSetTagsOnPostMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableSetTagsOnPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableUpdatePostTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableUpdatePostTagTermBulkOperationMutationResolver
     */
    protected static function getPayloadableUpdatePostTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableUpdatePostTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableUpdatePostTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableUpdatePostTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableUpdatePostTagTermMutationResolver
     */
    protected static function getPayloadableUpdatePostTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\PayloadableUpdatePostTagTermMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\PayloadableUpdatePostTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\SetTagsOnPostBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\SetTagsOnPostBulkOperationMutationResolver
     */
    protected static function getSetTagsOnPostBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\SetTagsOnPostBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\SetTagsOnPostBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\SetTagsOnPostMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\SetTagsOnPostMutationResolver
     */
    protected static function getSetTagsOnPostMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\SetTagsOnPostMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\SetTagsOnPostMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\UpdatePostTagTermBulkOperationMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\UpdatePostTagTermBulkOperationMutationResolver
     */
    protected static function getUpdatePostTagTermBulkOperationMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\UpdatePostTagTermBulkOperationMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\UpdatePostTagTermBulkOperationMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\MutationResolvers\UpdatePostTagTermMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\MutationResolvers\UpdatePostTagTermMutationResolver
     */
    protected static function getUpdatePostTagTermMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\MutationResolvers\\UpdatePostTagTermMutationResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\MutationResolvers\UpdatePostTagTermMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker9Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker8Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker6Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker6Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker
     */
    protected static function getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker4Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker9Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostSetTagsMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostSetTagsMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPostSetTagsMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\PostSetTagsMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostSetTagsMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostTagDeleteMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostTagDeleteMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPostTagDeleteMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\PostTagDeleteMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostTagDeleteMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostTagUpdateMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostTagUpdateMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getPostTagUpdateMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\PostTagUpdateMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\PostTagUpdateMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostTagTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostTagTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootCreatePostTagTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootCreatePostTagTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootCreatePostTagTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootDeletePostTagTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootDeletePostTagTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootDeletePostTagTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootDeletePostTagTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootDeletePostTagTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootSetTagsOnPostMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootSetTagsOnPostMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootSetTagsOnPostMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootSetTagsOnPostMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootSetTagsOnPostMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostTagTermMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostTagTermMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootUpdatePostTagTermMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\RelationalTypeDataLoaders\\UnionType\\RootUpdatePostTagTermMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTagMutations\RelationalTypeDataLoaders\UnionType\RootUpdatePostTagTermMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\SchemaHooks\PostMutationResolverHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\SchemaHooks\PostMutationResolverHookSet
     */
    protected static function getPostMutationResolverHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\SchemaHooks\\PostMutationResolverHookSet'] = $instance = new \PoPCMSSchema\PostTagMutations\SchemaHooks\PostMutationResolverHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\PostSetTagsInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\PostSetTagsInputObjectTypeResolver
     */
    protected static function getPostSetTagsInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostSetTagsInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\PostSetTagsInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\PostTagTermUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\PostTagTermUpdateInputObjectTypeResolver
     */
    protected static function getPostTagTermUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostTagTermUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\PostTagTermUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootCreatePostTagTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootCreatePostTagTermInputObjectTypeResolver
     */
    protected static function getRootCreatePostTagTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootCreatePostTagTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootCreatePostTagTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootDeletePostTagTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootDeletePostTagTermInputObjectTypeResolver
     */
    protected static function getRootDeletePostTagTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootDeletePostTagTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootDeletePostTagTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootSetTagsOnPostInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootSetTagsOnPostInputObjectTypeResolver
     */
    protected static function getRootSetTagsOnPostInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnPostInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootSetTagsOnPostInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootUpdatePostTagTermInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootUpdatePostTagTermInputObjectTypeResolver
     */
    protected static function getRootUpdatePostTagTermInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostTagTermInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\InputObjectType\RootUpdatePostTagTermInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostSetTagsMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostSetTagsMutationPayloadObjectTypeResolver
     */
    protected static function getPostSetTagsMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostSetTagsMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostSetTagsMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostTagDeleteMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostTagDeleteMutationPayloadObjectTypeResolver
     */
    protected static function getPostTagDeleteMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagDeleteMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostTagDeleteMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostTagUpdateMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostTagUpdateMutationPayloadObjectTypeResolver
     */
    protected static function getPostTagUpdateMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagUpdateMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\PostTagUpdateMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootCreatePostTagTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootCreatePostTagTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootCreatePostTagTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootCreatePostTagTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootCreatePostTagTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootDeletePostTagTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootDeletePostTagTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootDeletePostTagTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootDeletePostTagTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootDeletePostTagTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootSetTagsOnPostMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootSetTagsOnPostMutationPayloadObjectTypeResolver
     */
    protected static function getRootSetTagsOnPostMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnPostMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootSetTagsOnPostMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootUpdatePostTagTermMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootUpdatePostTagTermMutationPayloadObjectTypeResolver
     */
    protected static function getRootUpdatePostTagTermMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootUpdatePostTagTermMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\ObjectType\RootUpdatePostTagTermMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostSetTagsMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostSetTagsMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPostSetTagsMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostSetTagsMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostSetTagsMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostTagDeleteMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostTagDeleteMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPostTagDeleteMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagDeleteMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostTagDeleteMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostTagUpdateMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostTagUpdateMutationErrorPayloadUnionTypeResolver
     */
    protected static function getPostTagUpdateMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagUpdateMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\PostTagUpdateMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootCreatePostTagTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootCreatePostTagTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootCreatePostTagTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootCreatePostTagTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootCreatePostTagTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootDeletePostTagTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootDeletePostTagTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootDeletePostTagTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootDeletePostTagTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootDeletePostTagTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootSetTagsOnPostMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootSetTagsOnPostMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootSetTagsOnPostMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnPostMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootSetTagsOnPostMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootUpdatePostTagTermMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootUpdatePostTagTermMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootUpdatePostTagTermMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootUpdatePostTagTermMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\PostTagMutations\TypeResolvers\UnionType\RootUpdatePostTagTermMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagsWP\Hooks\PostTagQueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagsWP\Hooks\PostTagQueryHookSet
     */
    protected static function getPostTagQueryHookSetService($container)
    {
        $container->services['PoPCMSSchema\\PostTagsWP\\Hooks\\PostTagQueryHookSet'] = $instance = new \PoPCMSSchema\PostTagsWP\Hooks\PostTagQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTagsWP\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagsWP\Hooks\RoutingHookSet
     */
    protected static function getRoutingHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\PostTagsWP\\Hooks\\RoutingHookSet'] = $instance = new \PoPCMSSchema\PostTagsWP\Hooks\RoutingHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor7Service($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\PostTags\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\ComponentProcessors\PostTagFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\ComponentProcessors\PostTagFilterInputContainerComponentProcessor
     */
    protected static function getPostTagFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\ComponentProcessors\\PostTagFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\PostTags\ComponentProcessors\PostTagFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentProcessors\PostTagFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentProcessors\PostTagFieldDataloadComponentProcessor
     */
    protected static function getPostTagFieldDataloadComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentProcessors\\PostTagFieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentProcessors\PostTagFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentProcessors\TagPostFieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentProcessors\TagPostFieldDataloadComponentProcessor
     */
    protected static function getTagPostFieldDataloadComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentProcessors\\TagPostFieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentProcessors\TagPostFieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor5Service($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoPCMSSchema\PostTags\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\FieldResolvers\ObjectType\CustomPostListPostTagObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\CustomPostListPostTagObjectTypeFieldResolver
     */
    protected static function getCustomPostListPostTagObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\CustomPostListPostTagObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\CustomPostListPostTagObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostQueryableObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostQueryableObjectTypeFieldResolver
     */
    protected static function getPostQueryableObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostQueryableObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostQueryableObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostTagListObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostTagListObjectTypeFieldResolver
     */
    protected static function getPostTagListObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostTagListObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostTagListObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostTagObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostTagObjectTypeFieldResolver
     */
    protected static function getPostTagObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostTagObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\PostTagObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\FieldResolvers\ObjectType\RootPostTagObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\RootPostTagObjectTypeFieldResolver
     */
    protected static function getRootPostTagObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\RootPostTagObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\PostTags\FieldResolvers\ObjectType\RootPostTagObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\ObjectTypeResolverPickers\TagUnionPostTagObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\ObjectTypeResolverPickers\TagUnionPostTagObjectTypeResolverPicker
     */
    protected static function getTagUnionPostTagObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\ObjectTypeResolverPickers\\TagUnionPostTagObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostTags\ObjectTypeResolverPickers\TagUnionPostTagObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\RelationalTypeDataLoaders\ObjectType\PostTagObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\RelationalTypeDataLoaders\ObjectType\PostTagObjectTypeDataLoader
     */
    protected static function getPostTagObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\RelationalTypeDataLoaders\\ObjectType\\PostTagObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\PostTags\RelationalTypeDataLoaders\ObjectType\PostTagObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\SchemaHooks\AddPostTagFilterInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\SchemaHooks\AddPostTagFilterInputObjectTypeHookSet
     */
    protected static function getAddPostTagFilterInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\SchemaHooks\\AddPostTagFilterInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\PostTags\SchemaHooks\AddPostTagFilterInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\SchemaHooks\FilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\SchemaHooks\FilterInputHookSet
     */
    protected static function getFilterInputHookSet4Service($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\SchemaHooks\\FilterInputHookSet'] = $instance = new \PoPCMSSchema\PostTags\SchemaHooks\FilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\TypeAPIs\PostTagTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTagsWP\TypeAPIs\PostTagTypeAPI
     */
    protected static function getPostTagTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\TypeAPIs\\PostTagTypeAPIInterface'] = $instance = new \PoPCMSSchema\PostTagsWP\TypeAPIs\PostTagTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\TypeResolvers\EnumType\PostTagTaxonomyEnumStringScalarTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\TypeResolvers\EnumType\PostTagTaxonomyEnumStringScalarTypeResolver
     */
    protected static function getPostTagTaxonomyEnumStringScalarTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\EnumType\\PostTagTaxonomyEnumStringScalarTypeResolver'] = $instance = new \PoPCMSSchema\PostTags\TypeResolvers\EnumType\PostTagTaxonomyEnumStringScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\PostTagByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\PostTagByOneofInputObjectTypeResolver
     */
    protected static function getPostTagByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostTagByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\PostTagByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\PostsFilterCustomPostsByTagsInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\PostsFilterCustomPostsByTagsInputObjectTypeResolver
     */
    protected static function getPostsFilterCustomPostsByTagsInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByTagsInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\PostsFilterCustomPostsByTagsInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\RootPostTagsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\RootPostTagsFilterInputObjectTypeResolver
     */
    protected static function getRootPostTagsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\RootPostTagsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTags\TypeResolvers\InputObjectType\RootPostTagsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostTags\TypeResolvers\ObjectType\PostTagObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\PostTags\TypeResolvers\ObjectType\PostTagObjectTypeResolver
     */
    protected static function getPostTagObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\ObjectType\\PostTagObjectTypeResolver'] = $instance = new \PoPCMSSchema\PostTags\TypeResolvers\ObjectType\PostTagObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\PostsWP\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\PostsWP\Hooks\RoutingHookSet
     */
    protected static function getRoutingHookSet4Service($container)
    {
        $container->services['PoPCMSSchema\\PostsWP\\Hooks\\RoutingHookSet'] = $instance = new \PoPCMSSchema\PostsWP\Hooks\RoutingHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ComponentProcessors\PostFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ComponentProcessors\PostFilterInputContainerComponentProcessor
     */
    protected static function getPostFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ComponentProcessors\\PostFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Posts\ComponentProcessors\PostFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor
     */
    protected static function getFieldDataloadComponentProcessor4Service($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\Posts\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor6Service($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoPCMSSchema\Posts\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ConditionalOnModule\Comments\FieldResolvers\ObjectType\CommentablePostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ConditionalOnModule\Comments\FieldResolvers\ObjectType\CommentablePostObjectTypeFieldResolver
     */
    protected static function getCommentablePostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\Comments\\FieldResolvers\\ObjectType\\CommentablePostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Posts\ConditionalOnModule\Comments\FieldResolvers\ObjectType\CommentablePostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ConditionalOnModule\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImagePostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ConditionalOnModule\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImagePostObjectTypeFieldResolver
     */
    protected static function getWithFeaturedImagePostObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImagePostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Posts\ConditionalOnModule\CustomPostMedia\FieldResolvers\ObjectType\WithFeaturedImagePostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ConditionalOnModule\Users\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ConditionalOnModule\Users\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor
     */
    protected static function getFieldDataloadComponentProcessor5Service($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\Posts\ConditionalOnModule\Users\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ConditionalOnModule\Users\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ConditionalOnModule\Users\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor7Service($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoPCMSSchema\Posts\ConditionalOnModule\Users\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ConditionalOnModule\Users\FieldResolvers\ObjectType\PostUserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\ConditionalOnModule\Users\FieldResolvers\ObjectType\PostUserObjectTypeFieldResolver
     */
    protected static function getPostUserObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\PostUserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Posts\ConditionalOnModule\Users\FieldResolvers\ObjectType\PostUserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\FieldResolvers\ObjectType\RootPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\FieldResolvers\ObjectType\RootPostObjectTypeFieldResolver
     */
    protected static function getRootPostObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\FieldResolvers\\ObjectType\\RootPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Posts\FieldResolvers\ObjectType\RootPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\Hooks\PostAddDefaultCustomPostTypeModuleConfigurationHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\Hooks\PostAddDefaultCustomPostTypeModuleConfigurationHookSet
     */
    protected static function getPostAddDefaultCustomPostTypeModuleConfigurationHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\Hooks\\PostAddDefaultCustomPostTypeModuleConfigurationHookSet'] = $instance = new \PoPCMSSchema\Posts\Hooks\PostAddDefaultCustomPostTypeModuleConfigurationHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\ObjectTypeResolverPickers\PostCustomPostObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\PostsWP\Overrides\ObjectTypeResolverPickers\PostCustomPostObjectTypeResolverPicker
     */
    protected static function getPostCustomPostObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\ObjectTypeResolverPickers\\PostCustomPostObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\PostsWP\Overrides\ObjectTypeResolverPickers\PostCustomPostObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\RelationalTypeDataLoaders\ObjectType\PostObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\RelationalTypeDataLoaders\ObjectType\PostObjectTypeDataLoader
     */
    protected static function getPostObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\RelationalTypeDataLoaders\\ObjectType\\PostObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Posts\RelationalTypeDataLoaders\ObjectType\PostObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\TypeAPIs\PostTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\PostsWP\TypeAPIs\PostTypeAPI
     */
    protected static function getPostTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\TypeAPIs\\PostTypeAPIInterface'] = $instance = new \PoPCMSSchema\PostsWP\TypeAPIs\PostTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\TypeResolvers\InputObjectType\PostByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\TypeResolvers\InputObjectType\PostByOneofInputObjectTypeResolver
     */
    protected static function getPostByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Posts\TypeResolvers\InputObjectType\PostByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\TypeResolvers\InputObjectType\PostPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\TypeResolvers\InputObjectType\PostPaginationInputObjectTypeResolver
     */
    protected static function getPostPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Posts\TypeResolvers\InputObjectType\PostPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\TypeResolvers\InputObjectType\RootPostsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\TypeResolvers\InputObjectType\RootPostsFilterInputObjectTypeResolver
     */
    protected static function getRootPostsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\RootPostsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Posts\TypeResolvers\InputObjectType\RootPostsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Posts\TypeResolvers\ObjectType\PostObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Posts\TypeResolvers\ObjectType\PostObjectTypeResolver
     */
    protected static function getPostObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Posts\\TypeResolvers\\ObjectType\\PostObjectTypeResolver'] = $instance = new \PoPCMSSchema\Posts\TypeResolvers\ObjectType\PostObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\QueriedObject\FieldResolvers\InterfaceType\QueryableInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\QueriedObject\FieldResolvers\InterfaceType\QueryableInterfaceTypeFieldResolver
     */
    protected static function getQueryableInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\QueriedObject\\FieldResolvers\\InterfaceType\\QueryableInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\QueriedObject\FieldResolvers\InterfaceType\QueryableInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\QueriedObject\Routing\CMSRoutingStateServiceInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\QueriedObjectWP\Routing\CMSRoutingStateService
     */
    protected static function getCMSRoutingStateServiceInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\QueriedObject\\Routing\\CMSRoutingStateServiceInterface'] = new \PoPCMSSchema\QueriedObjectWP\Routing\CMSRoutingStateService();
    }

    /**
     * Gets the public 'PoPCMSSchema\QueriedObject\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\QueriedObject\State\AppStateProvider
     */
    protected static function getAppStateProvider8Service($container)
    {
        $container->services['PoPCMSSchema\\QueriedObject\\State\\AppStateProvider'] = $instance = new \PoPCMSSchema\QueriedObject\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\QueriedObject\TypeResolvers\InterfaceType\QueryableInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\QueriedObject\TypeResolvers\InterfaceType\QueryableInterfaceTypeResolver
     */
    protected static function getQueryableInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\QueriedObject\\TypeResolvers\\InterfaceType\\QueryableInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\QueriedObject\TypeResolvers\InterfaceType\QueryableInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommonsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommonsWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet8Service($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommonsWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\SchemaCommonsWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\CMS\CMSHelperServiceInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\CMS\CMSHelperService
     */
    protected static function getCMSHelperServiceInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\CMS\\CMSHelperServiceInterface'] = $instance = new \PoPCMSSchema\SchemaCommons\CMS\CMSHelperService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\CMS\CMSServiceInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommonsWP\CMS\CMSService
     */
    protected static function getCMSServiceInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\SchemaCommons\\CMS\\CMSServiceInterface'] = new \PoPCMSSchema\SchemaCommonsWP\CMS\CMSService();
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\ComponentProcessors\CommonFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\ComponentProcessors\CommonFilterInputContainerComponentProcessor
     */
    protected static function getCommonFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\ComponentProcessors\\CommonFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\SchemaCommons\ComponentProcessors\CommonFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\ComponentProcessors\FormInputs\CommonFilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\ComponentProcessors\FormInputs\CommonFilterInputComponentProcessor
     */
    protected static function getCommonFilterInputComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\ComponentProcessors\\FormInputs\\CommonFilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\SchemaCommons\ComponentProcessors\FormInputs\CommonFilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FeedbackItemProviders\FeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FeedbackItemProviders\FeedbackItemProvider
     */
    protected static function getFeedbackItemProvider3Service($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FeedbackItemProviders\\FeedbackItemProvider'] = $instance = new \PoPCMSSchema\SchemaCommons\FeedbackItemProviders\FeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\DatesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\DatesFilterInput
     */
    protected static function getDatesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\DatesFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\DatesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeFilterInput
     */
    protected static function getExcludeFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\ExcludeFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeIDsFilterInput
     */
    protected static function getExcludeIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\ExcludeIDsFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeParentIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeParentIDsFilterInput
     */
    protected static function getExcludeParentIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\ExcludeParentIDsFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\ExcludeParentIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\FormatFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\FormatFilterInput
     */
    protected static function getFormatFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\FormatFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\FormatFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\GMTFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\GMTFilterInput
     */
    protected static function getGMTFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\GMTFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\GMTFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\IncludeFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\IncludeFilterInput
     */
    protected static function getIncludeFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\IncludeFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\IncludeFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\LimitFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\LimitFilterInput
     */
    protected static function getLimitFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\LimitFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\LimitFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\OffsetFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\OffsetFilterInput
     */
    protected static function getOffsetFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\OffsetFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\OffsetFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\OrderByFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\OrderByFilterInput
     */
    protected static function getOrderByFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\OrderByFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\OrderByFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\OrderFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\OrderFilterInput
     */
    protected static function getOrderFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\OrderFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\OrderFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\ParentIDFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\ParentIDFilterInput
     */
    protected static function getParentIDFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\ParentIDFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\ParentIDFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\ParentIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\ParentIDsFilterInput
     */
    protected static function getParentIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\ParentIDsFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\ParentIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\PathOrPathsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\PathOrPathsFilterInput
     */
    protected static function getPathOrPathsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\PathOrPathsFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\PathOrPathsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\SearchFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\SearchFilterInput
     */
    protected static function getSearchFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\SearchFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\SearchFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\SlugFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\SlugFilterInput
     */
    protected static function getSlugFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\SlugFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\SlugFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\SlugsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\SlugsFilterInput
     */
    protected static function getSlugsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\SlugsFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\SlugsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\FilterInputs\SortFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\FilterInputs\SortFilterInput
     */
    protected static function getSortFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\FilterInputs\\SortFilterInput'] = $instance = new \PoPCMSSchema\SchemaCommons\FilterInputs\SortFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\Formatters\DateFormatterInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommonsWP\Formatters\DateFormatter
     */
    protected static function getDateFormatterInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\SchemaCommons\\Formatters\\DateFormatterInterface'] = new \PoPCMSSchema\SchemaCommonsWP\Formatters\DateFormatter();
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\Hooks\RoutingHookSet
     */
    protected static function getRoutingHookSet5Service($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\Hooks\\RoutingHookSet'] = $instance = new \PoPCMSSchema\SchemaCommons\Hooks\RoutingHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet8Service($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\SchemaCommons\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\TypeResolvers\EnumType\OrderEnumTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\TypeResolvers\EnumType\OrderEnumTypeResolver
     */
    protected static function getOrderEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OrderEnumTypeResolver'] = $instance = new \PoPCMSSchema\SchemaCommons\TypeResolvers\EnumType\OrderEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\DateQueryInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\SchemaCommons\Overrides\TypeResolvers\InputObjectType\DateQueryInputObjectTypeResolver
     */
    protected static function getDateQueryInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\DateQueryInputObjectTypeResolver'] = $instance = new \PoPWPSchema\SchemaCommons\Overrides\TypeResolvers\InputObjectType\DateQueryInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\MutationPayloadObjectsInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\MutationPayloadObjectsInputObjectTypeResolver
     */
    protected static function getMutationPayloadObjectsInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\MutationPayloadObjectsInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\MutationPayloadObjectsInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\PaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\PaginationInputObjectTypeResolver
     */
    protected static function getPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\PaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\PaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\SortInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\SortInputObjectTypeResolver
     */
    protected static function getSortInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\SortInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\SchemaCommons\TypeResolvers\InputObjectType\SortInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Settings\FeedbackItemProviders\FeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\Settings\FeedbackItemProviders\FeedbackItemProvider
     */
    protected static function getFeedbackItemProvider4Service($container)
    {
        $container->services['PoPCMSSchema\\Settings\\FeedbackItemProviders\\FeedbackItemProvider'] = $instance = new \PoPCMSSchema\Settings\FeedbackItemProviders\FeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Settings\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Settings\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver17Service($container)
    {
        $container->services['PoPCMSSchema\\Settings\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Settings\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Settings\TypeAPIs\SettingsTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\SettingsWP\TypeAPIs\SettingsTypeAPI
     */
    protected static function getSettingsTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Settings\\TypeAPIs\\SettingsTypeAPIInterface'] = $instance = new \PoPCMSSchema\SettingsWP\TypeAPIs\SettingsTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider10Service($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\TagMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker9Service($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker5Service($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker
     */
    protected static function getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker5Service($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker
     */
    protected static function getTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker3Service($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker10Service($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\TagMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\RelationalTypeDataLoaders\ObjectType\TagTermDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\RelationalTypeDataLoaders\ObjectType\TagTermDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getTagTermDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\RelationalTypeDataLoaders\\ObjectType\\TagTermDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\TagMutations\RelationalTypeDataLoaders\ObjectType\TagTermDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\TypeAPIs\TagTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutationsWP\TypeAPIs\TagTypeMutationAPI
     */
    protected static function getTagTypeMutationAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\TypeAPIs\\TagTypeMutationAPIInterface'] = $instance = new \PoPCMSSchema\TagMutationsWP\TypeAPIs\TagTypeMutationAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\TypeResolvers\InputObjectType\TagByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\TypeResolvers\InputObjectType\TagByOneofInputObjectTypeResolver
     */
    protected static function getTagByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\TagMutations\TypeResolvers\InputObjectType\TagByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\TypeResolvers\InputObjectType\TagTermUpdateInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\TypeResolvers\InputObjectType\TagTermUpdateInputObjectTypeResolver
     */
    protected static function getTagTermUpdateInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagTermUpdateInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\TagMutations\TypeResolvers\InputObjectType\TagTermUpdateInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagMutations\TypeResolvers\ObjectType\TagTermDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TagMutations\TypeResolvers\ObjectType\TagTermDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getTagTermDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TagMutations\\TypeResolvers\\ObjectType\\TagTermDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\TagMutations\TypeResolvers\ObjectType\TagTermDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagsWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\TagsWP\Hooks\RoutingStateHookSet
     */
    protected static function getRoutingStateHookSet4Service($container)
    {
        $container->services['PoPCMSSchema\\TagsWP\\Hooks\\RoutingStateHookSet'] = $instance = new \PoPCMSSchema\TagsWP\Hooks\RoutingStateHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TagsWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\TagsWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet9Service($container)
    {
        $container->services['PoPCMSSchema\\TagsWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\TagsWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor8Service($container)
    {
        $container->services['PoPCMSSchema\\Tags\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\Tags\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\ComponentProcessors\TagFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\ComponentProcessors\TagFilterInputContainerComponentProcessor
     */
    protected static function getTagFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\ComponentProcessors\\TagFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Tags\ComponentProcessors\TagFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\ConditionalOnModule\Users\SchemaHooks\UserCustomPostsAddTagFilterInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\ConditionalOnModule\Users\SchemaHooks\UserCustomPostsAddTagFilterInputObjectTypeHookSet
     */
    protected static function getUserCustomPostsAddTagFilterInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\ConditionalOnModule\\Users\\SchemaHooks\\UserCustomPostsAddTagFilterInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\Tags\ConditionalOnModule\Users\SchemaHooks\UserCustomPostsAddTagFilterInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FieldResolvers\InterfaceType\TagInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FieldResolvers\InterfaceType\TagInterfaceTypeFieldResolver
     */
    protected static function getTagInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FieldResolvers\\InterfaceType\\TagInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\Tags\FieldResolvers\InterfaceType\TagInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericCustomPostQueryableObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericCustomPostQueryableObjectTypeFieldResolver
     */
    protected static function getGenericCustomPostQueryableObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericCustomPostQueryableObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericCustomPostQueryableObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericTagListObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericTagListObjectTypeFieldResolver
     */
    protected static function getGenericTagListObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericTagListObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericTagListObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericTagObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericTagObjectTypeFieldResolver
     */
    protected static function getGenericTagObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericTagObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Tags\FieldResolvers\ObjectType\GenericTagObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FieldResolvers\ObjectType\RootTagObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FieldResolvers\ObjectType\RootTagObjectTypeFieldResolver
     */
    protected static function getRootTagObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\RootTagObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Tags\FieldResolvers\ObjectType\RootTagObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FilterInputs\TagIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FilterInputs\TagIDsFilterInput
     */
    protected static function getTagIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FilterInputs\\TagIDsFilterInput'] = $instance = new \PoPCMSSchema\Tags\FilterInputs\TagIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FilterInputs\TagSlugsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FilterInputs\TagSlugsFilterInput
     */
    protected static function getTagSlugsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FilterInputs\\TagSlugsFilterInput'] = $instance = new \PoPCMSSchema\Tags\FilterInputs\TagSlugsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\FilterInputs\TagTaxonomyFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\FilterInputs\TagTaxonomyFilterInput
     */
    protected static function getTagTaxonomyFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\FilterInputs\\TagTaxonomyFilterInput'] = $instance = new \PoPCMSSchema\Tags\FilterInputs\TagTaxonomyFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet9Service($container)
    {
        $container->services['PoPCMSSchema\\Tags\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\Tags\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\ObjectTypeResolverPickers\TagUnionGenericTagObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\ObjectTypeResolverPickers\TagUnionGenericTagObjectTypeResolverPicker
     */
    protected static function getTagUnionGenericTagObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\ObjectTypeResolverPickers\\TagUnionGenericTagObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\Tags\ObjectTypeResolverPickers\TagUnionGenericTagObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\Registries\TagObjectTypeResolverPickerRegistryInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\Registries\TagObjectTypeResolverPickerRegistry
     */
    protected static function getTagObjectTypeResolverPickerRegistryInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\Registries\\TagObjectTypeResolverPickerRegistryInterface'] = $instance = new \PoPCMSSchema\Tags\Registries\TagObjectTypeResolverPickerRegistry();

        $instance->addTagObjectTypeResolverPicker(($container->services['PoPCMSSchema\\Tags\\ObjectTypeResolverPickers\\TagUnionGenericTagObjectTypeResolverPicker'] ?? self::getTagUnionGenericTagObjectTypeResolverPickerService($container)), 'PoPCMSSchema\\Tags\\ObjectTypeResolverPickers\\TagUnionGenericTagObjectTypeResolverPicker');
        $instance->addTagObjectTypeResolverPicker(($container->services['PoPCMSSchema\\PostTags\\ObjectTypeResolverPickers\\TagUnionPostTagObjectTypeResolverPicker'] ?? self::getTagUnionPostTagObjectTypeResolverPickerService($container)), 'PoPCMSSchema\\PostTags\\ObjectTypeResolverPickers\\TagUnionPostTagObjectTypeResolverPicker');

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\RelationalTypeDataLoaders\ObjectType\QueryableTagListObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\RelationalTypeDataLoaders\ObjectType\QueryableTagListObjectTypeDataLoader
     */
    protected static function getQueryableTagListObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\RelationalTypeDataLoaders\\ObjectType\\QueryableTagListObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Tags\RelationalTypeDataLoaders\ObjectType\QueryableTagListObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\RelationalTypeDataLoaders\UnionType\TagUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TagsWP\Overrides\RelationalTypeDataLoaders\UnionType\TagUnionTypeDataLoader
     */
    protected static function getTagUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\RelationalTypeDataLoaders\\UnionType\\TagUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\TagsWP\Overrides\RelationalTypeDataLoaders\UnionType\TagUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\SchemaHooks\RootCustomPostsAddTagFilterInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\SchemaHooks\RootCustomPostsAddTagFilterInputObjectTypeHookSet
     */
    protected static function getRootCustomPostsAddTagFilterInputObjectTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\SchemaHooks\\RootCustomPostsAddTagFilterInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\Tags\SchemaHooks\RootCustomPostsAddTagFilterInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\State\AppStateProvider
     */
    protected static function getAppStateProvider9Service($container)
    {
        $container->services['PoPCMSSchema\\Tags\\State\\AppStateProvider'] = $instance = new \PoPCMSSchema\Tags\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeAPIs\QueryableTagTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\TagsWP\TypeAPIs\QueryableTagTypeAPI
     */
    protected static function getQueryableTagTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeAPIs\\QueryableTagTypeAPIInterface'] = $instance = new \PoPCMSSchema\TagsWP\TypeAPIs\QueryableTagTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeAPIs\UniversalTagTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\TagsWP\TypeAPIs\UniversalTagTypeAPI
     */
    protected static function getUniversalTagTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeAPIs\\UniversalTagTypeAPIInterface'] = $instance = new \PoPCMSSchema\TagsWP\TypeAPIs\UniversalTagTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\EnumType\TagTaxonomyEnumStringScalarTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\EnumType\TagTaxonomyEnumStringScalarTypeResolver
     */
    protected static function getTagTaxonomyEnumStringScalarTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\EnumType\\TagTaxonomyEnumStringScalarTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\EnumType\TagTaxonomyEnumStringScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\InputObjectType\CustomPostTagsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\CustomPostTagsFilterInputObjectTypeResolver
     */
    protected static function getCustomPostTagsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostTagsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\CustomPostTagsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\InputObjectType\CustomPostsFilterCustomPostsByTagsInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\CustomPostsFilterCustomPostsByTagsInputObjectTypeResolver
     */
    protected static function getCustomPostsFilterCustomPostsByTagsInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByTagsInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\CustomPostsFilterCustomPostsByTagsInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\InputObjectType\RootTagsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\RootTagsFilterInputObjectTypeResolver
     */
    protected static function getRootTagsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\RootTagsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\RootTagsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\InputObjectType\TagByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\TagByOneofInputObjectTypeResolver
     */
    protected static function getTagByOneofInputObjectTypeResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\TagByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\InputObjectType\TagPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\TagPaginationInputObjectTypeResolver
     */
    protected static function getTagPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\InputObjectType\TagPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\InterfaceType\TagInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\InterfaceType\TagInterfaceTypeResolver
     */
    protected static function getTagInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InterfaceType\\TagInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\InterfaceType\TagInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\ObjectType\GenericTagObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Tags\TypeResolvers\ObjectType\GenericTagObjectTypeResolver
     */
    protected static function getGenericTagObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\ObjectType\\GenericTagObjectTypeResolver'] = $instance = new \PoPCMSSchema\Tags\TypeResolvers\ObjectType\GenericTagObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Tags\TypeResolvers\UnionType\TagUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TagsWP\Overrides\TypeResolvers\UnionType\TagUnionTypeResolver
     */
    protected static function getTagUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Tags\\TypeResolvers\\UnionType\\TagUnionTypeResolver'] = $instance = new \PoPCMSSchema\TagsWP\Overrides\TypeResolvers\UnionType\TagUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\FilterInputs\HideEmptyFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Taxonomies\FilterInputs\HideEmptyFilterInput
     */
    protected static function getHideEmptyFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\FilterInputs\\HideEmptyFilterInput'] = $instance = new \PoPCMSSchema\Taxonomies\FilterInputs\HideEmptyFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\FilterInputs\TaxonomyFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Taxonomies\FilterInputs\TaxonomyFilterInput
     */
    protected static function getTaxonomyFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\FilterInputs\\TaxonomyFilterInput'] = $instance = new \PoPCMSSchema\Taxonomies\FilterInputs\TaxonomyFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\TypeAPIs\TaxonomyTermTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomiesWP\TypeAPIs\TaxonomyTermTypeAPI
     */
    protected static function getTaxonomyTermTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\TypeAPIs\\TaxonomyTermTypeAPIInterface'] = $instance = new \PoPCMSSchema\TaxonomiesWP\TypeAPIs\TaxonomyTermTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\TypeResolvers\EnumType\TaxonomyOrderByEnumTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Taxonomies\TypeResolvers\EnumType\TaxonomyOrderByEnumTypeResolver
     */
    protected static function getTaxonomyOrderByEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\EnumType\\TaxonomyOrderByEnumTypeResolver'] = $instance = new \PoPCMSSchema\Taxonomies\TypeResolvers\EnumType\TaxonomyOrderByEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\FilterByTaxonomyTermsInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\FilterByTaxonomyTermsInputObjectTypeResolver
     */
    protected static function getFilterByTaxonomyTermsInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\FilterByTaxonomyTermsInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\FilterByTaxonomyTermsInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomyCustomPostsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomyCustomPostsFilterInputObjectTypeResolver
     */
    protected static function getTaxonomyCustomPostsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyCustomPostsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomyCustomPostsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomySortInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomySortInputObjectTypeResolver
     */
    protected static function getTaxonomySortInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomySortInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomySortInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomyTaxonomiesFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomyTaxonomiesFilterInputObjectTypeResolver
     */
    protected static function getTaxonomyTaxonomiesFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyTaxonomiesFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Taxonomies\TypeResolvers\InputObjectType\TaxonomyTaxonomiesFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMetaWP\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet5Service($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMetaWP\\Hooks\\QueryHookSet'] = $instance = new \PoPCMSSchema\TaxonomyMetaWP\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMeta\FieldResolvers\ObjectType\TaxonomyObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMeta\FieldResolvers\ObjectType\TaxonomyObjectTypeFieldResolver
     */
    protected static function getTaxonomyObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMeta\\FieldResolvers\\ObjectType\\TaxonomyObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\TaxonomyMeta\FieldResolvers\ObjectType\TaxonomyObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMeta\TypeAPIs\TaxonomyMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMetaWP\TypeAPIs\TaxonomyMetaTypeAPI
     */
    protected static function getTaxonomyMetaTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMeta\\TypeAPIs\\TaxonomyMetaTypeAPIInterface'] = $instance = new \PoPCMSSchema\TaxonomyMetaWP\TypeAPIs\TaxonomyMetaTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider11Service($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\TaxonomyMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeDataLoader
     */
    protected static function getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getTaxonomyDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\TaxonomyDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyIsNotValidErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyIsNotValidErrorPayloadObjectTypeDataLoader
     */
    protected static function getTaxonomyIsNotValidErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\TaxonomyIsNotValidErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyIsNotValidErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyTermDoesNotExistErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyTermDoesNotExistErrorPayloadObjectTypeDataLoader
     */
    protected static function getTaxonomyTermDoesNotExistErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\RelationalTypeDataLoaders\\ObjectType\\TaxonomyTermDoesNotExistErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\TaxonomyMutations\RelationalTypeDataLoaders\ObjectType\TaxonomyTermDoesNotExistErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\TypeAPIs\TaxonomyTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutationsWP\TypeAPIs\TaxonomyTypeMutationAPI
     */
    protected static function getTaxonomyTypeMutationAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\TypeAPIs\\TaxonomyTypeMutationAPIInterface'] = $instance = new \PoPCMSSchema\TaxonomyMutationsWP\TypeAPIs\TaxonomyTypeMutationAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolver
     */
    protected static function getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getTaxonomyDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyIsNotValidErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyIsNotValidErrorPayloadObjectTypeResolver
     */
    protected static function getTaxonomyIsNotValidErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyIsNotValidErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyIsNotValidErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyTermDoesNotExistErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyTermDoesNotExistErrorPayloadObjectTypeResolver
     */
    protected static function getTaxonomyTermDoesNotExistErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyTermDoesNotExistErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\TaxonomyMutations\TypeResolvers\ObjectType\TaxonomyTermDoesNotExistErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserAvatars\FieldResolvers\ObjectType\UserAvatarObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserAvatars\FieldResolvers\ObjectType\UserAvatarObjectTypeFieldResolver
     */
    protected static function getUserAvatarObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserAvatars\\FieldResolvers\\ObjectType\\UserAvatarObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserAvatars\FieldResolvers\ObjectType\UserAvatarObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserAvatars\FieldResolvers\ObjectType\UserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserAvatars\FieldResolvers\ObjectType\UserObjectTypeFieldResolver
     */
    protected static function getUserObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserAvatars\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserAvatars\FieldResolvers\ObjectType\UserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserAvatars\RelationalTypeDataLoaders\ObjectType\UserAvatarObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserAvatars\RelationalTypeDataLoaders\ObjectType\UserAvatarObjectTypeDataLoader
     */
    protected static function getUserAvatarObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserAvatars\\RelationalTypeDataLoaders\\ObjectType\\UserAvatarObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\UserAvatars\RelationalTypeDataLoaders\ObjectType\UserAvatarObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserAvatars\RuntimeRegistries\UserAvatarRuntimeRegistryInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UserAvatars\RuntimeRegistries\UserAvatarRuntimeRegistry
     */
    protected static function getUserAvatarRuntimeRegistryInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\UserAvatars\\RuntimeRegistries\\UserAvatarRuntimeRegistryInterface'] = new \PoPCMSSchema\UserAvatars\RuntimeRegistries\UserAvatarRuntimeRegistry();
    }

    /**
     * Gets the public 'PoPCMSSchema\UserAvatars\TypeAPIs\UserAvatarTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UserAvatarsWP\TypeAPIs\UserAvatarTypeAPI
     */
    protected static function getUserAvatarTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\UserAvatars\\TypeAPIs\\UserAvatarTypeAPIInterface'] = $instance = new \PoPCMSSchema\UserAvatarsWP\TypeAPIs\UserAvatarTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserAvatars\TypeResolvers\ObjectType\UserAvatarObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserAvatars\TypeResolvers\ObjectType\UserAvatarObjectTypeResolver
     */
    protected static function getUserAvatarObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserAvatars\\TypeResolvers\\ObjectType\\UserAvatarObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserAvatars\TypeResolvers\ObjectType\UserAvatarObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserMetaWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UserMetaWP\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet6Service($container)
    {
        $container->services['PoPCMSSchema\\UserMetaWP\\Hooks\\QueryHookSet'] = $instance = new \PoPCMSSchema\UserMetaWP\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserMeta\FieldResolvers\ObjectType\UserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserMeta\FieldResolvers\ObjectType\UserObjectTypeFieldResolver
     */
    protected static function getUserObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\UserMeta\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserMeta\FieldResolvers\ObjectType\UserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserMeta\TypeAPIs\UserMetaTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UserMetaWP\TypeAPIs\UserMetaTypeAPI
     */
    protected static function getUserMetaTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\UserMeta\\TypeAPIs\\UserMetaTypeAPIInterface'] = $instance = new \PoPCMSSchema\UserMetaWP\TypeAPIs\UserMetaTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\RootRolesObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\RootRolesObjectTypeFieldResolver
     */
    protected static function getRootRolesObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\RootRolesObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\RootRolesObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\UserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\UserObjectTypeFieldResolver
     */
    protected static function getUserObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\UserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\UserRoleObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\UserRoleObjectTypeFieldResolver
     */
    protected static function getUserRoleObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\UserRoleObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserRolesWP\FieldResolvers\ObjectType\UserRoleObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRolesWP\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet7Service($container)
    {
        $container->services['PoPCMSSchema\\UserRolesWP\\Hooks\\QueryHookSet'] = $instance = new \PoPCMSSchema\UserRolesWP\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRolesWP\RelationalTypeDataLoaders\ObjectType\UserRoleObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\RelationalTypeDataLoaders\ObjectType\UserRoleObjectTypeDataLoader
     */
    protected static function getUserRoleObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserRolesWP\\RelationalTypeDataLoaders\\ObjectType\\UserRoleObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\UserRolesWP\RelationalTypeDataLoaders\ObjectType\UserRoleObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRolesWP\TypeResolvers\ObjectType\UserRoleObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\TypeResolvers\ObjectType\UserRoleObjectTypeResolver
     */
    protected static function getUserRoleObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserRolesWP\\TypeResolvers\\ObjectType\\UserRoleObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserRolesWP\TypeResolvers\ObjectType\UserRoleObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRoles\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor9Service($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\UserRoles\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\FieldResolvers\ObjectType\RootRolesObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\Overrides\FieldResolvers\ObjectType\RootRolesObjectTypeFieldResolver
     */
    protected static function getRootRolesObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\FieldResolvers\\ObjectType\\RootRolesObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserRolesWP\Overrides\FieldResolvers\ObjectType\RootRolesObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\FieldResolvers\ObjectType\UserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\Overrides\FieldResolvers\ObjectType\UserObjectTypeFieldResolver
     */
    protected static function getUserObjectTypeFieldResolver4Service($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserRolesWP\Overrides\FieldResolvers\ObjectType\UserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\FilterInputs\ExcludeUserRolesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRoles\FilterInputs\ExcludeUserRolesFilterInput
     */
    protected static function getExcludeUserRolesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\FilterInputs\\ExcludeUserRolesFilterInput'] = $instance = new \PoPCMSSchema\UserRoles\FilterInputs\ExcludeUserRolesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\FilterInputs\UserRolesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRoles\FilterInputs\UserRolesFilterInput
     */
    protected static function getUserRolesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\FilterInputs\\UserRolesFilterInput'] = $instance = new \PoPCMSSchema\UserRoles\FilterInputs\UserRolesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRoles\Hooks\VarsHookSet
     */
    protected static function getVarsHookSet5Service($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\Hooks\\VarsHookSet'] = $instance = new \PoPCMSSchema\UserRoles\Hooks\VarsHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\SchemaHooks\FilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRoles\SchemaHooks\FilterInputHookSet
     */
    protected static function getFilterInputHookSet5Service($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\SchemaHooks\\FilterInputHookSet'] = $instance = new \PoPCMSSchema\UserRoles\SchemaHooks\FilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\SchemaHooks\InputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRoles\SchemaHooks\InputObjectTypeHookSet
     */
    protected static function getInputObjectTypeHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\SchemaHooks\\InputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\UserRoles\SchemaHooks\InputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserRoles\TypeAPIs\UserRoleTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UserRolesWP\TypeAPIs\UserRoleTypeAPI
     */
    protected static function getUserRoleTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\UserRoles\\TypeAPIs\\UserRoleTypeAPIInterface'] = $instance = new \PoPCMSSchema\UserRolesWP\TypeAPIs\UserRoleTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider12Service($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\UserStateMutations\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getRootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver18Service($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\UserMutationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\UserMutationPayloadObjectTypeFieldResolver
     */
    protected static function getUserMutationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\UserMutationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\UserMutationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\UserMutationTransientEntityOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\UserMutationTransientEntityOperationPayloadObjectTypeFieldResolver
     */
    protected static function getUserMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\UserMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\FieldResolvers\ObjectType\UserMutationTransientEntityOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\MutationResolvers\LoginUserByCredentialsMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\MutationResolvers\LoginUserByCredentialsMutationResolver
     */
    protected static function getLoginUserByCredentialsMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\MutationResolvers\\LoginUserByCredentialsMutationResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\MutationResolvers\LoginUserByCredentialsMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\MutationResolvers\LoginUserOneofMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\MutationResolvers\LoginUserOneofMutationResolver
     */
    protected static function getLoginUserOneofMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\MutationResolvers\\LoginUserOneofMutationResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\MutationResolvers\LoginUserOneofMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\MutationResolvers\LogoutUserMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\MutationResolvers\LogoutUserMutationResolver
     */
    protected static function getLogoutUserMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\MutationResolvers\\LogoutUserMutationResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\MutationResolvers\LogoutUserMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\MutationResolvers\PayloadableLoginUserOneofMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\MutationResolvers\PayloadableLoginUserOneofMutationResolver
     */
    protected static function getPayloadableLoginUserOneofMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\MutationResolvers\\PayloadableLoginUserOneofMutationResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\MutationResolvers\PayloadableLoginUserOneofMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\MutationResolvers\PayloadableLogoutUserMutationResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\MutationResolvers\PayloadableLogoutUserMutationResolver
     */
    protected static function getPayloadableLogoutUserMutationResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\MutationResolvers\\PayloadableLogoutUserMutationResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\MutationResolvers\PayloadableLogoutUserMutationResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker
     */
    protected static function getGenericErrorPayloadObjectTypeResolverPicker10Service($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\GenericErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\InvalidUserEmailErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\InvalidUserEmailErrorPayloadObjectTypeResolverPicker
     */
    protected static function getInvalidUserEmailErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\InvalidUserEmailErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\InvalidUserEmailErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\InvalidUsernameErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\InvalidUsernameErrorPayloadObjectTypeResolverPicker
     */
    protected static function getInvalidUsernameErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\InvalidUsernameErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\InvalidUsernameErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\PasswordIsIncorrectErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\PasswordIsIncorrectErrorPayloadObjectTypeResolverPicker
     */
    protected static function getPasswordIsIncorrectErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\PasswordIsIncorrectErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\PasswordIsIncorrectErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\UserIsLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\UserIsLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsLoggedInErrorPayloadObjectTypeResolverPickerService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\UserIsLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\UserIsLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker11Service($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] = $instance = new \PoPCMSSchema\UserStateMutations\ObjectTypeResolverPickers\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\InvalidUserEmailErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\InvalidUserEmailErrorPayloadObjectTypeDataLoader
     */
    protected static function getInvalidUserEmailErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\InvalidUserEmailErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\InvalidUserEmailErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\InvalidUsernameErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\InvalidUsernameErrorPayloadObjectTypeDataLoader
     */
    protected static function getInvalidUsernameErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\InvalidUsernameErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\InvalidUsernameErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\PasswordIsIncorrectErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\PasswordIsIncorrectErrorPayloadObjectTypeDataLoader
     */
    protected static function getPasswordIsIncorrectErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\PasswordIsIncorrectErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\PasswordIsIncorrectErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\UserIsLoggedInErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\UserIsLoggedInErrorPayloadObjectTypeDataLoader
     */
    protected static function getUserIsLoggedInErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\UserIsLoggedInErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\UserIsLoggedInErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\UserIsNotLoggedInErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\UserIsNotLoggedInErrorPayloadObjectTypeDataLoader
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\ObjectType\\UserIsNotLoggedInErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\ObjectType\UserIsNotLoggedInErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\UnionType\RootLoginUserMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\UnionType\RootLoginUserMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootLoginUserMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\UnionType\\RootLoginUserMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\UnionType\RootLoginUserMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\UnionType\RootLogoutUserMutationErrorPayloadUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\UnionType\RootLogoutUserMutationErrorPayloadUnionTypeDataLoader
     */
    protected static function getRootLogoutUserMutationErrorPayloadUnionTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\RelationalTypeDataLoaders\\UnionType\\RootLogoutUserMutationErrorPayloadUnionTypeDataLoader'] = $instance = new \PoPCMSSchema\UserStateMutations\RelationalTypeDataLoaders\UnionType\RootLogoutUserMutationErrorPayloadUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeAPIs\UserStateTypeMutationAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutationsWP\TypeAPIs\UserStateTypeMutationAPI
     */
    protected static function getUserStateTypeMutationAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeAPIs\\UserStateTypeMutationAPIInterface'] = $instance = new \PoPCMSSchema\UserStateMutationsWP\TypeAPIs\UserStateTypeMutationAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\InputObjectType\LoginCredentialsInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\InputObjectType\LoginCredentialsInputObjectTypeResolver
     */
    protected static function getLoginCredentialsInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginCredentialsInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\InputObjectType\LoginCredentialsInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\InputObjectType\LoginUserByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\InputObjectType\LoginUserByOneofInputObjectTypeResolver
     */
    protected static function getLoginUserByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginUserByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\InputObjectType\LoginUserByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\InvalidUserEmailErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\InvalidUserEmailErrorPayloadObjectTypeResolver
     */
    protected static function getInvalidUserEmailErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUserEmailErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\InvalidUserEmailErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\InvalidUsernameErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\InvalidUsernameErrorPayloadObjectTypeResolver
     */
    protected static function getInvalidUsernameErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUsernameErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\InvalidUsernameErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\PasswordIsIncorrectErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\PasswordIsIncorrectErrorPayloadObjectTypeResolver
     */
    protected static function getPasswordIsIncorrectErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\PasswordIsIncorrectErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\PasswordIsIncorrectErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\RootLoginUserMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\RootLoginUserMutationPayloadObjectTypeResolver
     */
    protected static function getRootLoginUserMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLoginUserMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\RootLoginUserMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\RootLogoutUserMutationPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\RootLogoutUserMutationPayloadObjectTypeResolver
     */
    protected static function getRootLogoutUserMutationPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLogoutUserMutationPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\RootLogoutUserMutationPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\UserIsLoggedInErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\UserIsLoggedInErrorPayloadObjectTypeResolver
     */
    protected static function getUserIsLoggedInErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsLoggedInErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\UserIsLoggedInErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\UserIsNotLoggedInErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\UserIsNotLoggedInErrorPayloadObjectTypeResolver
     */
    protected static function getUserIsNotLoggedInErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsNotLoggedInErrorPayloadObjectTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\ObjectType\UserIsNotLoggedInErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\UnionType\RootLoginUserMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\UnionType\RootLoginUserMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootLoginUserMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLoginUserMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\UnionType\RootLoginUserMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserStateMutations\TypeResolvers\UnionType\RootLogoutUserMutationErrorPayloadUnionTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateMutations\TypeResolvers\UnionType\RootLogoutUserMutationErrorPayloadUnionTypeResolver
     */
    protected static function getRootLogoutUserMutationErrorPayloadUnionTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLogoutUserMutationErrorPayloadUnionTypeResolver'] = $instance = new \PoPCMSSchema\UserStateMutations\TypeResolvers\UnionType\RootLogoutUserMutationErrorPayloadUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\Checkpoints\DoingPostUserLoggedInAggregateCheckpoint' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\Checkpoints\DoingPostUserLoggedInAggregateCheckpoint
     */
    protected static function getDoingPostUserLoggedInAggregateCheckpointService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\Checkpoints\\DoingPostUserLoggedInAggregateCheckpoint'] = $instance = new \PoPCMSSchema\UserState\Checkpoints\DoingPostUserLoggedInAggregateCheckpoint();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\Checkpoints\DoingPostUserNotLoggedInAggregateCheckpoint' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\Checkpoints\DoingPostUserNotLoggedInAggregateCheckpoint
     */
    protected static function getDoingPostUserNotLoggedInAggregateCheckpointService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\Checkpoints\\DoingPostUserNotLoggedInAggregateCheckpoint'] = $instance = new \PoPCMSSchema\UserState\Checkpoints\DoingPostUserNotLoggedInAggregateCheckpoint();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\Checkpoints\UserLoggedInCheckpoint' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\Checkpoints\UserLoggedInCheckpoint
     */
    protected static function getUserLoggedInCheckpointService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\Checkpoints\\UserLoggedInCheckpoint'] = $instance = new \PoPCMSSchema\UserState\Checkpoints\UserLoggedInCheckpoint();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\Checkpoints\UserNotLoggedInCheckpoint' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\Checkpoints\UserNotLoggedInCheckpoint
     */
    protected static function getUserNotLoggedInCheckpointService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\Checkpoints\\UserNotLoggedInCheckpoint'] = $instance = new \PoPCMSSchema\UserState\Checkpoints\UserNotLoggedInCheckpoint();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider
     */
    protected static function getCheckpointErrorFeedbackItemProviderService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider'] = $instance = new \PoPCMSSchema\UserState\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\FieldResolvers\ObjectType\ObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\FieldResolvers\ObjectType\ObjectTypeFieldResolver
     */
    protected static function getObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\ObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserState\FieldResolvers\ObjectType\ObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\FieldResolvers\ObjectType\RootMeObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\FieldResolvers\ObjectType\RootMeObjectTypeFieldResolver
     */
    protected static function getRootMeObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\RootMeObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserState\FieldResolvers\ObjectType\RootMeObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\FieldResolvers\ObjectType\UserStateObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\FieldResolvers\ObjectType\UserStateObjectTypeFieldResolver
     */
    protected static function getUserStateObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\UserStateObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\UserState\FieldResolvers\ObjectType\UserStateObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\Hooks\DBEntriesHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\Hooks\DBEntriesHookSet
     */
    protected static function getDBEntriesHookSet3Service($container)
    {
        $container->services['PoPCMSSchema\\UserState\\Hooks\\DBEntriesHookSet'] = $instance = new \PoPCMSSchema\UserState\Hooks\DBEntriesHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\UserState\State\AppStateProvider
     */
    protected static function getAppStateProvider10Service($container)
    {
        $container->services['PoPCMSSchema\\UserState\\State\\AppStateProvider'] = $instance = new \PoPCMSSchema\UserState\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UserState\TypeAPIs\UserStateTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UserStateWP\TypeAPIs\UserStateTypeAPI
     */
    protected static function getUserStateTypeAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\UserState\\TypeAPIs\\UserStateTypeAPIInterface'] = new \PoPCMSSchema\UserStateWP\TypeAPIs\UserStateTypeAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\Hooks\CustomPostQueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\Hooks\CustomPostQueryHookSet
     */
    protected static function getCustomPostQueryHookSetService($container)
    {
        $container->services['PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\Hooks\\CustomPostQueryHookSet'] = $instance = new \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\Hooks\CustomPostQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\Hooks\UserQueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\Hooks\UserQueryHookSet
     */
    protected static function getUserQueryHookSetService($container)
    {
        $container->services['PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\Hooks\\UserQueryHookSet'] = $instance = new \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\Hooks\UserQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet10Service($container)
    {
        $container->services['PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UsersWP\Hooks\RoutingHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\Hooks\RoutingHookSet
     */
    protected static function getRoutingHookSet6Service($container)
    {
        $container->services['PoPCMSSchema\\UsersWP\\Hooks\\RoutingHookSet'] = $instance = new \PoPCMSSchema\UsersWP\Hooks\RoutingHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UsersWP\Hooks\RoutingStateHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\Hooks\RoutingStateHookSet
     */
    protected static function getRoutingStateHookSet5Service($container)
    {
        $container->services['PoPCMSSchema\\UsersWP\\Hooks\\RoutingStateHookSet'] = $instance = new \PoPCMSSchema\UsersWP\Hooks\RoutingStateHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\UsersWP\LooseContracts\LooseContractResolutionSet' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\LooseContracts\LooseContractResolutionSet
     */
    protected static function getLooseContractResolutionSet11Service($container)
    {
        $container->services['PoPCMSSchema\\UsersWP\\LooseContracts\\LooseContractResolutionSet'] = $instance = new \PoPCMSSchema\UsersWP\LooseContracts\LooseContractResolutionSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor10Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\Users\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ComponentProcessors\UserFilterInputContainerComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ComponentProcessors\UserFilterInputContainerComponentProcessor
     */
    protected static function getUserFilterInputContainerComponentProcessorService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ComponentProcessors\\UserFilterInputContainerComponentProcessor'] = $instance = new \PoPCMSSchema\Users\ComponentProcessors\UserFilterInputContainerComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor
     */
    protected static function getFieldDataloadComponentProcessor6Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor8Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\API\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\ComponentProcessors\FormInputs\FilterInputComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\ComponentProcessors\FormInputs\FilterInputComponentProcessor
     */
    protected static function getFilterInputComponentProcessor11Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\ComponentProcessors\\FormInputs\\FilterInputComponentProcessor'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\ComponentProcessors\FormInputs\FilterInputComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor
     */
    protected static function getFieldDataloadComponentProcessor7Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\ConditionalOnModule\\API\\ComponentProcessors\\FieldDataloadComponentProcessor'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\ConditionalOnModule\API\ComponentProcessors\FieldDataloadComponentProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\CustomPostListUserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\CustomPostListUserObjectTypeFieldResolver
     */
    protected static function getCustomPostListUserObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostListUserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\CustomPostListUserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver
     */
    protected static function getCustomPostObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\AuthorIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\AuthorIDsFilterInput
     */
    protected static function getAuthorIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FilterInputs\\AuthorIDsFilterInput'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\AuthorIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\AuthorSlugFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\AuthorSlugFilterInput
     */
    protected static function getAuthorSlugFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FilterInputs\\AuthorSlugFilterInput'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\AuthorSlugFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\ExcludeAuthorIDsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\ExcludeAuthorIDsFilterInput
     */
    protected static function getExcludeAuthorIDsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FilterInputs\\ExcludeAuthorIDsFilterInput'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\FilterInputs\ExcludeAuthorIDsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet8Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\Hooks\\QueryHookSet'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet10Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet
     */
    protected static function getAddAuthorInputFieldsToCustomPostInputObjectTypeHookSet2Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\CustomPostOrderByEnumTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\CustomPostOrderByEnumTypeHookSet
     */
    protected static function getCustomPostOrderByEnumTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\CustomPostOrderByEnumTypeHookSet'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\CustomPostOrderByEnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\FilterInputHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\FilterInputHookSet
     */
    protected static function getFilterInputHookSet6Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\FilterInputHookSet'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\FilterInputHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\UserEnumTypeHookSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\UserEnumTypeHookSet
     */
    protected static function getUserEnumTypeHookSetService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\UserEnumTypeHookSet'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\SchemaHooks\UserEnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\TypeAPIs\CustomPostUserTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\TypeAPIs\CustomPostUserTypeAPI
     */
    protected static function getCustomPostUserTypeAPIInterfaceService($container)
    {
        return $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\TypeAPIs\\CustomPostUserTypeAPIInterface'] = new \PoPCMSSchema\UsersWP\ConditionalOnModule\CustomPosts\TypeAPIs\CustomPostUserTypeAPI();
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\TypeResolvers\InputObjectType\UserCustomPostsFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\TypeResolvers\InputObjectType\UserCustomPostsFilterInputObjectTypeResolver
     */
    protected static function getUserCustomPostsFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\TypeResolvers\\InputObjectType\\UserCustomPostsFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\ConditionalOnModule\CustomPosts\TypeResolvers\InputObjectType\UserCustomPostsFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FieldResolvers\InterfaceType\WithAuthorInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FieldResolvers\InterfaceType\WithAuthorInterfaceTypeFieldResolver
     */
    protected static function getWithAuthorInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\FieldResolvers\\InterfaceType\\WithAuthorInterfaceTypeFieldResolver'] = $instance = new \PoPCMSSchema\Users\FieldResolvers\InterfaceType\WithAuthorInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FieldResolvers\ObjectType\RootUserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FieldResolvers\ObjectType\RootUserObjectTypeFieldResolver
     */
    protected static function getRootUserObjectTypeFieldResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\FieldResolvers\\ObjectType\\RootUserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Users\FieldResolvers\ObjectType\RootUserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FieldResolvers\ObjectType\UserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FieldResolvers\ObjectType\UserObjectTypeFieldResolver
     */
    protected static function getUserObjectTypeFieldResolver5Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] = $instance = new \PoPCMSSchema\Users\FieldResolvers\ObjectType\UserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FilterInputs\EmailFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FilterInputs\EmailFilterInput
     */
    protected static function getEmailFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\FilterInputs\\EmailFilterInput'] = $instance = new \PoPCMSSchema\Users\FilterInputs\EmailFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FilterInputs\EmailOrEmailsFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FilterInputs\EmailOrEmailsFilterInput
     */
    protected static function getEmailOrEmailsFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\FilterInputs\\EmailOrEmailsFilterInput'] = $instance = new \PoPCMSSchema\Users\FilterInputs\EmailOrEmailsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FilterInputs\NameFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FilterInputs\NameFilterInput
     */
    protected static function getNameFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\FilterInputs\\NameFilterInput'] = $instance = new \PoPCMSSchema\Users\FilterInputs\NameFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FilterInputs\UsernameFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FilterInputs\UsernameFilterInput
     */
    protected static function getUsernameFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\FilterInputs\\UsernameFilterInput'] = $instance = new \PoPCMSSchema\Users\FilterInputs\UsernameFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\FilterInputs\UsernameOrUsernamesFilterInput' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\FilterInputs\UsernameOrUsernamesFilterInput
     */
    protected static function getUsernameOrUsernamesFilterInputService($container)
    {
        $container->services['PoPCMSSchema\\Users\\FilterInputs\\UsernameOrUsernamesFilterInput'] = $instance = new \PoPCMSSchema\Users\FilterInputs\UsernameOrUsernamesFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\LooseContracts\LooseContractSet' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\LooseContracts\LooseContractSet
     */
    protected static function getLooseContractSet11Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\LooseContracts\\LooseContractSet'] = $instance = new \PoPCMSSchema\Users\LooseContracts\LooseContractSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\RelationalTypeDataLoaders\ObjectType\UserObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\RelationalTypeDataLoaders\ObjectType\UserObjectTypeDataLoader
     */
    protected static function getUserObjectTypeDataLoaderService($container)
    {
        $container->services['PoPCMSSchema\\Users\\RelationalTypeDataLoaders\\ObjectType\\UserObjectTypeDataLoader'] = $instance = new \PoPCMSSchema\Users\RelationalTypeDataLoaders\ObjectType\UserObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\State\AppStateProvider' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\State\AppStateProvider
     */
    protected static function getAppStateProvider11Service($container)
    {
        $container->services['PoPCMSSchema\\Users\\State\\AppStateProvider'] = $instance = new \PoPCMSSchema\Users\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeAPIs\UserTypeAPIInterface' shared autowired service.
     *
     * @return \PoPCMSSchema\UsersWP\TypeAPIs\UserTypeAPI
     */
    protected static function getUserTypeAPIInterfaceService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeAPIs\\UserTypeAPIInterface'] = $instance = new \PoPCMSSchema\UsersWP\TypeAPIs\UserTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\EnumType\UserOrderByEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Users\Overrides\TypeResolvers\EnumType\UserOrderByEnumTypeResolver
     */
    protected static function getUserOrderByEnumTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\EnumType\\UserOrderByEnumTypeResolver'] = $instance = new \PoPWPSchema\Users\Overrides\TypeResolvers\EnumType\UserOrderByEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\InputObjectType\FilterByAuthorInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\InputObjectType\FilterByAuthorInputObjectTypeResolver
     */
    protected static function getFilterByAuthorInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\FilterByAuthorInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\InputObjectType\FilterByAuthorInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserByOneofInputObjectTypeResolver
     */
    protected static function getUserByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserPaginationInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserPaginationInputObjectTypeResolver
     */
    protected static function getUserPaginationInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserPaginationInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserPaginationInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserSearchByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserSearchByOneofInputObjectTypeResolver
     */
    protected static function getUserSearchByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSearchByOneofInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserSearchByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserSortInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserSortInputObjectTypeResolver
     */
    protected static function getUserSortInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSortInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UserSortInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\InputObjectType\UsersFilterInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UsersFilterInputObjectTypeResolver
     */
    protected static function getUsersFilterInputObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UsersFilterInputObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\InputObjectType\UsersFilterInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\InterfaceType\WithAuthorInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\InterfaceType\WithAuthorInterfaceTypeResolver
     */
    protected static function getWithAuthorInterfaceTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\InterfaceType\\WithAuthorInterfaceTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\InterfaceType\WithAuthorInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPCMSSchema\Users\TypeResolvers\ObjectType\UserObjectTypeResolver' shared autowired service.
     *
     * @return \PoPCMSSchema\Users\TypeResolvers\ObjectType\UserObjectTypeResolver
     */
    protected static function getUserObjectTypeResolverService($container)
    {
        $container->services['PoPCMSSchema\\Users\\TypeResolvers\\ObjectType\\UserObjectTypeResolver'] = $instance = new \PoPCMSSchema\Users\TypeResolvers\ObjectType\UserObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FeedbackItemProviders\ErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FeedbackItemProviders\ErrorFeedbackItemProvider
     */
    protected static function getErrorFeedbackItemProvider2Service($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] = $instance = new \PoPSchema\SchemaCommons\FeedbackItemProviders\ErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FeedbackItemProviders\InputValueCoercionErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FeedbackItemProviders\InputValueCoercionErrorFeedbackItemProvider
     */
    protected static function getInputValueCoercionErrorFeedbackItemProviderService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\FeedbackItemProviders\\InputValueCoercionErrorFeedbackItemProvider'] = $instance = new \PoPSchema\SchemaCommons\FeedbackItemProviders\InputValueCoercionErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FieldResolvers\InterfaceType\ErrorPayloadInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FieldResolvers\InterfaceType\ErrorPayloadInterfaceTypeFieldResolver
     */
    protected static function getErrorPayloadInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\InterfaceType\\ErrorPayloadInterfaceTypeFieldResolver'] = $instance = new \PoPSchema\SchemaCommons\FieldResolvers\InterfaceType\ErrorPayloadInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FieldResolvers\ObjectType\ErrorPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FieldResolvers\ObjectType\ErrorPayloadObjectTypeFieldResolver
     */
    protected static function getErrorPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\ErrorPayloadObjectTypeFieldResolver'] = $instance = new \PoPSchema\SchemaCommons\FieldResolvers\ObjectType\ErrorPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FieldResolvers\ObjectType\GenericErrorPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FieldResolvers\ObjectType\GenericErrorPayloadObjectTypeFieldResolver
     */
    protected static function getGenericErrorPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\GenericErrorPayloadObjectTypeFieldResolver'] = $instance = new \PoPSchema\SchemaCommons\FieldResolvers\ObjectType\GenericErrorPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\FieldResolvers\ObjectType\TransientOperationPayloadObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\FieldResolvers\ObjectType\TransientOperationPayloadObjectTypeFieldResolver
     */
    protected static function getTransientOperationPayloadObjectTypeFieldResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\TransientOperationPayloadObjectTypeFieldResolver'] = $instance = new \PoPSchema\SchemaCommons\FieldResolvers\ObjectType\TransientOperationPayloadObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\ObjectSerializers\DateTimeObjectSerializer' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\ObjectSerializers\DateTimeObjectSerializer
     */
    protected static function getDateTimeObjectSerializerService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\ObjectSerializers\\DateTimeObjectSerializer'] = $instance = new \PoPSchema\SchemaCommons\ObjectSerializers\DateTimeObjectSerializer();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\RelationalTypeDataLoaders\ObjectType\GenericErrorPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\RelationalTypeDataLoaders\ObjectType\GenericErrorPayloadObjectTypeDataLoader
     */
    protected static function getGenericErrorPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\RelationalTypeDataLoaders\\ObjectType\\GenericErrorPayloadObjectTypeDataLoader'] = $instance = new \PoPSchema\SchemaCommons\RelationalTypeDataLoaders\ObjectType\GenericErrorPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\RelationalTypeDataLoaders\ObjectType\ObjectMutationPayloadObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\RelationalTypeDataLoaders\ObjectType\ObjectMutationPayloadObjectTypeDataLoader
     */
    protected static function getObjectMutationPayloadObjectTypeDataLoaderService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\RelationalTypeDataLoaders\\ObjectType\\ObjectMutationPayloadObjectTypeDataLoader'] = $instance = new \PoPSchema\SchemaCommons\RelationalTypeDataLoaders\ObjectType\ObjectMutationPayloadObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\Services\AllowOrDenySettingsServiceInterface' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\Services\AllowOrDenySettingsService
     */
    protected static function getAllowOrDenySettingsServiceInterfaceService($container)
    {
        return $container->services['PoPSchema\\SchemaCommons\\Services\\AllowOrDenySettingsServiceInterface'] = new \PoPSchema\SchemaCommons\Services\AllowOrDenySettingsService();
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\EnumType\OperationStatusEnumTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\EnumType\OperationStatusEnumTypeResolver
     */
    protected static function getOperationStatusEnumTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OperationStatusEnumTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\EnumType\OperationStatusEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\InterfaceType\ErrorPayloadInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\InterfaceType\ErrorPayloadInterfaceTypeResolver
     */
    protected static function getErrorPayloadInterfaceTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\InterfaceType\\ErrorPayloadInterfaceTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\InterfaceType\ErrorPayloadInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ObjectType\GenericErrorPayloadObjectTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ObjectType\GenericErrorPayloadObjectTypeResolver
     */
    protected static function getGenericErrorPayloadObjectTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ObjectType\\GenericErrorPayloadObjectTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ObjectType\GenericErrorPayloadObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\DateScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\DateScalarTypeResolver
     */
    protected static function getDateScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\DateScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\DateTimeScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\DateTimeScalarTypeResolver
     */
    protected static function getDateTimeScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateTimeScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\DateTimeScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\EmailScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\EmailScalarTypeResolver
     */
    protected static function getEmailScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\EmailScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\EmailScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\HTMLScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\HTMLScalarTypeResolver
     */
    protected static function getHTMLScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\HTMLScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\HTMLScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\NumericScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\NumericScalarTypeResolver
     */
    protected static function getNumericScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\NumericScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\NumericScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\URLAbsolutePathScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\URLAbsolutePathScalarTypeResolver
     */
    protected static function getURLAbsolutePathScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLAbsolutePathScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\URLAbsolutePathScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\URLScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\URLScalarTypeResolver
     */
    protected static function getURLScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\URLScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPSchema\SchemaCommons\TypeResolvers\ScalarType\XMLScalarTypeResolver' shared autowired service.
     *
     * @return \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\XMLScalarTypeResolver
     */
    protected static function getXMLScalarTypeResolverService($container)
    {
        $container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\XMLScalarTypeResolver'] = $instance = new \PoPSchema\SchemaCommons\TypeResolvers\ScalarType\XMLScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\BlockContentParser\BlockContentParserInterface' shared autowired service.
     *
     * @return \PoPWPSchema\BlockContentParser\BlockContentParser
     */
    protected static function getBlockContentParserInterfaceService($container)
    {
        $container->services['PoPWPSchema\\BlockContentParser\\BlockContentParserInterface'] = $instance = new \PoPWPSchema\BlockContentParser\BlockContentParser();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\FieldResolvers\InterfaceType\BlockInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\FieldResolvers\InterfaceType\BlockInterfaceTypeFieldResolver
     */
    protected static function getBlockInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\FieldResolvers\\InterfaceType\\BlockInterfaceTypeFieldResolver'] = $instance = new \PoPWPSchema\Blocks\FieldResolvers\InterfaceType\BlockInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\FieldResolvers\ObjectType\BlockObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\FieldResolvers\ObjectType\BlockObjectTypeFieldResolver
     */
    protected static function getBlockObjectTypeFieldResolverService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\FieldResolvers\\ObjectType\\BlockObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Blocks\FieldResolvers\ObjectType\BlockObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver
     */
    protected static function getCustomPostObjectTypeFieldResolver4Service($container)
    {
        $container->services['PoPWPSchema\\Blocks\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Blocks\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\ObjectTypeResolverPickers\GeneralBlockObjectTypeResolverPicker' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\ObjectTypeResolverPickers\GeneralBlockObjectTypeResolverPicker
     */
    protected static function getGeneralBlockObjectTypeResolverPickerService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\ObjectTypeResolverPickers\\GeneralBlockObjectTypeResolverPicker'] = $instance = new \PoPWPSchema\Blocks\ObjectTypeResolverPickers\GeneralBlockObjectTypeResolverPicker();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\RelationalTypeDataLoaders\ObjectType\GeneralBlockObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\RelationalTypeDataLoaders\ObjectType\GeneralBlockObjectTypeDataLoader
     */
    protected static function getGeneralBlockObjectTypeDataLoaderService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\RelationalTypeDataLoaders\\ObjectType\\GeneralBlockObjectTypeDataLoader'] = $instance = new \PoPWPSchema\Blocks\RelationalTypeDataLoaders\ObjectType\GeneralBlockObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\RelationalTypeDataLoaders\UnionType\BlockUnionTypeDataLoader' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\RelationalTypeDataLoaders\UnionType\BlockUnionTypeDataLoader
     */
    protected static function getBlockUnionTypeDataLoaderService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\RelationalTypeDataLoaders\\UnionType\\BlockUnionTypeDataLoader'] = $instance = new \PoPWPSchema\Blocks\RelationalTypeDataLoaders\UnionType\BlockUnionTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\TypeResolvers\InputObjectType\BlockFilterByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\TypeResolvers\InputObjectType\BlockFilterByOneofInputObjectTypeResolver
     */
    protected static function getBlockFilterByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\TypeResolvers\\InputObjectType\\BlockFilterByOneofInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Blocks\TypeResolvers\InputObjectType\BlockFilterByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\TypeResolvers\InterfaceType\BlockInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\TypeResolvers\InterfaceType\BlockInterfaceTypeResolver
     */
    protected static function getBlockInterfaceTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\TypeResolvers\\InterfaceType\\BlockInterfaceTypeResolver'] = $instance = new \PoPWPSchema\Blocks\TypeResolvers\InterfaceType\BlockInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\TypeResolvers\ObjectType\GeneralBlockObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\TypeResolvers\ObjectType\GeneralBlockObjectTypeResolver
     */
    protected static function getGeneralBlockObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\TypeResolvers\\ObjectType\\GeneralBlockObjectTypeResolver'] = $instance = new \PoPWPSchema\Blocks\TypeResolvers\ObjectType\GeneralBlockObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Blocks\TypeResolvers\UnionType\BlockUnionTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Blocks\TypeResolvers\UnionType\BlockUnionTypeResolver
     */
    protected static function getBlockUnionTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Blocks\\TypeResolvers\\UnionType\\BlockUnionTypeResolver'] = $instance = new \PoPWPSchema\Blocks\TypeResolvers\UnionType\BlockUnionTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CommentMeta\Hooks\CommentMetaOrderByQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CommentMeta\Hooks\CommentMetaOrderByQueryHookSet
     */
    protected static function getCommentMetaOrderByQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\CommentMeta\\Hooks\\CommentMetaOrderByQueryHookSet'] = $instance = new \PoPWPSchema\CommentMeta\Hooks\CommentMetaOrderByQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CommentMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CommentMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddMetaQueryInputFieldsInputObjectTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\CommentMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\CommentMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CommentMeta\SchemaHooks\CommentMetaOrderByEnumTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CommentMeta\SchemaHooks\CommentMetaOrderByEnumTypeHookSet
     */
    protected static function getCommentMetaOrderByEnumTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\CommentMeta\\SchemaHooks\\CommentMetaOrderByEnumTypeHookSet'] = $instance = new \PoPWPSchema\CommentMeta\SchemaHooks\CommentMetaOrderByEnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CommentMeta\TypeResolvers\InputObjectType\CommentMetaQueryInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\CommentMeta\TypeResolvers\InputObjectType\CommentMetaQueryInputObjectTypeResolver
     */
    protected static function getCommentMetaQueryInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\CommentMeta\\TypeResolvers\\InputObjectType\\CommentMetaQueryInputObjectTypeResolver'] = $instance = new \PoPWPSchema\CommentMeta\TypeResolvers\InputObjectType\CommentMetaQueryInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Comments\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Comments\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver
     */
    protected static function getCommentObjectTypeFieldResolver6Service($container)
    {
        $container->services['PoPWPSchema\\Comments\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Comments\FieldResolvers\ObjectType\CommentObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Comments\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Comments\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet9Service($container)
    {
        $container->services['PoPWPSchema\\Comments\\Hooks\\QueryHookSet'] = $instance = new \PoPWPSchema\Comments\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Comments\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Comments\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet
     */
    protected static function getConvertDateQueryInputFieldToArrayInputObjectTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\Comments\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\Comments\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPostMeta\Hooks\CustomPostMetaOrderByQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPostMeta\Hooks\CustomPostMetaOrderByQueryHookSet
     */
    protected static function getCustomPostMetaOrderByQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\CustomPostMeta\\Hooks\\CustomPostMetaOrderByQueryHookSet'] = $instance = new \PoPWPSchema\CustomPostMeta\Hooks\CustomPostMetaOrderByQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPostMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPostMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddMetaQueryInputFieldsInputObjectTypeHookSet2Service($container)
    {
        $container->services['PoPWPSchema\\CustomPostMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\CustomPostMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPostMeta\SchemaHooks\CustomPostMetaOrderByEnumTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPostMeta\SchemaHooks\CustomPostMetaOrderByEnumTypeHookSet
     */
    protected static function getCustomPostMetaOrderByEnumTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\CustomPostMeta\\SchemaHooks\\CustomPostMetaOrderByEnumTypeHookSet'] = $instance = new \PoPWPSchema\CustomPostMeta\SchemaHooks\CustomPostMetaOrderByEnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPostMeta\TypeResolvers\InputObjectType\CustomPostMetaQueryInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPostMeta\TypeResolvers\InputObjectType\CustomPostMetaQueryInputObjectTypeResolver
     */
    protected static function getCustomPostMetaQueryInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\CustomPostMeta\\TypeResolvers\\InputObjectType\\CustomPostMetaQueryInputObjectTypeResolver'] = $instance = new \PoPWPSchema\CustomPostMeta\TypeResolvers\InputObjectType\CustomPostMetaQueryInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver
     */
    protected static function getCustomPostObjectTypeFieldResolver5Service($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\CustomPosts\FieldResolvers\ObjectType\CustomPostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\FilterInputs\HasPasswordFilterInput' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\FilterInputs\HasPasswordFilterInput
     */
    protected static function getHasPasswordFilterInputService($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\FilterInputs\\HasPasswordFilterInput'] = $instance = new \PoPWPSchema\CustomPosts\FilterInputs\HasPasswordFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\FilterInputs\PasswordFilterInput' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\FilterInputs\PasswordFilterInput
     */
    protected static function getPasswordFilterInputService($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\FilterInputs\\PasswordFilterInput'] = $instance = new \PoPWPSchema\CustomPosts\FilterInputs\PasswordFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\Hooks\AddCustomPostPasswordToFilterInputQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\Hooks\AddCustomPostPasswordToFilterInputQueryHookSet
     */
    protected static function getAddCustomPostPasswordToFilterInputQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\Hooks\\AddCustomPostPasswordToFilterInputQueryHookSet'] = $instance = new \PoPWPSchema\CustomPosts\Hooks\AddCustomPostPasswordToFilterInputQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\Hooks\CustomPostOrderByQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\Hooks\CustomPostOrderByQueryHookSet
     */
    protected static function getCustomPostOrderByQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\Hooks\\CustomPostOrderByQueryHookSet'] = $instance = new \PoPWPSchema\CustomPosts\Hooks\CustomPostOrderByQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\SchemaHooks\AddCustomPostPasswordInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\SchemaHooks\AddCustomPostPasswordInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddCustomPostPasswordInputFieldsInputObjectTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\AddCustomPostPasswordInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\CustomPosts\SchemaHooks\AddCustomPostPasswordInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet
     */
    protected static function getConvertDateQueryInputFieldToArrayInputObjectTypeHookSet2Service($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\CustomPosts\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\SchemaHooks\CustomPostQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\SchemaHooks\CustomPostQueryHookSet
     */
    protected static function getCustomPostQueryHookSet2Service($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\CustomPostQueryHookSet'] = $instance = new \PoPWPSchema\CustomPosts\SchemaHooks\CustomPostQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\CustomPosts\SchemaHooks\FilterCustomPostStatusEnumTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\CustomPosts\SchemaHooks\FilterCustomPostStatusEnumTypeHookSet
     */
    protected static function getFilterCustomPostStatusEnumTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\FilterCustomPostStatusEnumTypeHookSet'] = $instance = new \PoPWPSchema\CustomPosts\SchemaHooks\FilterCustomPostStatusEnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Media\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Media\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver
     */
    protected static function getMediaObjectTypeFieldResolver3Service($container)
    {
        $container->services['PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Media\FieldResolvers\ObjectType\MediaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Media\FieldResolvers\ObjectType\QueryableMediaObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Media\FieldResolvers\ObjectType\QueryableMediaObjectTypeFieldResolver
     */
    protected static function getQueryableMediaObjectTypeFieldResolverService($container)
    {
        $container->services['PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\QueryableMediaObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Media\FieldResolvers\ObjectType\QueryableMediaObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Media\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Media\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver19Service($container)
    {
        $container->services['PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Media\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Media\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Media\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet
     */
    protected static function getConvertDateQueryInputFieldToArrayInputObjectTypeHookSet3Service($container)
    {
        $container->services['PoPWPSchema\\Media\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\Media\SchemaHooks\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Media\SchemaHooks\InputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Media\SchemaHooks\InputObjectTypeHookSet
     */
    protected static function getInputObjectTypeHookSet3Service($container)
    {
        $container->services['PoPWPSchema\\Media\\SchemaHooks\\InputObjectTypeHookSet'] = $instance = new \PoPWPSchema\Media\SchemaHooks\InputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Menus\FieldResolvers\ObjectType\MenuObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Menus\FieldResolvers\ObjectType\MenuObjectTypeFieldResolver
     */
    protected static function getMenuObjectTypeFieldResolver2Service($container)
    {
        $container->services['PoPWPSchema\\Menus\\FieldResolvers\\ObjectType\\MenuObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Menus\FieldResolvers\ObjectType\MenuObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Menus\FilterInputs\LocationsFilterInput' shared autowired service.
     *
     * @return \PoPWPSchema\Menus\FilterInputs\LocationsFilterInput
     */
    protected static function getLocationsFilterInputService($container)
    {
        $container->services['PoPWPSchema\\Menus\\FilterInputs\\LocationsFilterInput'] = $instance = new \PoPWPSchema\Menus\FilterInputs\LocationsFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Menus\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Menus\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet10Service($container)
    {
        $container->services['PoPWPSchema\\Menus\\Hooks\\QueryHookSet'] = $instance = new \PoPWPSchema\Menus\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Menus\TypeResolvers\ScalarType\MenuLocationEnumStringScalarTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Menus\TypeResolvers\ScalarType\MenuLocationEnumStringScalarTypeResolver
     */
    protected static function getMenuLocationEnumStringScalarTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Menus\\TypeResolvers\\ScalarType\\MenuLocationEnumStringScalarTypeResolver'] = $instance = new \PoPWPSchema\Menus\TypeResolvers\ScalarType\MenuLocationEnumStringScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\FeedbackItemProviders\FeedbackItemProvider' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\FeedbackItemProviders\FeedbackItemProvider
     */
    protected static function getFeedbackItemProvider5Service($container)
    {
        $container->services['PoPWPSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider'] = $instance = new \PoPWPSchema\Meta\FeedbackItemProviders\FeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByArrayValueOperatorEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByArrayValueOperatorEnumTypeResolver
     */
    protected static function getMetaQueryCompareByArrayValueOperatorEnumTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByArrayValueOperatorEnumTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByArrayValueOperatorEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByKeyOperatorEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByKeyOperatorEnumTypeResolver
     */
    protected static function getMetaQueryCompareByKeyOperatorEnumTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByKeyOperatorEnumTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByKeyOperatorEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByNumericValueOperatorEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByNumericValueOperatorEnumTypeResolver
     */
    protected static function getMetaQueryCompareByNumericValueOperatorEnumTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByNumericValueOperatorEnumTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByNumericValueOperatorEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByStringValueOperatorEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByStringValueOperatorEnumTypeResolver
     */
    protected static function getMetaQueryCompareByStringValueOperatorEnumTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByStringValueOperatorEnumTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryCompareByStringValueOperatorEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryValueTypeEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryValueTypeEnumTypeResolver
     */
    protected static function getMetaQueryValueTypeEnumTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryValueTypeEnumTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\EnumType\MetaQueryValueTypeEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByArrayValueInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByArrayValueInputObjectTypeResolver
     */
    protected static function getMetaQueryCompareByArrayValueInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByArrayValueInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByArrayValueInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByKeyInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByKeyInputObjectTypeResolver
     */
    protected static function getMetaQueryCompareByKeyInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByKeyInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByKeyInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByNumericValueInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByNumericValueInputObjectTypeResolver
     */
    protected static function getMetaQueryCompareByNumericValueInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByNumericValueInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByNumericValueInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByOneofInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByOneofInputObjectTypeResolver
     */
    protected static function getMetaQueryCompareByOneofInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByOneofInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByOneofInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByStringValueInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByStringValueInputObjectTypeResolver
     */
    protected static function getMetaQueryCompareByStringValueInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByStringValueInputObjectTypeResolver'] = $instance = new \PoPWPSchema\Meta\TypeResolvers\InputObjectType\MetaQueryCompareByStringValueInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Multisite\FieldResolvers\ObjectType\NetworkSiteObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Multisite\FieldResolvers\ObjectType\NetworkSiteObjectTypeFieldResolver
     */
    protected static function getNetworkSiteObjectTypeFieldResolverService($container)
    {
        $container->services['PoPWPSchema\\Multisite\\FieldResolvers\\ObjectType\\NetworkSiteObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Multisite\FieldResolvers\ObjectType\NetworkSiteObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Multisite\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Multisite\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver20Service($container)
    {
        $container->services['PoPWPSchema\\Multisite\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Multisite\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Multisite\RelationalTypeDataLoaders\ObjectType\NetworkSiteObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoPWPSchema\Multisite\RelationalTypeDataLoaders\ObjectType\NetworkSiteObjectTypeDataLoader
     */
    protected static function getNetworkSiteObjectTypeDataLoaderService($container)
    {
        $container->services['PoPWPSchema\\Multisite\\RelationalTypeDataLoaders\\ObjectType\\NetworkSiteObjectTypeDataLoader'] = $instance = new \PoPWPSchema\Multisite\RelationalTypeDataLoaders\ObjectType\NetworkSiteObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Multisite\TypeAPIs\MultisiteTypeAPIInterface' shared autowired service.
     *
     * @return \PoPWPSchema\Multisite\TypeAPIs\MultisiteTypeAPI
     */
    protected static function getMultisiteTypeAPIInterfaceService($container)
    {
        $container->services['PoPWPSchema\\Multisite\\TypeAPIs\\MultisiteTypeAPIInterface'] = $instance = new \PoPWPSchema\Multisite\TypeAPIs\MultisiteTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Multisite\TypeResolvers\ObjectType\NetworkSiteObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Multisite\TypeResolvers\ObjectType\NetworkSiteObjectTypeResolver
     */
    protected static function getNetworkSiteObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\Multisite\\TypeResolvers\\ObjectType\\NetworkSiteObjectTypeResolver'] = $instance = new \PoPWPSchema\Multisite\TypeResolvers\ObjectType\NetworkSiteObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\PageBuilder\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\PageBuilder\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver21Service($container)
    {
        $container->services['PoPWPSchema\\PageBuilder\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\PageBuilder\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\PageBuilder\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\PageBuilder\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver22Service($container)
    {
        $container->services['PoPWPSchema\\PageBuilder\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\PageBuilder\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\PageBuilder\Registries\PageBuilderProviderRegistryInterface' shared autowired service.
     *
     * @return \PoPWPSchema\PageBuilder\Registries\PageBuilderProviderRegistry
     */
    protected static function getPageBuilderProviderRegistryInterfaceService($container)
    {
        return $container->services['PoPWPSchema\\PageBuilder\\Registries\\PageBuilderProviderRegistryInterface'] = new \PoPWPSchema\PageBuilder\Registries\PageBuilderProviderRegistry();
    }

    /**
     * Gets the public 'PoPWPSchema\PageBuilder\Services\PageBuilderServiceInterface' shared autowired service.
     *
     * @return \PoPWPSchema\PageBuilder\Services\PageBuilderService
     */
    protected static function getPageBuilderServiceInterfaceService($container)
    {
        $container->services['PoPWPSchema\\PageBuilder\\Services\\PageBuilderServiceInterface'] = $instance = new \PoPWPSchema\PageBuilder\Services\PageBuilderService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\PageBuilder\TypeAPIs\PageBuilderTypeAPIInterface' shared autowired service.
     *
     * @return \PoPWPSchema\PageBuilder\TypeAPIs\PageBuilderTypeAPI
     */
    protected static function getPageBuilderTypeAPIInterfaceService($container)
    {
        $container->services['PoPWPSchema\\PageBuilder\\TypeAPIs\\PageBuilderTypeAPIInterface'] = $instance = new \PoPWPSchema\PageBuilder\TypeAPIs\PageBuilderTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\PageBuilder\TypeResolvers\EnumType\PageBuilderProvidersEnumStringTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\PageBuilder\TypeResolvers\EnumType\PageBuilderProvidersEnumStringTypeResolver
     */
    protected static function getPageBuilderProvidersEnumStringTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\PageBuilder\\TypeResolvers\\EnumType\\PageBuilderProvidersEnumStringTypeResolver'] = $instance = new \PoPWPSchema\PageBuilder\TypeResolvers\EnumType\PageBuilderProvidersEnumStringTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Pages\FieldResolvers\ObjectType\PageObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Pages\FieldResolvers\ObjectType\PageObjectTypeFieldResolver
     */
    protected static function getPageObjectTypeFieldResolver4Service($container)
    {
        $container->services['PoPWPSchema\\Pages\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Pages\FieldResolvers\ObjectType\PageObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Pages\Hooks\AddPagePasswordToFilterInputQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Pages\Hooks\AddPagePasswordToFilterInputQueryHookSet
     */
    protected static function getAddPagePasswordToFilterInputQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\Pages\\Hooks\\AddPagePasswordToFilterInputQueryHookSet'] = $instance = new \PoPWPSchema\Pages\Hooks\AddPagePasswordToFilterInputQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Pages\SchemaHooks\AddPagePasswordInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Pages\SchemaHooks\AddPagePasswordInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddPagePasswordInputFieldsInputObjectTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\Pages\\SchemaHooks\\AddPagePasswordInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\Pages\SchemaHooks\AddPagePasswordInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Posts\FieldResolvers\ObjectType\PostObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Posts\FieldResolvers\ObjectType\PostObjectTypeFieldResolver
     */
    protected static function getPostObjectTypeFieldResolver5Service($container)
    {
        $container->services['PoPWPSchema\\Posts\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Posts\FieldResolvers\ObjectType\PostObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Posts\FilterInputs\IsStickyFilterInput' shared autowired service.
     *
     * @return \PoPWPSchema\Posts\FilterInputs\IsStickyFilterInput
     */
    protected static function getIsStickyFilterInputService($container)
    {
        $container->services['PoPWPSchema\\Posts\\FilterInputs\\IsStickyFilterInput'] = $instance = new \PoPWPSchema\Posts\FilterInputs\IsStickyFilterInput();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Posts\Hooks\AddPostPasswordToFilterInputQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Posts\Hooks\AddPostPasswordToFilterInputQueryHookSet
     */
    protected static function getAddPostPasswordToFilterInputQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\Posts\\Hooks\\AddPostPasswordToFilterInputQueryHookSet'] = $instance = new \PoPWPSchema\Posts\Hooks\AddPostPasswordToFilterInputQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Posts\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Posts\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet11Service($container)
    {
        $container->services['PoPWPSchema\\Posts\\Hooks\\QueryHookSet'] = $instance = new \PoPWPSchema\Posts\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Posts\SchemaHooks\AddPostPasswordInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Posts\SchemaHooks\AddPostPasswordInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddPostPasswordInputFieldsInputObjectTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\Posts\\SchemaHooks\\AddPostPasswordInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\Posts\SchemaHooks\AddPostPasswordInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Posts\SchemaHooks\InputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Posts\SchemaHooks\InputObjectTypeHookSet
     */
    protected static function getInputObjectTypeHookSet4Service($container)
    {
        $container->services['PoPWPSchema\\Posts\\SchemaHooks\\InputObjectTypeHookSet'] = $instance = new \PoPWPSchema\Posts\SchemaHooks\InputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\SchemaCommons\TypeResolvers\EnumType\RelationEnumTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\SchemaCommons\TypeResolvers\EnumType\RelationEnumTypeResolver
     */
    protected static function getRelationEnumTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\RelationEnumTypeResolver'] = $instance = new \PoPWPSchema\SchemaCommons\TypeResolvers\EnumType\RelationEnumTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Settings\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Settings\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver23Service($container)
    {
        $container->services['PoPWPSchema\\Settings\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Settings\ConditionalOnModule\CustomPosts\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Settings\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Settings\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver24Service($container)
    {
        $container->services['PoPWPSchema\\Settings\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Settings\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Settings\TypeAPIs\SettingsTypeAPIInterface' shared autowired service.
     *
     * @return \PoPWPSchema\Settings\TypeAPIs\SettingsTypeAPI
     */
    protected static function getSettingsTypeAPIInterface2Service($container)
    {
        $container->services['PoPWPSchema\\Settings\\TypeAPIs\\SettingsTypeAPIInterface'] = $instance = new \PoPWPSchema\Settings\TypeAPIs\SettingsTypeAPI();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Site\FieldResolvers\ObjectType\RootObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Site\FieldResolvers\ObjectType\RootObjectTypeFieldResolver
     */
    protected static function getRootObjectTypeFieldResolver25Service($container)
    {
        $container->services['PoPWPSchema\\Site\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Site\FieldResolvers\ObjectType\RootObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\TaxonomyMeta\Hooks\TaxonomyMetaOrderByQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\TaxonomyMeta\Hooks\TaxonomyMetaOrderByQueryHookSet
     */
    protected static function getTaxonomyMetaOrderByQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\TaxonomyMeta\\Hooks\\TaxonomyMetaOrderByQueryHookSet'] = $instance = new \PoPWPSchema\TaxonomyMeta\Hooks\TaxonomyMetaOrderByQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\TaxonomyMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\TaxonomyMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddMetaQueryInputFieldsInputObjectTypeHookSet3Service($container)
    {
        $container->services['PoPWPSchema\\TaxonomyMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\TaxonomyMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\TaxonomyMeta\SchemaHooks\TaxonomyMetaOrderByEnumTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\TaxonomyMeta\SchemaHooks\TaxonomyMetaOrderByEnumTypeHookSet
     */
    protected static function getTaxonomyMetaOrderByEnumTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\TaxonomyMeta\\SchemaHooks\\TaxonomyMetaOrderByEnumTypeHookSet'] = $instance = new \PoPWPSchema\TaxonomyMeta\SchemaHooks\TaxonomyMetaOrderByEnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\TaxonomyMeta\TypeResolvers\InputObjectType\TaxonomyMetaQueryInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\TaxonomyMeta\TypeResolvers\InputObjectType\TaxonomyMetaQueryInputObjectTypeResolver
     */
    protected static function getTaxonomyMetaQueryInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\TaxonomyMeta\\TypeResolvers\\InputObjectType\\TaxonomyMetaQueryInputObjectTypeResolver'] = $instance = new \PoPWPSchema\TaxonomyMeta\TypeResolvers\InputObjectType\TaxonomyMetaQueryInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\UserMeta\Hooks\UserMetaOrderByQueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\UserMeta\Hooks\UserMetaOrderByQueryHookSet
     */
    protected static function getUserMetaOrderByQueryHookSetService($container)
    {
        $container->services['PoPWPSchema\\UserMeta\\Hooks\\UserMetaOrderByQueryHookSet'] = $instance = new \PoPWPSchema\UserMeta\Hooks\UserMetaOrderByQueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\UserMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\UserMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet
     */
    protected static function getAddMetaQueryInputFieldsInputObjectTypeHookSet4Service($container)
    {
        $container->services['PoPWPSchema\\UserMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] = $instance = new \PoPWPSchema\UserMeta\SchemaHooks\AddMetaQueryInputFieldsInputObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\UserMeta\SchemaHooks\UserMetaOrderByEnumTypeHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\UserMeta\SchemaHooks\UserMetaOrderByEnumTypeHookSet
     */
    protected static function getUserMetaOrderByEnumTypeHookSetService($container)
    {
        $container->services['PoPWPSchema\\UserMeta\\SchemaHooks\\UserMetaOrderByEnumTypeHookSet'] = $instance = new \PoPWPSchema\UserMeta\SchemaHooks\UserMetaOrderByEnumTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\UserMeta\TypeResolvers\InputObjectType\UserMetaQueryInputObjectTypeResolver' shared autowired service.
     *
     * @return \PoPWPSchema\UserMeta\TypeResolvers\InputObjectType\UserMetaQueryInputObjectTypeResolver
     */
    protected static function getUserMetaQueryInputObjectTypeResolverService($container)
    {
        $container->services['PoPWPSchema\\UserMeta\\TypeResolvers\\InputObjectType\\UserMetaQueryInputObjectTypeResolver'] = $instance = new \PoPWPSchema\UserMeta\TypeResolvers\InputObjectType\UserMetaQueryInputObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Users\FieldResolvers\ObjectType\UserObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoPWPSchema\Users\FieldResolvers\ObjectType\UserObjectTypeFieldResolver
     */
    protected static function getUserObjectTypeFieldResolver6Service($container)
    {
        $container->services['PoPWPSchema\\Users\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] = $instance = new \PoPWPSchema\Users\FieldResolvers\ObjectType\UserObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoPWPSchema\Users\Hooks\QueryHookSet' shared autowired service.
     *
     * @return \PoPWPSchema\Users\Hooks\QueryHookSet
     */
    protected static function getQueryHookSet12Service($container)
    {
        $container->services['PoPWPSchema\\Users\\Hooks\\QueryHookSet'] = $instance = new \PoPWPSchema\Users\Hooks\QueryHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\AttachableExtensions\AttachExtensionServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\AttachableExtensions\AttachExtensionService
     */
    protected static function getAttachExtensionServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\AttachableExtensions\\AttachExtensionServiceInterface'] = $instance = new \PoP\ComponentModel\AttachableExtensions\AttachExtensionService();

        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoP\\ComponentModel\\FieldResolvers\\InterfaceType\\IdentifiableObjectInterfaceTypeFieldResolver'] ?? self::getIdentifiableObjectInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\CoreGlobalObjectTypeFieldResolver'] ?? self::getCoreGlobalObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\IdentifiableObjectObjectTypeFieldResolver'] ?? self::getIdentifiableObjectObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\ObjectObjectTypeFieldResolver'] ?? self::getObjectObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\TypeNameGlobalObjectTypeFieldResolver'] ?? self::getTypeNameGlobalObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'directive-resolvers', ($container->services['PoP\\ComponentModel\\DirectiveResolvers\\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver'] ?? self::getConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolverService($container)));
        $instance->enqueueExtension('boot', 'directive-resolvers', ($container->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeFieldDirectiveResolver'] ?? self::getResolveValueAndMergeFieldDirectiveResolverService($container)));
        $instance->enqueueExtension('boot', 'directive-resolvers', ($container->services['PoP\\ComponentModel\\DirectiveResolvers\\SerializeLeafOutputTypeValuesFieldDirectiveResolver'] ?? self::getSerializeLeafOutputTypeValuesFieldDirectiveResolverService($container)));
        $instance->enqueueExtension('boot', 'directive-resolvers', ($container->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateFieldDirectiveResolver'] ?? self::getValidateFieldDirectiveResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoP\\Engine\\FieldResolvers\\ObjectType\\AppStateMethodsGlobalObjectTypeFieldResolver'] ?? self::getAppStateMethodsGlobalObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'directive-resolvers', ($container->services['PoP\\Engine\\DirectiveResolvers\\IncludeFieldDirectiveResolver'] ?? self::getIncludeFieldDirectiveResolverService($container)));
        $instance->enqueueExtension('boot', 'directive-resolvers', ($container->services['PoP\\Engine\\DirectiveResolvers\\SkipFieldDirectiveResolver'] ?? self::getSkipFieldDirectiveResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPAPI\\API\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\DirectiveExtensionsObjectTypeFieldResolver'] ?? self::getDirectiveExtensionsObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\DirectiveObjectTypeFieldResolver'] ?? self::getDirectiveObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\EnumValueExtensionsObjectTypeFieldResolver'] ?? self::getEnumValueExtensionsObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\EnumValueObjectTypeFieldResolver'] ?? self::getEnumValueObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\DirectiveSchemaObjectTypeFieldResolver'] ?? self::getDirectiveSchemaObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\FilterSystemDirectiveSchemaObjectTypeFieldResolver'] ?? self::getFilterSystemDirectiveSchemaObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\SchemaObjectTypeFieldResolver'] ?? self::getSchemaObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\Extensions\\TypeObjectTypeFieldResolver'] ?? self::getTypeObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\FieldExtensionsObjectTypeFieldResolver'] ?? self::getFieldExtensionsObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\FieldObjectTypeFieldResolver'] ?? self::getFieldObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\GlobalObjectTypeFieldResolver'] ?? self::getGlobalObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\InputValueExtensionsObjectTypeFieldResolver'] ?? self::getInputValueExtensionsObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\InputValueObjectTypeFieldResolver'] ?? self::getInputValueObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\NamedTypeExtensionsObjectTypeFieldResolver'] ?? self::getNamedTypeExtensionsObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\RegisterQueryAndMutationRootsRootObjectTypeFieldResolver'] ?? self::getRegisterQueryAndMutationRootsRootObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SchemaExtensionsObjectTypeFieldResolver'] ?? self::getSchemaExtensionsObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SchemaObjectTypeFieldResolver'] ?? self::getSchemaObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\SuperRootObjectTypeFieldResolver'] ?? self::getSuperRootObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['GraphQLByPoP\\GraphQLServer\\FieldResolvers\\ObjectType\\TypeObjectTypeFieldResolver'] ?? self::getTypeObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\InterfaceType\\ErrorPayloadInterfaceTypeFieldResolver'] ?? self::getErrorPayloadInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\ErrorPayloadObjectTypeFieldResolver'] ?? self::getErrorPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\GenericErrorPayloadObjectTypeFieldResolver'] ?? self::getGenericErrorPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPSchema\\SchemaCommons\\FieldResolvers\\ObjectType\\TransientOperationPayloadObjectTypeFieldResolver'] ?? self::getTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\QueriedObject\\FieldResolvers\\InterfaceType\\QueryableInterfaceTypeFieldResolver'] ?? self::getQueryableInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPosts\\FieldResolvers\\InterfaceType\\CustomPostInterfaceTypeFieldResolver'] ?? self::getCustomPostInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] ?? self::getCustomPostObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPosts\\FieldResolvers\\ObjectType\\RootCustomPostListObjectTypeFieldResolver'] ?? self::getRootCustomPostListObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPosts\\ObjectTypeResolverPickers\\CustomPostUnionGenericCustomPostObjectTypeResolverPicker'] ?? self::getCustomPostUnionGenericCustomPostObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\Categories\\ObjectTypeResolverPickers\\CategoryUnionGenericCategoryObjectTypeResolverPicker'] ?? self::getCategoryUnionGenericCategoryObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\Categories\\FieldResolvers\\InterfaceType\\CategoryInterfaceTypeFieldResolver'] ?? self::getCategoryInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCategoryListObjectTypeFieldResolver'] ?? self::getGenericCategoryListObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCategoryObjectTypeFieldResolver'] ?? self::getGenericCategoryObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\GenericCustomPostQueryableObjectTypeFieldResolver'] ?? self::getGenericCustomPostQueryableObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Categories\\FieldResolvers\\ObjectType\\RootCategoryObjectTypeFieldResolver'] ?? self::getRootCategoryObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\Users\\FieldResolvers\\InterfaceType\\WithAuthorInterfaceTypeFieldResolver'] ?? self::getWithAuthorInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Users\\FieldResolvers\\ObjectType\\RootUserObjectTypeFieldResolver'] ?? self::getRootUserObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Users\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] ?? self::getUserObjectTypeFieldResolver5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostListUserObjectTypeFieldResolver'] ?? self::getCustomPostListUserObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] ?? self::getCustomPostObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserRoles\\FieldResolvers\\ObjectType\\RootRolesObjectTypeFieldResolver'] ?? self::getRootRolesObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserRoles\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] ?? self::getUserObjectTypeFieldResolver4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\ObjectTypeFieldResolver'] ?? self::getObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\RootMeObjectTypeFieldResolver'] ?? self::getRootMeObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserState\\FieldResolvers\\ObjectType\\UserStateObjectTypeFieldResolver'] ?? self::getUserStateObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootLoginUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootLogoutUserMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver18Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\UserMutationPayloadObjectTypeFieldResolver'] ?? self::getUserMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserStateMutations\\FieldResolvers\\ObjectType\\UserMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getUserMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker10Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\InvalidUserEmailErrorPayloadObjectTypeResolverPicker'] ?? self::getInvalidUserEmailErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\InvalidUsernameErrorPayloadObjectTypeResolverPicker'] ?? self::getInvalidUsernameErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\PasswordIsIncorrectErrorPayloadObjectTypeResolverPicker'] ?? self::getPasswordIsIncorrectErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\UserIsLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsLoggedInErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\UserStateMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker11Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\RootRolesObjectTypeFieldResolver'] ?? self::getRootRolesObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] ?? self::getUserObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserRolesWP\\FieldResolvers\\ObjectType\\UserRoleObjectTypeFieldResolver'] ?? self::getUserRoleObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\Comments\\FieldResolvers\\InterfaceType\\CommentableInterfaceTypeFieldResolver'] ?? self::getCommentableInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] ?? self::getCommentObjectTypeFieldResolver5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\CommentableGenericCustomPostObjectTypeFieldResolver'] ?? self::getCommentableGenericCustomPostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Comments\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\CommentUserObjectTypeFieldResolver'] ?? self::getCommentUserObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentMutationPayloadObjectTypeFieldResolver'] ?? self::getCommentMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getCommentMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] ?? self::getCommentObjectTypeFieldResolver4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getCommentReplyMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\CustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostAddCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] ?? self::getGenericCustomPostObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootAddCommentToCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\RootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootReplyCommentMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\FieldResolvers\\ObjectType\\UserStateRootObjectTypeFieldResolver'] ?? self::getUserStateRootObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPicker'] ?? self::getCommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPicker'] ?? self::getCommentAuthorNameIsMissingErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPicker'] ?? self::getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker'] ?? self::getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CommentMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] ?? self::getCommentObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] ?? self::getCommentObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] ?? self::getGenericCustomPostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMutations\\ConditionalOnModule\\Users\\Overrides\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Media\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver'] ?? self::getMediaObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Media\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver11Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\MediaUserObjectTypeFieldResolver'] ?? self::getMediaUserObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMedia\\FieldResolvers\\InterfaceType\\WithFeaturedImageInterfaceTypeFieldResolver'] ?? self::getWithFeaturedImageInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver'] ?? self::getWithFeaturedImageGenericCustomPostObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostMutationPayloadObjectTypeFieldResolver'] ?? self::getGenericCustomPostMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] ?? self::getGenericCustomPostObjectTypeFieldResolver4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\GenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericCustomPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver8Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver'] ?? self::getRootQueryableObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdateGenericCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaItemMutationPayloadObjectTypeFieldResolver'] ?? self::getMediaItemMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getMediaItemMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver'] ?? self::getMediaObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\MediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getMediaUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver10Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\RootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdateMediaItemMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\MediaMutations\\FieldResolvers\\ObjectType\\UserStateRootObjectTypeFieldResolver'] ?? self::getUserStateRootObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker7Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker6Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getUserDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPicker'] ?? self::getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPicker'] ?? self::getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker6Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker6Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostMutationPayloadObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostRemoveFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\CustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostSetFeaturedImageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver7Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootRemoveFeaturedImageFromCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\RootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootSetFeaturedImageOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImageGenericCustomPostObjectTypeFieldResolver'] ?? self::getWithFeaturedImageGenericCustomPostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\CreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCreateOrUpdateCustomPostMediaItemDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPicker'] ?? self::getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\MediaItemDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getMediaItemDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostMediaMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostUserMutations\\ObjectTypeResolverPickers\\CreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCreateOrUpdateCustomPostUserDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Pages\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] ?? self::getPageObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Pages\\FieldResolvers\\ObjectType\\RootPageObjectTypeFieldResolver'] ?? self::getRootPageObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\Pages\\ObjectTypeResolverPickers\\PageCustomPostObjectTypeResolverPicker'] ?? self::getPageCustomPostObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Pages\\ConditionalOnModule\\Comments\\FieldResolvers\\ObjectType\\CommentablePageObjectTypeFieldResolver'] ?? self::getCommentablePageObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Pages\\ConditionalOnModule\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImagePageObjectTypeFieldResolver'] ?? self::getWithFeaturedImagePageObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageMutationPayloadObjectTypeFieldResolver'] ?? self::getPageMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getPageMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] ?? self::getPageObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\PageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPageUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver13Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver'] ?? self::getRootQueryableObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\FieldResolvers\\ObjectType\\RootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdatePageMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PageMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker7Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMutations\\ConditionalOnModule\\CommentMutations\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] ?? self::getPageObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Posts\\FieldResolvers\\ObjectType\\RootPostObjectTypeFieldResolver'] ?? self::getRootPostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\Posts\\ObjectTypeResolverPickers\\PostCustomPostObjectTypeResolverPicker'] ?? self::getPostCustomPostObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\FieldResolvers\\ObjectType\\PostUserObjectTypeFieldResolver'] ?? self::getPostUserObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\Comments\\FieldResolvers\\ObjectType\\CommentablePostObjectTypeFieldResolver'] ?? self::getCommentablePostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\CustomPostMedia\\FieldResolvers\\ObjectType\\WithFeaturedImagePostObjectTypeFieldResolver'] ?? self::getWithFeaturedImagePostObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\ChildPostCategoryObjectTypeFieldResolver'] ?? self::getChildPostCategoryObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\CustomPostListPostCategoryObjectTypeFieldResolver'] ?? self::getCustomPostListPostCategoryObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostCategoryListObjectTypeFieldResolver'] ?? self::getPostCategoryListObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostCategoryObjectTypeFieldResolver'] ?? self::getPostCategoryObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\PostQueryableObjectTypeFieldResolver'] ?? self::getPostQueryableObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategories\\FieldResolvers\\ObjectType\\RootPostCategoryObjectTypeFieldResolver'] ?? self::getRootPostCategoryObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategories\\ObjectTypeResolverPickers\\CategoryUnionPostCategoryObjectTypeResolverPicker'] ?? self::getCategoryUnionPostCategoryObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryMutationPayloadObjectTypeFieldResolver'] ?? self::getGenericCategoryMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryObjectTypeFieldResolver'] ?? self::getGenericCategoryObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] ?? self::getGenericCustomPostObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\GenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericCustomPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootDeleteGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootGenericCategoryCRUDObjectTypeFieldResolver'] ?? self::getRootGenericCategoryCRUDObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver6Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootSetCategoriesOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdateGenericCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] ?? self::getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver'] ?? self::getPostMutationPayloadObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] ?? self::getPostObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\PostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPostUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver15Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootQueryableObjectTypeFieldResolver'] ?? self::getRootQueryableObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\FieldResolvers\\ObjectType\\RootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdatePostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMutations\\ConditionalOnModule\\CommentMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] ?? self::getPostObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPostCategoryDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryMutationPayloadObjectTypeFieldResolver'] ?? self::getPostCategoryMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getPostCategoryMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryObjectTypeFieldResolver'] ?? self::getPostCategoryObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPostCategoryUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver'] ?? self::getPostMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] ?? self::getPostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\PostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPostSetCategoriesMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootDeletePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver14Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootPostCategoryCRUDObjectTypeFieldResolver'] ?? self::getRootPostCategoryCRUDObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootSetCategoriesOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\FieldResolvers\\ObjectType\\RootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdatePostCategoryTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker8Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker7Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] ?? self::getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostCategoryMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker8Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PageMediaMutations\\ConditionalOnModule\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImagePageObjectTypeFieldResolver'] ?? self::getWithFeaturedImagePageObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostMediaMutations\\ConditionalOnModule\\CustomPostMediaMutations\\FieldResolvers\\ObjectType\\WithFeaturedImagePostObjectTypeFieldResolver'] ?? self::getWithFeaturedImagePostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\Tags\\ObjectTypeResolverPickers\\TagUnionGenericTagObjectTypeResolverPicker'] ?? self::getTagUnionGenericTagObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\Tags\\FieldResolvers\\InterfaceType\\TagInterfaceTypeFieldResolver'] ?? self::getTagInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericCustomPostQueryableObjectTypeFieldResolver'] ?? self::getGenericCustomPostQueryableObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericTagListObjectTypeFieldResolver'] ?? self::getGenericTagListObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\GenericTagObjectTypeFieldResolver'] ?? self::getGenericTagObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Tags\\FieldResolvers\\ObjectType\\RootTagObjectTypeFieldResolver'] ?? self::getRootTagObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\CustomPostMutationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostMutationPayloadObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\CustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getCustomPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericCustomPostObjectTypeFieldResolver'] ?? self::getGenericCustomPostObjectTypeFieldResolver5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericCustomPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagMutationPayloadObjectTypeFieldResolver'] ?? self::getGenericTagMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericTagMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagObjectTypeFieldResolver'] ?? self::getGenericTagObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\GenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getGenericTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootDeleteGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootGenericTagCRUDObjectTypeFieldResolver'] ?? self::getRootGenericTagCRUDObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver9Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootSetTagsOnCustomPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\FieldResolvers\\ObjectType\\RootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdateGenericTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\GenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericCustomPostMutationTagTermDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getTagTermDoesNotExistErrorPayloadObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] ?? self::getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\CustomPostTagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker9Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\TagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker10Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\CustomPostListPostTagObjectTypeFieldResolver'] ?? self::getCustomPostListPostTagObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostQueryableObjectTypeFieldResolver'] ?? self::getPostQueryableObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostTagListObjectTypeFieldResolver'] ?? self::getPostTagListObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\PostTagObjectTypeFieldResolver'] ?? self::getPostTagObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTags\\FieldResolvers\\ObjectType\\RootPostTagObjectTypeFieldResolver'] ?? self::getRootPostTagObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTags\\ObjectTypeResolverPickers\\TagUnionPostTagObjectTypeResolverPicker'] ?? self::getTagUnionPostTagObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostMutationPayloadObjectTypeFieldResolver'] ?? self::getPostMutationPayloadObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getPostMutationTransientEntityOperationPayloadObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] ?? self::getPostObjectTypeFieldResolver4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPostSetTagsMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPostTagDeleteMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagMutationPayloadObjectTypeFieldResolver'] ?? self::getPostTagMutationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolver'] ?? self::getPostTagMutationTransientEntityOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagObjectTypeFieldResolver'] ?? self::getPostTagObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\PostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getPostTagUpdateMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootCreatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootDeletePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver16Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootPostTagCRUDObjectTypeFieldResolver'] ?? self::getRootPostTagCRUDObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootSetTagsOnPostMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\PostTagMutations\\FieldResolvers\\ObjectType\\RootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolver'] ?? self::getRootUpdatePostTagTermMutationPayloadErrorsFieldTransientOperationPayloadObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\CustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverPicker9Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\GenericErrorPayloadObjectTypeResolverPicker'] ?? self::getGenericErrorPayloadObjectTypeResolverPicker8Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverPicker6Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker'] ?? self::getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverPicker6Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\TagTermDoesNotExistErrorPayloadObjectTypeResolverPicker'] ?? self::getTagTermDoesNotExistErrorPayloadObjectTypeResolverPicker2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\TaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker'] ?? self::getTaxonomyIsNotValidErrorPayloadObjectTypeResolverPicker4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPCMSSchema\\PostTagMutations\\ObjectTypeResolverPickers\\UserIsNotLoggedInErrorPayloadObjectTypeResolverPicker'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverPicker9Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserAvatars\\FieldResolvers\\ObjectType\\UserAvatarObjectTypeFieldResolver'] ?? self::getUserAvatarObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserAvatars\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] ?? self::getUserObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPCMSSchema\\Meta\\FieldResolvers\\InterfaceType\\WithMetaInterfaceTypeFieldResolver'] ?? self::getWithMetaInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CommentMeta\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] ?? self::getCommentObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Comments\\FieldResolvers\\ObjectType\\CommentObjectTypeFieldResolver'] ?? self::getCommentObjectTypeFieldResolver6Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\CustomPostMeta\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] ?? self::getCustomPostObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\CustomPosts\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] ?? self::getCustomPostObjectTypeFieldResolver5Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\MediaObjectTypeFieldResolver'] ?? self::getMediaObjectTypeFieldResolver3Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\QueryableMediaObjectTypeFieldResolver'] ?? self::getQueryableMediaObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Media\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver19Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\MenuItemObjectTypeFieldResolver'] ?? self::getMenuItemObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\MenuObjectTypeFieldResolver'] ?? self::getMenuObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Menus\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver12Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Menus\\FieldResolvers\\ObjectType\\MenuObjectTypeFieldResolver'] ?? self::getMenuObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Pages\\FieldResolvers\\ObjectType\\PageObjectTypeFieldResolver'] ?? self::getPageObjectTypeFieldResolver4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Posts\\FieldResolvers\\ObjectType\\PostObjectTypeFieldResolver'] ?? self::getPostObjectTypeFieldResolver5Service($container)));
        $instance->enqueueExtension('boot', 'interface-type-field-resolvers', ($container->services['PoPWPSchema\\Blocks\\FieldResolvers\\InterfaceType\\BlockInterfaceTypeFieldResolver'] ?? self::getBlockInterfaceTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Blocks\\FieldResolvers\\ObjectType\\BlockObjectTypeFieldResolver'] ?? self::getBlockObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Blocks\\FieldResolvers\\ObjectType\\CustomPostObjectTypeFieldResolver'] ?? self::getCustomPostObjectTypeFieldResolver4Service($container)));
        $instance->enqueueExtension('boot', 'object-type-resolver-pickers', ($container->services['PoPWPSchema\\Blocks\\ObjectTypeResolverPickers\\GeneralBlockObjectTypeResolverPicker'] ?? self::getGeneralBlockObjectTypeResolverPickerService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\Settings\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver17Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Settings\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver24Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Settings\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver23Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Site\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver25Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\PageBuilder\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver22Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\PageBuilder\\ConditionalOnModule\\CustomPosts\\FieldResolvers\\ObjectType\\RootObjectTypeFieldResolver'] ?? self::getRootObjectTypeFieldResolver21Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\TaxonomyMeta\\FieldResolvers\\ObjectType\\TaxonomyObjectTypeFieldResolver'] ?? self::getTaxonomyObjectTypeFieldResolverService($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPCMSSchema\\UserMeta\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] ?? self::getUserObjectTypeFieldResolver2Service($container)));
        $instance->enqueueExtension('boot', 'object-type-field-resolvers', ($container->services['PoPWPSchema\\Users\\FieldResolvers\\ObjectType\\UserObjectTypeFieldResolver'] ?? self::getUserObjectTypeFieldResolver6Service($container)));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\AttachableExtensions\AttachableExtensionManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\AttachableExtensions\AttachableExtensionManager
     */
    protected static function getAttachableExtensionManagerInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\AttachableExtensions\\AttachableExtensionManagerInterface'] = new \PoP\ComponentModel\AttachableExtensions\AttachableExtensionManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Cache\CacheConfigurationManagerInterface' shared autowired service.
     *
     * @return \GatoGraphQL\GatoGraphQL\Overrides\ConfigurationCache\OperationalCacheConfigurationManager
     */
    protected static function getCacheConfigurationManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface'] = $instance = new \GatoGraphQL\GatoGraphQL\Overrides\ConfigurationCache\OperationalCacheConfigurationManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Cache\PersistentCacheInterface' shared autowired service.
     *
     * @return \PoP\Engine\Cache\Cache
     */
    protected static function getPersistentCacheInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Cache\\PersistentCacheInterface'] = $instance = new \PoP\Engine\Cache\Cache(($container->services['persistent_cache_item_pool'] ?? self::getPersistentCacheItemPoolService($container)));

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Cache\TransientCacheInterface' shared autowired service.
     *
     * @return \PoP\Engine\Cache\Cache
     */
    protected static function getTransientCacheInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Cache\\TransientCacheInterface'] = $instance = new \PoP\Engine\Cache\Cache(($container->services['transient_cache_item_pool'] ??= new \GatoExternalPrefixByGatoGraphQL\Symfony\Component\Cache\Adapter\ArrayAdapter()));

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentFiltering\ComponentFilterManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentFiltering\ComponentFilterManager
     */
    protected static function getComponentFilterManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentFiltering\\ComponentFilterManagerInterface'] = $instance = new \PoP\ComponentModel\ComponentFiltering\ComponentFilterManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));
        $instance->addComponentFilter(($container->services['PoP\\ComponentModel\\ComponentFilters\\ComponentPaths'] ?? self::getComponentPathsService($container)), 'PoP\\ComponentModel\\ComponentFilters\\ComponentPaths');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentFilters\ComponentPaths' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentFilters\ComponentPaths
     */
    protected static function getComponentPathsService($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentFilters\\ComponentPaths'] = $instance = new \PoP\ComponentModel\ComponentFilters\ComponentPaths();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentHelpers\ComponentHelpersInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentHelpers\ComponentHelpers
     */
    protected static function getComponentHelpersInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentHelpers\\ComponentHelpersInterface'] = $instance = new \PoP\ComponentModel\ComponentHelpers\ComponentHelpers();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentPath\ComponentPathHelpersInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentPath\ComponentPathHelpers
     */
    protected static function getComponentPathHelpersInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentPath\\ComponentPathHelpersInterface'] = $instance = new \PoP\ComponentModel\ComponentPath\ComponentPathHelpers();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentPath\ComponentPathManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentPath\ComponentPathManager
     */
    protected static function getComponentPathManagerInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\ComponentPath\\ComponentPathManagerInterface'] = new \PoP\ComponentModel\ComponentPath\ComponentPathManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentProcessors\ComponentProcessorManager' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentProcessors\ComponentProcessorManager
     */
    protected static function getComponentProcessorManagerService($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentProcessors\\ComponentProcessorManager'] = $instance = new \PoP\ComponentModel\ComponentProcessors\ComponentProcessorManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentProcessors\ComponentProcessorManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentProcessors\ComponentProcessorManager
     */
    protected static function getComponentProcessorManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentProcessors\\ComponentProcessorManagerInterface'] = $instance = new \PoP\ComponentModel\ComponentProcessors\ComponentProcessorManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentProcessors\DataloadingConstants' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentProcessors\DataloadingConstants
     */
    protected static function getDataloadingConstantsService($container)
    {
        return $container->services['PoP\\ComponentModel\\ComponentProcessors\\DataloadingConstants'] = new \PoP\ComponentModel\ComponentProcessors\DataloadingConstants();
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentProcessors\RootComponentProcessors' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentProcessors\RootComponentProcessors
     */
    protected static function getRootComponentProcessorsService($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentProcessors\\RootComponentProcessors'] = $instance = new \PoP\ComponentModel\ComponentProcessors\RootComponentProcessors();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ComponentRoutingProcessors\EntryComponentRoutingProcessor' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentRoutingProcessors\EntryComponentRoutingProcessor
     */
    protected static function getEntryComponentRoutingProcessor9Service($container)
    {
        $container->services['PoP\\ComponentModel\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] = $instance = new \PoP\ComponentModel\ComponentRoutingProcessors\EntryComponentRoutingProcessor();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\DataStructureFormatters\HTMLDataStructureFormatter' shared autowired service.
     *
     * @return \PoP\ComponentModel\DataStructureFormatters\HTMLDataStructureFormatter
     */
    protected static function getHTMLDataStructureFormatterService($container)
    {
        $container->services['PoP\\ComponentModel\\DataStructureFormatters\\HTMLDataStructureFormatter'] = $instance = new \PoP\ComponentModel\DataStructureFormatters\HTMLDataStructureFormatter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\DataStructureFormatters\JSONDataStructureFormatter' shared autowired service.
     *
     * @return \PoP\ComponentModel\DataStructureFormatters\JSONDataStructureFormatter
     */
    protected static function getJSONDataStructureFormatterService($container)
    {
        $container->services['PoP\\ComponentModel\\DataStructureFormatters\\JSONDataStructureFormatter'] = $instance = new \PoP\ComponentModel\DataStructureFormatters\JSONDataStructureFormatter();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\DataStructure\DataStructureManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\DataStructure\DataStructureManager
     */
    protected static function getDataStructureManagerInterfaceService($container)
    {
        $a = new \PoP\ComponentModel\DataStructure\DefaultDataStructureFormatter();
        $a->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        $container->services['PoP\\ComponentModel\\DataStructure\\DataStructureManagerInterface'] = $instance = new \PoP\ComponentModel\DataStructure\DataStructureManager($a);

        $instance->addDataStructureFormatter(($container->services['PoP\\ComponentModel\\DataStructureFormatters\\HTMLDataStructureFormatter'] ?? self::getHTMLDataStructureFormatterService($container)), 'PoP\\ComponentModel\\DataStructureFormatters\\HTMLDataStructureFormatter');
        $instance->addDataStructureFormatter(($container->services['PoP\\ComponentModel\\DataStructureFormatters\\JSONDataStructureFormatter'] ?? self::getJSONDataStructureFormatterService($container)), 'PoP\\ComponentModel\\DataStructureFormatters\\JSONDataStructureFormatter');
        $instance->addDataStructureFormatter($a, 'default_data_structure_formatter');
        $instance->addDataStructureFormatter(($container->services['PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter'] ?? self::getMirrorQueryDataStructureFormatterService($container)), 'PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\MirrorQueryDataStructureFormatter');
        $instance->addDataStructureFormatter(($container->services['PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter'] ?? self::getPropertyMirrorQueryDataStructureFormatterService($container)), 'PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\PropertyMirrorQueryDataStructureFormatter');
        $instance->addDataStructureFormatter(($container->services['PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter'] ?? self::getXMLMirrorQueryDataStructureFormatterService($container)), 'PoPAPI\\APIMirrorQuery\\DataStructureFormatters\\XMLMirrorQueryDataStructureFormatter');
        $instance->addDataStructureFormatter(($container->services['PoPAPI\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter'] ?? self::getGraphQLDataStructureFormatterService($container)), 'PoPAPI\\GraphQLAPI\\DataStructureFormatters\\GraphQLDataStructureFormatter');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Dictionaries\ObjectDictionaryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Dictionaries\ObjectDictionary
     */
    protected static function getObjectDictionaryInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Dictionaries\\ObjectDictionaryInterface'] = new \PoP\ComponentModel\Dictionaries\ObjectDictionary();
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectivePipeline\DirectivePipelineServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectivePipeline\DirectivePipelineService
     */
    protected static function getDirectivePipelineServiceInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\DirectivePipeline\\DirectivePipelineServiceInterface'] = new \PoP\ComponentModel\DirectivePipeline\DirectivePipelineService();
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectiveResolvers\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectiveResolvers\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver
     */
    protected static function getConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\DirectiveResolvers\\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver'] = $instance = new \PoP\ComponentModel\DirectiveResolvers\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectiveResolvers\HookNames' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectiveResolvers\HookNames
     */
    protected static function getHookNamesService($container)
    {
        return $container->services['PoP\\ComponentModel\\DirectiveResolvers\\HookNames'] = new \PoP\ComponentModel\DirectiveResolvers\HookNames();
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeFieldDirectiveResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeFieldDirectiveResolver
     */
    protected static function getResolveValueAndMergeFieldDirectiveResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeFieldDirectiveResolver'] = $instance = new \PoP\ComponentModel\DirectiveResolvers\ResolveValueAndMergeFieldDirectiveResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectiveResolvers\SerializeLeafOutputTypeValuesFieldDirectiveResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectiveResolvers\SerializeLeafOutputTypeValuesFieldDirectiveResolver
     */
    protected static function getSerializeLeafOutputTypeValuesFieldDirectiveResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\DirectiveResolvers\\SerializeLeafOutputTypeValuesFieldDirectiveResolver'] = $instance = new \PoP\ComponentModel\DirectiveResolvers\SerializeLeafOutputTypeValuesFieldDirectiveResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\DirectiveResolvers\ValidateFieldDirectiveResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\DirectiveResolvers\ValidateFieldDirectiveResolver
     */
    protected static function getValidateFieldDirectiveResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateFieldDirectiveResolver'] = $instance = new \PoP\ComponentModel\DirectiveResolvers\ValidateFieldDirectiveResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Engine\EngineInterface' shared autowired service.
     *
     * @return \PoP\Engine\Engine\Engine
     */
    protected static function getEngineInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Engine\\EngineInterface'] = $instance = new \PoP\Engine\Engine\Engine();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\EntryComponent\EntryComponentManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\EntryComponent\EntryComponentManager
     */
    protected static function getEntryComponentManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\EntryComponent\\EntryComponentManagerInterface'] = $instance = new \PoP\ComponentModel\EntryComponent\EntryComponentManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Error\ErrorProviderInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Error\ErrorProvider
     */
    protected static function getErrorProviderInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Error\\ErrorProviderInterface'] = new \PoP\ComponentModel\Error\ErrorProvider();
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider
     */
    protected static function getCheckpointErrorFeedbackItemProvider2Service($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\DeprecationFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\DeprecationFeedbackItemProvider
     */
    protected static function getDeprecationFeedbackItemProviderService($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\DeprecationFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\DeprecationFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\ErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\ErrorFeedbackItemProvider
     */
    protected static function getErrorFeedbackItemProvider3Service($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\ErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\FieldResolutionErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\FieldResolutionErrorFeedbackItemProvider
     */
    protected static function getFieldResolutionErrorFeedbackItemProviderService($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\FieldResolutionErrorFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\FieldResolutionErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\GenericFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\GenericFeedbackItemProvider
     */
    protected static function getGenericFeedbackItemProviderService($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\GenericFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\GenericFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\InputValueCoercionGraphQLSpecErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\InputValueCoercionGraphQLSpecErrorFeedbackItemProvider
     */
    protected static function getInputValueCoercionGraphQLSpecErrorFeedbackItemProviderService($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\InputValueCoercionGraphQLSpecErrorFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\InputValueCoercionGraphQLSpecErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\MutationErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\MutationErrorFeedbackItemProvider
     */
    protected static function getMutationErrorFeedbackItemProvider13Service($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\MutationErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\SuggestionFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\SuggestionFeedbackItemProvider
     */
    protected static function getSuggestionFeedbackItemProviderService($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\SuggestionFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\SuggestionFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FeedbackItemProviders\WarningFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\FeedbackItemProviders\WarningFeedbackItemProvider
     */
    protected static function getWarningFeedbackItemProviderService($container)
    {
        $container->services['PoP\\ComponentModel\\FeedbackItemProviders\\WarningFeedbackItemProvider'] = $instance = new \PoP\ComponentModel\FeedbackItemProviders\WarningFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Feedback\FeedbackEntryManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Feedback\FeedbackEntryManager
     */
    protected static function getFeedbackEntryManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Feedback\\FeedbackEntryManagerInterface'] = $instance = new \PoP\ComponentModel\Feedback\FeedbackEntryManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\InterfaceType\HookNames' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\InterfaceType\HookNames
     */
    protected static function getHookNames2Service($container)
    {
        return $container->services['PoP\\ComponentModel\\FieldResolvers\\InterfaceType\\HookNames'] = new \PoP\ComponentModel\FieldResolvers\InterfaceType\HookNames();
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\InterfaceType\IdentifiableObjectInterfaceTypeFieldResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\InterfaceType\IdentifiableObjectInterfaceTypeFieldResolver
     */
    protected static function getIdentifiableObjectInterfaceTypeFieldResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\FieldResolvers\\InterfaceType\\IdentifiableObjectInterfaceTypeFieldResolver'] = $instance = new \PoP\ComponentModel\FieldResolvers\InterfaceType\IdentifiableObjectInterfaceTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\ObjectType\CoreGlobalObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\ObjectType\CoreGlobalObjectTypeFieldResolver
     */
    protected static function getCoreGlobalObjectTypeFieldResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\CoreGlobalObjectTypeFieldResolver'] = $instance = new \PoP\ComponentModel\FieldResolvers\ObjectType\CoreGlobalObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\ObjectType\HookNames' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\ObjectType\HookNames
     */
    protected static function getHookNames3Service($container)
    {
        return $container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\HookNames'] = new \PoP\ComponentModel\FieldResolvers\ObjectType\HookNames();
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\ObjectType\IdentifiableObjectObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\ObjectType\IdentifiableObjectObjectTypeFieldResolver
     */
    protected static function getIdentifiableObjectObjectTypeFieldResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\IdentifiableObjectObjectTypeFieldResolver'] = $instance = new \PoP\ComponentModel\FieldResolvers\ObjectType\IdentifiableObjectObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\ObjectType\ObjectObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\ObjectType\ObjectObjectTypeFieldResolver
     */
    protected static function getObjectObjectTypeFieldResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\ObjectObjectTypeFieldResolver'] = $instance = new \PoP\ComponentModel\FieldResolvers\ObjectType\ObjectObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\FieldResolvers\ObjectType\TypeNameGlobalObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\FieldResolvers\ObjectType\TypeNameGlobalObjectTypeFieldResolver
     */
    protected static function getTypeNameGlobalObjectTypeFieldResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\FieldResolvers\\ObjectType\\TypeNameGlobalObjectTypeFieldResolver'] = $instance = new \PoP\ComponentModel\FieldResolvers\ObjectType\TypeNameGlobalObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\ApplicationStateHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\ApplicationStateHelperService
     */
    protected static function getApplicationStateHelperServiceInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\HelperServices\\ApplicationStateHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\ApplicationStateHelperService();
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\DataloadHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\DataloadHelperService
     */
    protected static function getDataloadHelperServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\HelperServices\\DataloadHelperServiceInterface'] = $instance = new \PoP\ComponentModel\HelperServices\DataloadHelperService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\RequestHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\RequestHelperService
     */
    protected static function getRequestHelperServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\HelperServices\\RequestHelperServiceInterface'] = $instance = new \PoP\ComponentModel\HelperServices\RequestHelperService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\HelperServices\SemverHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\HelperServices\SemverHelperService
     */
    protected static function getSemverHelperServiceInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\HelperServices\\SemverHelperServiceInterface'] = new \PoP\ComponentModel\HelperServices\SemverHelperService();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Hooks\RemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSet' shared autowired service.
     *
     * @return \PoP\ComponentModel\Hooks\RemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSet
     */
    protected static function getRemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSetService($container)
    {
        $container->services['PoP\\ComponentModel\\Hooks\\RemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSet'] = $instance = new \PoP\ComponentModel\Hooks\RemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Info\ApplicationInfoInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Info\ApplicationInfo
     */
    protected static function getApplicationInfoInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Info\\ApplicationInfoInterface'] = new \PoP\ComponentModel\Info\ApplicationInfo();
    }

    /**
     * Gets the public 'PoP\ComponentModel\ModelInstance\ModelInstanceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ModelInstance\ModelInstance
     */
    protected static function getModelInstanceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\ModelInstance\\ModelInstanceInterface'] = $instance = new \PoP\ComponentModel\ModelInstance\ModelInstance();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\ObjectSerialization\ObjectSerializationManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ObjectSerialization\ObjectSerializationManager
     */
    protected static function getObjectSerializationManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\ObjectSerialization\\ObjectSerializationManagerInterface'] = $instance = new \PoP\ComponentModel\ObjectSerialization\ObjectSerializationManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));
        $instance->addObjectSerializer(($container->services['PoPSchema\\SchemaCommons\\ObjectSerializers\\DateTimeObjectSerializer'] ?? self::getDateTimeObjectSerializerService($container)), 'PoPSchema\\SchemaCommons\\ObjectSerializers\\DateTimeObjectSerializer');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\QueryInputOutputHandlers\ActionExecutionQueryInputOutputHandler' shared autowired service.
     *
     * @return \PoP\ComponentModel\QueryInputOutputHandlers\ActionExecutionQueryInputOutputHandler
     */
    protected static function getActionExecutionQueryInputOutputHandlerService($container)
    {
        return $container->services['PoP\\ComponentModel\\QueryInputOutputHandlers\\ActionExecutionQueryInputOutputHandler'] = new \PoP\ComponentModel\QueryInputOutputHandlers\ActionExecutionQueryInputOutputHandler();
    }

    /**
     * Gets the public 'PoP\ComponentModel\QueryInputOutputHandlers\ListQueryInputOutputHandler' shared autowired service.
     *
     * @return \PoP\ComponentModel\QueryInputOutputHandlers\ListQueryInputOutputHandler
     */
    protected static function getListQueryInputOutputHandlerService($container)
    {
        return $container->services['PoP\\ComponentModel\\QueryInputOutputHandlers\\ListQueryInputOutputHandler'] = new \PoP\ComponentModel\QueryInputOutputHandlers\ListQueryInputOutputHandler();
    }

    /**
     * Gets the public 'PoP\ComponentModel\QueryInputOutputHandlers\ResponseConstants' shared autowired service.
     *
     * @return \PoP\ComponentModel\QueryInputOutputHandlers\ResponseConstants
     */
    protected static function getResponseConstantsService($container)
    {
        return $container->services['PoP\\ComponentModel\\QueryInputOutputHandlers\\ResponseConstants'] = new \PoP\ComponentModel\QueryInputOutputHandlers\ResponseConstants();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\DynamicVariableDefinerDirectiveRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\DynamicVariableDefinerDirectiveRegistry
     */
    protected static function getDynamicVariableDefinerDirectiveRegistryInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Registries\\DynamicVariableDefinerDirectiveRegistryInterface'] = new \PoP\ComponentModel\Registries\DynamicVariableDefinerDirectiveRegistry();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\FieldDirectiveResolverRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\FieldDirectiveResolverRegistry
     */
    protected static function getFieldDirectiveResolverRegistryInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Registries\\FieldDirectiveResolverRegistryInterface'] = $instance = new \PoP\ComponentModel\Registries\FieldDirectiveResolverRegistry();

        $instance->addFieldDirectiveResolver(($container->services['PoP\\ComponentModel\\DirectiveResolvers\\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver'] ?? self::getConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolverService($container)), 'PoP\\ComponentModel\\DirectiveResolvers\\ConfigureWarningsOnExportingDuplicateVariableOperationsFieldDirectiveResolver');
        $instance->addFieldDirectiveResolver(($container->services['PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeFieldDirectiveResolver'] ?? self::getResolveValueAndMergeFieldDirectiveResolverService($container)), 'PoP\\ComponentModel\\DirectiveResolvers\\ResolveValueAndMergeFieldDirectiveResolver');
        $instance->addFieldDirectiveResolver(($container->services['PoP\\ComponentModel\\DirectiveResolvers\\SerializeLeafOutputTypeValuesFieldDirectiveResolver'] ?? self::getSerializeLeafOutputTypeValuesFieldDirectiveResolverService($container)), 'PoP\\ComponentModel\\DirectiveResolvers\\SerializeLeafOutputTypeValuesFieldDirectiveResolver');
        $instance->addFieldDirectiveResolver(($container->services['PoP\\ComponentModel\\DirectiveResolvers\\ValidateFieldDirectiveResolver'] ?? self::getValidateFieldDirectiveResolverService($container)), 'PoP\\ComponentModel\\DirectiveResolvers\\ValidateFieldDirectiveResolver');
        $instance->addFieldDirectiveResolver(($container->services['PoP\\Engine\\DirectiveResolvers\\IncludeFieldDirectiveResolver'] ?? self::getIncludeFieldDirectiveResolverService($container)), 'PoP\\Engine\\DirectiveResolvers\\IncludeFieldDirectiveResolver');
        $instance->addFieldDirectiveResolver(($container->services['PoP\\Engine\\DirectiveResolvers\\SkipFieldDirectiveResolver'] ?? self::getSkipFieldDirectiveResolverService($container)), 'PoP\\Engine\\DirectiveResolvers\\SkipFieldDirectiveResolver');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\MandatoryFieldDirectiveResolverRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\MandatoryFieldDirectiveResolverRegistry
     */
    protected static function getMandatoryFieldDirectiveResolverRegistryInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Registries\\MandatoryFieldDirectiveResolverRegistryInterface'] = new \PoP\ComponentModel\Registries\MandatoryFieldDirectiveResolverRegistry();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\MetaDirectiveRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\MetaDirectiveRegistry
     */
    protected static function getMetaDirectiveRegistryInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Registries\\MetaDirectiveRegistryInterface'] = new \PoP\ComponentModel\Registries\MetaDirectiveRegistry();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\OperationDependencyDefinerDirectiveRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\OperationDependencyDefinerDirectiveRegistry
     */
    protected static function getOperationDependencyDefinerDirectiveRegistryInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Registries\\OperationDependencyDefinerDirectiveRegistryInterface'] = new \PoP\ComponentModel\Registries\OperationDependencyDefinerDirectiveRegistry();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Registries\TypeRegistryInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Registries\TypeRegistry
     */
    protected static function getTypeRegistryInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Registries\\TypeRegistryInterface'] = $instance = new \PoP\ComponentModel\Registries\TypeRegistry();

        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\InterfaceType\\IdentifiableObjectInterfaceTypeResolver'] ?? self::getIdentifiableObjectInterfaceTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\InterfaceType\\IdentifiableObjectInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyBuiltInScalarScalarTypeResolver'] ?? self::getAnyBuiltInScalarScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyBuiltInScalarScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyScalarScalarTypeResolver'] ?? self::getAnyScalarScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyScalarScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyStringScalarScalarTypeResolver'] ?? self::getAnyStringScalarScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyStringScalarScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\BooleanScalarTypeResolver'] ?? self::getBooleanScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\BooleanScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\DangerouslyNonSpecificScalarTypeScalarTypeResolver'] ?? self::getDangerouslyNonSpecificScalarTypeScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\DangerouslyNonSpecificScalarTypeScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\FloatScalarTypeResolver'] ?? self::getFloatScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\FloatScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IDScalarTypeResolver'] ?? self::getIDScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IDScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IntScalarTypeResolver'] ?? self::getIntScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IntScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\StringScalarTypeResolver'] ?? self::getStringScalarTypeResolverService($container)), 'PoP\\ComponentModel\\TypeResolvers\\ScalarType\\StringScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\Engine\\TypeResolvers\\ObjectType\\RootObjectTypeResolver'] ?? self::getRootObjectTypeResolverService($container)), 'PoP\\Engine\\TypeResolvers\\ObjectType\\RootObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\Engine\\TypeResolvers\\ObjectType\\SuperRootObjectTypeResolver'] ?? self::getSuperRootObjectTypeResolverService($container)), 'PoP\\Engine\\TypeResolvers\\ObjectType\\SuperRootObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoP\\Engine\\TypeResolvers\\ScalarType\\JSONObjectScalarTypeResolver'] ?? self::getJSONObjectScalarTypeResolverService($container)), 'PoP\\Engine\\TypeResolvers\\ScalarType\\JSONObjectScalarTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveKindEnumTypeResolver'] ?? self::getDirectiveKindEnumTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveKindEnumTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveLocationEnumTypeResolver'] ?? self::getDirectiveLocationEnumTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\DirectiveLocationEnumTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\TypeKindEnumTypeResolver'] ?? self::getTypeKindEnumTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\EnumType\\TypeKindEnumTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveExtensionsObjectTypeResolver'] ?? self::getDirectiveExtensionsObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveExtensionsObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveObjectTypeResolver'] ?? self::getDirectiveObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\DirectiveObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueExtensionsObjectTypeResolver'] ?? self::getEnumValueExtensionsObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueExtensionsObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueObjectTypeResolver'] ?? self::getEnumValueObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\EnumValueObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldExtensionsObjectTypeResolver'] ?? self::getFieldExtensionsObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldExtensionsObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldObjectTypeResolver'] ?? self::getFieldObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\FieldObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueExtensionsObjectTypeResolver'] ?? self::getInputValueExtensionsObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueExtensionsObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueObjectTypeResolver'] ?? self::getInputValueObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\InputValueObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\MutationRootObjectTypeResolver'] ?? self::getMutationRootObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\MutationRootObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\NamedTypeExtensionsObjectTypeResolver'] ?? self::getNamedTypeExtensionsObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\NamedTypeExtensionsObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\QueryRootObjectTypeResolver'] ?? self::getQueryRootObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\QueryRootObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaExtensionsObjectTypeResolver'] ?? self::getSchemaExtensionsObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaExtensionsObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaObjectTypeResolver'] ?? self::getSchemaObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\SchemaObjectTypeResolver');
        $instance->addTypeResolver(($container->services['GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\TypeObjectTypeResolver'] ?? self::getTypeObjectTypeResolverService($container)), 'GraphQLByPoP\\GraphQLServer\\TypeResolvers\\ObjectType\\TypeObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OperationStatusEnumTypeResolver'] ?? self::getOperationStatusEnumTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OperationStatusEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\InterfaceType\\ErrorPayloadInterfaceTypeResolver'] ?? self::getErrorPayloadInterfaceTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\InterfaceType\\ErrorPayloadInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ObjectType\\GenericErrorPayloadObjectTypeResolver'] ?? self::getGenericErrorPayloadObjectTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ObjectType\\GenericErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateScalarTypeResolver'] ?? self::getDateScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateTimeScalarTypeResolver'] ?? self::getDateTimeScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\DateTimeScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\EmailScalarTypeResolver'] ?? self::getEmailScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\EmailScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\HTMLScalarTypeResolver'] ?? self::getHTMLScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\HTMLScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\NumericScalarTypeResolver'] ?? self::getNumericScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\NumericScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLAbsolutePathScalarTypeResolver'] ?? self::getURLAbsolutePathScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLAbsolutePathScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLScalarTypeResolver'] ?? self::getURLScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\URLScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\XMLScalarTypeResolver'] ?? self::getXMLScalarTypeResolverService($container)), 'PoPSchema\\SchemaCommons\\TypeResolvers\\ScalarType\\XMLScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OrderEnumTypeResolver'] ?? self::getOrderEnumTypeResolverService($container)), 'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\EnumType\\OrderEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\DateQueryInputObjectTypeResolver'] ?? self::getDateQueryInputObjectTypeResolverService($container)), 'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\DateQueryInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\MutationPayloadObjectsInputObjectTypeResolver'] ?? self::getMutationPayloadObjectsInputObjectTypeResolverService($container)), 'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\MutationPayloadObjectsInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\PaginationInputObjectTypeResolver'] ?? self::getPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\PaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\SortInputObjectTypeResolver'] ?? self::getSortInputObjectTypeResolverService($container)), 'PoPCMSSchema\\SchemaCommons\\TypeResolvers\\InputObjectType\\SortInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\QueriedObject\\TypeResolvers\\InterfaceType\\QueryableInterfaceTypeResolver'] ?? self::getQueryableInterfaceTypeResolverService($container)), 'PoPCMSSchema\\QueriedObject\\TypeResolvers\\InterfaceType\\QueryableInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostEnumStringScalarTypeResolver'] ?? self::getCustomPostEnumStringScalarTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostEnumStringScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostOrderByEnumTypeResolver'] ?? self::getCustomPostOrderByEnumTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostOrderByEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostStatusEnumTypeResolver'] ?? self::getCustomPostStatusEnumTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\CustomPostStatusEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\FilterCustomPostStatusEnumTypeResolver'] ?? self::getFilterCustomPostStatusEnumTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\EnumType\\FilterCustomPostStatusEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostByOneofInputObjectTypeResolver'] ?? self::getCustomPostByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostPaginationInputObjectTypeResolver'] ?? self::getCustomPostPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostSortInputObjectTypeResolver'] ?? self::getCustomPostSortInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\CustomPostSortInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootCustomPostsFilterInputObjectTypeResolver'] ?? self::getRootCustomPostsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootCustomPostsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootPredefinedCustomPostsFilterInputObjectTypeResolver'] ?? self::getRootPredefinedCustomPostsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InputObjectType\\RootPredefinedCustomPostsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\InterfaceType\\CustomPostInterfaceTypeResolver'] ?? self::getCustomPostInterfaceTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\InterfaceType\\CustomPostInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\ObjectType\\GenericCustomPostObjectTypeResolver'] ?? self::getGenericCustomPostObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\ObjectType\\GenericCustomPostObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPosts\\TypeResolvers\\UnionType\\CustomPostUnionTypeResolver'] ?? self::getCustomPostUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPosts\\TypeResolvers\\UnionType\\CustomPostUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\EnumType\\TaxonomyOrderByEnumTypeResolver'] ?? self::getTaxonomyOrderByEnumTypeResolverService($container)), 'PoPCMSSchema\\Taxonomies\\TypeResolvers\\EnumType\\TaxonomyOrderByEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\FilterByTaxonomyTermsInputObjectTypeResolver'] ?? self::getFilterByTaxonomyTermsInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\FilterByTaxonomyTermsInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyCustomPostsFilterInputObjectTypeResolver'] ?? self::getTaxonomyCustomPostsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyCustomPostsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomySortInputObjectTypeResolver'] ?? self::getTaxonomySortInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomySortInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyTaxonomiesFilterInputObjectTypeResolver'] ?? self::getTaxonomyTaxonomiesFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Taxonomies\\TypeResolvers\\InputObjectType\\TaxonomyTaxonomiesFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\EnumType\\CategoryTaxonomyEnumStringScalarTypeResolver'] ?? self::getCategoryTaxonomyEnumStringScalarTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\EnumType\\CategoryTaxonomyEnumStringScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver'] ?? self::getCategoryByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryPaginationInputObjectTypeResolver'] ?? self::getCategoryPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CategoryPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostCategoriesFilterInputObjectTypeResolver'] ?? self::getCustomPostCategoriesFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostCategoriesFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolver'] ?? self::getCustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByCategoriesInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\RootCategoriesFilterInputObjectTypeResolver'] ?? self::getRootCategoriesFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\InputObjectType\\RootCategoriesFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\InterfaceType\\CategoryInterfaceTypeResolver'] ?? self::getCategoryInterfaceTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\InterfaceType\\CategoryInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\ObjectType\\GenericCategoryObjectTypeResolver'] ?? self::getGenericCategoryObjectTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\ObjectType\\GenericCategoryObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Categories\\TypeResolvers\\UnionType\\CategoryUnionTypeResolver'] ?? self::getCategoryUnionTypeResolverService($container)), 'PoPCMSSchema\\Categories\\TypeResolvers\\UnionType\\CategoryUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\EnumType\\UserOrderByEnumTypeResolver'] ?? self::getUserOrderByEnumTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\EnumType\\UserOrderByEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\FilterByAuthorInputObjectTypeResolver'] ?? self::getFilterByAuthorInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\FilterByAuthorInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserByOneofInputObjectTypeResolver'] ?? self::getUserByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserPaginationInputObjectTypeResolver'] ?? self::getUserPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSearchByOneofInputObjectTypeResolver'] ?? self::getUserSearchByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSearchByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSortInputObjectTypeResolver'] ?? self::getUserSortInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UserSortInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UsersFilterInputObjectTypeResolver'] ?? self::getUsersFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\InputObjectType\\UsersFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\InterfaceType\\WithAuthorInterfaceTypeResolver'] ?? self::getWithAuthorInterfaceTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\InterfaceType\\WithAuthorInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\TypeResolvers\\ObjectType\\UserObjectTypeResolver'] ?? self::getUserObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\TypeResolvers\\ObjectType\\UserObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\TypeResolvers\\InputObjectType\\UserCustomPostsFilterInputObjectTypeResolver'] ?? self::getUserCustomPostsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\TypeResolvers\\InputObjectType\\UserCustomPostsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginCredentialsInputObjectTypeResolver'] ?? self::getLoginCredentialsInputObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginCredentialsInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginUserByOneofInputObjectTypeResolver'] ?? self::getLoginUserByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\InputObjectType\\LoginUserByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUserEmailErrorPayloadObjectTypeResolver'] ?? self::getInvalidUserEmailErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUserEmailErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUsernameErrorPayloadObjectTypeResolver'] ?? self::getInvalidUsernameErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\InvalidUsernameErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\PasswordIsIncorrectErrorPayloadObjectTypeResolver'] ?? self::getPasswordIsIncorrectErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\PasswordIsIncorrectErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLoginUserMutationPayloadObjectTypeResolver'] ?? self::getRootLoginUserMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLoginUserMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLogoutUserMutationPayloadObjectTypeResolver'] ?? self::getRootLogoutUserMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\RootLogoutUserMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsLoggedInErrorPayloadObjectTypeResolver'] ?? self::getUserIsLoggedInErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsLoggedInErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsNotLoggedInErrorPayloadObjectTypeResolver'] ?? self::getUserIsNotLoggedInErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\ObjectType\\UserIsNotLoggedInErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLoginUserMutationErrorPayloadUnionTypeResolver'] ?? self::getRootLoginUserMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLoginUserMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLogoutUserMutationErrorPayloadUnionTypeResolver'] ?? self::getRootLogoutUserMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\UserStateMutations\\TypeResolvers\\UnionType\\RootLogoutUserMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoAssigningTermsToTaxonomyCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoDeletingTaxonomyTermCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingTaxonomyTermsCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getTaxonomyDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyIsNotValidErrorPayloadObjectTypeResolver'] ?? self::getTaxonomyIsNotValidErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyIsNotValidErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyTermDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getTaxonomyTermDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\TaxonomyMutations\\TypeResolvers\\ObjectType\\TaxonomyTermDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver'] ?? self::getCategoryByOneofInputObjectTypeResolver2Service($container)), 'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryTermUpdateInputObjectTypeResolver'] ?? self::getCategoryTermUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\InputObjectType\\CategoryTermUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CategoryMutations\\TypeResolvers\\ObjectType\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getCategoryTermDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CategoryMutations\\TypeResolvers\\ObjectType\\CategoryTermDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserRolesWP\\TypeResolvers\\ObjectType\\UserRoleObjectTypeResolver'] ?? self::getUserRoleObjectTypeResolverService($container)), 'PoPCMSSchema\\UserRolesWP\\TypeResolvers\\ObjectType\\UserRoleObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentOrderByEnumTypeResolver'] ?? self::getCommentOrderByEnumTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentOrderByEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentStatusEnumTypeResolver'] ?? self::getCommentStatusEnumTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentStatusEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentTypeEnumTypeResolver'] ?? self::getCommentTypeEnumTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\EnumType\\CommentTypeEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentByOneofInputObjectTypeResolver'] ?? self::getCommentByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsePaginationInputObjectTypeResolver'] ?? self::getCommentResponsePaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsePaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsesFilterInputObjectTypeResolver'] ?? self::getCommentResponsesFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentResponsesFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentSortInputObjectTypeResolver'] ?? self::getCommentSortInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CommentSortInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentPaginationInputObjectTypeResolver'] ?? self::getCustomPostCommentPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentsFilterInputObjectTypeResolver'] ?? self::getCustomPostCommentsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\CustomPostCommentsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCommentAuthorInputObjectTypeResolver'] ?? self::getFilterCommentsByCommentAuthorInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCommentAuthorInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCustomPostAuthorInputObjectTypeResolver'] ?? self::getFilterCommentsByCustomPostAuthorInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\FilterCommentsByCustomPostAuthorInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentPaginationInputObjectTypeResolver'] ?? self::getRootCommentPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentsFilterInputObjectTypeResolver'] ?? self::getRootCommentsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InputObjectType\\RootCommentsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\InterfaceType\\CommentableInterfaceTypeResolver'] ?? self::getCommentableInterfaceTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\InterfaceType\\CommentableInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Comments\\TypeResolvers\\ObjectType\\CommentObjectTypeResolver'] ?? self::getCommentObjectTypeResolverService($container)), 'PoPCMSSchema\\Comments\\TypeResolvers\\ObjectType\\CommentObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentAsOneofInputObjectTypeResolver'] ?? self::getCommentAsOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentAsOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentReplyInputObjectTypeResolver'] ?? self::getCommentReplyInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CommentReplyInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CustomPostAddCommentInputObjectTypeResolver'] ?? self::getCustomPostAddCommentInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\CustomPostAddCommentInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootAddCommentToCustomPostInputObjectTypeResolver'] ?? self::getRootAddCommentToCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootAddCommentToCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootMyCommentsFilterInputObjectTypeResolver'] ?? self::getRootMyCommentsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootMyCommentsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootReplyCommentInputObjectTypeResolver'] ?? self::getRootReplyCommentInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\InputObjectType\\RootReplyCommentInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolver'] ?? self::getCommentAuthorEmailIsMissingErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorEmailIsMissingErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolver'] ?? self::getCommentAuthorNameIsMissingErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentAuthorNameIsMissingErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getCommentParentCommentDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentParentCommentDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentReplyMutationPayloadObjectTypeResolver'] ?? self::getCommentReplyMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentReplyMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolver'] ?? self::getCommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotOpenForCustomPostErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver'] ?? self::getCommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CommentsAreNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CustomPostAddCommentMutationPayloadObjectTypeResolver'] ?? self::getCustomPostAddCommentMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\CustomPostAddCommentMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootAddCommentToCustomPostMutationPayloadObjectTypeResolver'] ?? self::getRootAddCommentToCustomPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootAddCommentToCustomPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootReplyCommentMutationPayloadObjectTypeResolver'] ?? self::getRootReplyCommentMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\ObjectType\\RootReplyCommentMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CommentReplyMutationErrorPayloadUnionTypeResolver'] ?? self::getCommentReplyMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CommentReplyMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CustomPostAddCommentMutationErrorPayloadUnionTypeResolver'] ?? self::getCustomPostAddCommentMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\CustomPostAddCommentMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootAddCommentToCustomPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootReplyCommentMutationErrorPayloadUnionTypeResolver'] ?? self::getRootReplyCommentMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CommentMutations\\TypeResolvers\\UnionType\\RootReplyCommentMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Media\\TypeResolvers\\EnumType\\MediaItemOrderByEnumTypeResolver'] ?? self::getMediaItemOrderByEnumTypeResolverService($container)), 'PoPCMSSchema\\Media\\TypeResolvers\\EnumType\\MediaItemOrderByEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemByOneofInputObjectTypeResolver'] ?? self::getMediaItemByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemSortInputObjectTypeResolver'] ?? self::getMediaItemSortInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\MediaItemSortInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemPaginationInputObjectTypeResolver'] ?? self::getRootMediaItemPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemsFilterInputObjectTypeResolver'] ?? self::getRootMediaItemsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Media\\TypeResolvers\\InputObjectType\\RootMediaItemsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Media\\TypeResolvers\\ObjectType\\MediaObjectTypeResolver'] ?? self::getMediaObjectTypeResolverService($container)), 'PoPCMSSchema\\Media\\TypeResolvers\\ObjectType\\MediaObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMedia\\TypeResolvers\\InterfaceType\\WithFeaturedImageInterfaceTypeResolver'] ?? self::getWithFeaturedImageInterfaceTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMedia\\TypeResolvers\\InterfaceType\\WithFeaturedImageInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostContentAsOneofInputObjectTypeResolver'] ?? self::getCustomPostContentAsOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostContentAsOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostUpdateInputObjectTypeResolver'] ?? self::getCustomPostUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\CustomPostUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostUpdateInputObjectTypeResolver'] ?? self::getGenericCustomPostUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateCustomPostInputObjectTypeResolver'] ?? self::getRootCreateCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCustomPostInputObjectTypeResolver'] ?? self::getRootCreateGenericCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootMyCustomPostsFilterInputObjectTypeResolver'] ?? self::getRootMyCustomPostsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootMyCustomPostsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateCustomPostInputObjectTypeResolver'] ?? self::getRootUpdateCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCustomPostInputObjectTypeResolver'] ?? self::getRootUpdateGenericCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\CustomPostDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getCustomPostDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\CustomPostDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\GenericCustomPostUpdateMutationPayloadObjectTypeResolver'] ?? self::getGenericCustomPostUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\GenericCustomPostUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingCustomPostCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditCustomPostErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingCustomPostCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCustomPostMutationPayloadObjectTypeResolver'] ?? self::getRootCreateGenericCustomPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCustomPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCustomPostMutationPayloadObjectTypeResolver'] ?? self::getRootUpdateGenericCustomPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCustomPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\GenericCustomPostUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getGenericCustomPostUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\GenericCustomPostUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootCreateGenericCustomPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCustomPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromContentInputObjectTypeResolver'] ?? self::getCreateMediaItemFromContentInputObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromContentInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromOneofInputObjectTypeResolver'] ?? self::getCreateMediaItemFromOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromURLInputObjectTypeResolver'] ?? self::getCreateMediaItemFromURLInputObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\CreateMediaItemFromURLInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\MediaUpdateInputObjectTypeResolver'] ?? self::getMediaUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\MediaUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootCreateMediaItemInputObjectTypeResolver'] ?? self::getRootCreateMediaItemInputObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootCreateMediaItemInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootMyMediaItemsFilterInputObjectTypeResolver'] ?? self::getRootMyMediaItemsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootMyMediaItemsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootUpdateMediaItemInputObjectTypeResolver'] ?? self::getRootUpdateMediaItemInputObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\InputObjectType\\RootUpdateMediaItemInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingMediaCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPermissionToEditMediaItemErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaItemDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getMediaItemDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaItemDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaUpdateMutationPayloadObjectTypeResolver'] ?? self::getMediaUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\MediaUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootCreateMediaItemMutationPayloadObjectTypeResolver'] ?? self::getRootCreateMediaItemMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootCreateMediaItemMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootUpdateMediaItemMutationPayloadObjectTypeResolver'] ?? self::getRootUpdateMediaItemMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\RootUpdateMediaItemMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getUserDoesNotExistErrorPayloadObjectTypeResolver2Service($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolver'] ?? self::getUserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolver'] ?? self::getUserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\ObjectType\\UserHasNoPermissionToUploadFilesForOtherUsersErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\MediaUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getMediaUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\MediaUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootCreateMediaItemMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreateMediaItemMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootCreateMediaItemMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootUpdateMediaItemMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdateMediaItemMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\MediaMutations\\TypeResolvers\\UnionType\\RootUpdateMediaItemMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\CustomPostSetFeaturedImageInputObjectTypeResolver'] ?? self::getCustomPostSetFeaturedImageInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\CustomPostSetFeaturedImageInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\FeaturedImageByOneofInputObjectTypeResolver'] ?? self::getFeaturedImageByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\FeaturedImageByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootRemoveFeaturedImageFromCustomPostInputObjectTypeResolver'] ?? self::getRootRemoveFeaturedImageFromCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootRemoveFeaturedImageFromCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootSetFeaturedImageOnCustomPostInputObjectTypeResolver'] ?? self::getRootSetFeaturedImageOnCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\InputObjectType\\RootSetFeaturedImageOnCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolver'] ?? self::getCustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostRemoveFeaturedImageMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostSetFeaturedImageMutationPayloadObjectTypeResolver'] ?? self::getCustomPostSetFeaturedImageMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\CustomPostSetFeaturedImageMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver'] ?? self::getFeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\FeaturedImageIsNotSupportedByCustomPostTypeErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolver'] ?? self::getRootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootRemoveFeaturedImageFromCustomPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolver'] ?? self::getRootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\ObjectType\\RootSetFeaturedImageOnCustomPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolver'] ?? self::getCustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostRemoveFeaturedImageMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolver'] ?? self::getCustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\CustomPostSetFeaturedImageMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootRemoveFeaturedImageFromCustomPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\TypeResolvers\\UnionType\\RootSetFeaturedImageOnCustomPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\InputObjectType\\AuthorByOneofInputObjectTypeResolver'] ?? self::getAuthorByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\InputObjectType\\AuthorByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getUserDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostUserMutations\\TypeResolvers\\ObjectType\\UserDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageByOneofInputObjectTypeResolver'] ?? self::getPageByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageChildrenFilterInputObjectTypeResolver'] ?? self::getPageChildrenFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PageChildrenFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PagePaginationInputObjectTypeResolver'] ?? self::getPagePaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\PagePaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\RootPagesFilterInputObjectTypeResolver'] ?? self::getRootPagesFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Pages\\TypeResolvers\\InputObjectType\\RootPagesFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Pages\\TypeResolvers\\ObjectType\\PageObjectTypeResolver'] ?? self::getPageObjectTypeResolverService($container)), 'PoPCMSSchema\\Pages\\TypeResolvers\\ObjectType\\PageObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageContentAsOneofInputObjectTypeResolver'] ?? self::getPageContentAsOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageContentAsOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageUpdateInputObjectTypeResolver'] ?? self::getPageUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\PageUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootCreatePageInputObjectTypeResolver'] ?? self::getRootCreatePageInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootCreatePageInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootMyPagesFilterInputObjectTypeResolver'] ?? self::getRootMyPagesFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootMyPagesFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootUpdatePageInputObjectTypeResolver'] ?? self::getRootUpdatePageInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\InputObjectType\\RootUpdatePageInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoEditingPageCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolver'] ?? self::getLoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\LoggedInUserHasNoPublishingPageCapabilityErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\PageUpdateMutationPayloadObjectTypeResolver'] ?? self::getPageUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\PageUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootCreatePageMutationPayloadObjectTypeResolver'] ?? self::getRootCreatePageMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootCreatePageMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootUpdatePageMutationPayloadObjectTypeResolver'] ?? self::getRootUpdatePageMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\ObjectType\\RootUpdatePageMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\PageUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getPageUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\PageUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootCreatePageMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreatePageMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootCreatePageMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootUpdatePageMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdatePageMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PageMutations\\TypeResolvers\\UnionType\\RootUpdatePageMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostByOneofInputObjectTypeResolver'] ?? self::getPostByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostPaginationInputObjectTypeResolver'] ?? self::getPostPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\PostPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\RootPostsFilterInputObjectTypeResolver'] ?? self::getRootPostsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Posts\\TypeResolvers\\InputObjectType\\RootPostsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Posts\\TypeResolvers\\ObjectType\\PostObjectTypeResolver'] ?? self::getPostObjectTypeResolverService($container)), 'PoPCMSSchema\\Posts\\TypeResolvers\\ObjectType\\PostObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\EnumType\\PostCategoryTaxonomyEnumStringScalarTypeResolver'] ?? self::getPostCategoryTaxonomyEnumStringScalarTypeResolverService($container)), 'PoPCMSSchema\\PostCategories\\TypeResolvers\\EnumType\\PostCategoryTaxonomyEnumStringScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostCategoryByOneofInputObjectTypeResolver'] ?? self::getPostCategoryByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostCategoryByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByCategoriesInputObjectTypeResolver'] ?? self::getPostsFilterCustomPostsByCategoriesInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByCategoriesInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\RootPostCategoriesFilterInputObjectTypeResolver'] ?? self::getRootPostCategoriesFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategories\\TypeResolvers\\InputObjectType\\RootPostCategoriesFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategories\\TypeResolvers\\ObjectType\\PostCategoryObjectTypeResolver'] ?? self::getPostCategoryObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategories\\TypeResolvers\\ObjectType\\PostCategoryObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\CategoriesByOneofInputObjectTypeResolver'] ?? self::getCategoriesByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\CategoriesByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCategoryTermUpdateInputObjectTypeResolver'] ?? self::getGenericCategoryTermUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCategoryTermUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetCategoriesInputObjectTypeResolver'] ?? self::getGenericCustomPostSetCategoriesInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetCategoriesInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCategoryTermInputObjectTypeResolver'] ?? self::getRootCreateGenericCategoryTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericCategoryTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericCategoryTermInputObjectTypeResolver'] ?? self::getRootDeleteGenericCategoryTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericCategoryTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnCustomPostInputObjectTypeResolver'] ?? self::getRootSetCategoriesOnCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCategoryTermInputObjectTypeResolver'] ?? self::getRootUpdateGenericCategoryTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericCategoryTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryDeleteMutationPayloadObjectTypeResolver'] ?? self::getGenericCategoryDeleteMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryDeleteMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryUpdateMutationPayloadObjectTypeResolver'] ?? self::getGenericCategoryUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCategoryUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetCategoriesMutationPayloadObjectTypeResolver'] ?? self::getGenericCustomPostSetCategoriesMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetCategoriesMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCategoryTermMutationPayloadObjectTypeResolver'] ?? self::getRootCreateGenericCategoryTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreateGenericCategoryTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericCategoryTermMutationPayloadObjectTypeResolver'] ?? self::getRootDeleteGenericCategoryTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericCategoryTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolver'] ?? self::getRootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnCustomPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCategoryTermMutationPayloadObjectTypeResolver'] ?? self::getRootUpdateGenericCategoryTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericCategoryTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryDeleteMutationErrorPayloadUnionTypeResolver'] ?? self::getGenericCategoryDeleteMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryDeleteMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getGenericCategoryUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCategoryUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolver'] ?? self::getGenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetCategoriesMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootCreateGenericCategoryTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootDeleteGenericCategoryTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnCustomPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdateGenericCategoryTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostContentAsOneofInputObjectTypeResolver'] ?? self::getPostContentAsOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostContentAsOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostUpdateInputObjectTypeResolver'] ?? self::getPostUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\PostUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootCreatePostInputObjectTypeResolver'] ?? self::getRootCreatePostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootCreatePostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootMyPostsFilterInputObjectTypeResolver'] ?? self::getRootMyPostsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootMyPostsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostInputObjectTypeResolver'] ?? self::getRootUpdatePostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\PostUpdateMutationPayloadObjectTypeResolver'] ?? self::getPostUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\PostUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootCreatePostMutationPayloadObjectTypeResolver'] ?? self::getRootCreatePostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootCreatePostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootUpdatePostMutationPayloadObjectTypeResolver'] ?? self::getRootUpdatePostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\ObjectType\\RootUpdatePostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\PostUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getPostUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\PostUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootCreatePostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreatePostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootCreatePostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootUpdatePostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdatePostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostMutations\\TypeResolvers\\UnionType\\RootUpdatePostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostCategoryTermUpdateInputObjectTypeResolver'] ?? self::getPostCategoryTermUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostCategoryTermUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostSetCategoriesInputObjectTypeResolver'] ?? self::getPostSetCategoriesInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\PostSetCategoriesInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreatePostCategoryTermInputObjectTypeResolver'] ?? self::getRootCreatePostCategoryTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootCreatePostCategoryTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeletePostCategoryTermInputObjectTypeResolver'] ?? self::getRootDeletePostCategoryTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootDeletePostCategoryTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnPostInputObjectTypeResolver'] ?? self::getRootSetCategoriesOnPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootSetCategoriesOnPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostCategoryTermInputObjectTypeResolver'] ?? self::getRootUpdatePostCategoryTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostCategoryTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryDeleteMutationPayloadObjectTypeResolver'] ?? self::getPostCategoryDeleteMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryDeleteMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryUpdateMutationPayloadObjectTypeResolver'] ?? self::getPostCategoryUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostCategoryUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostSetCategoriesMutationPayloadObjectTypeResolver'] ?? self::getPostSetCategoriesMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\PostSetCategoriesMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreatePostCategoryTermMutationPayloadObjectTypeResolver'] ?? self::getRootCreatePostCategoryTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootCreatePostCategoryTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeletePostCategoryTermMutationPayloadObjectTypeResolver'] ?? self::getRootDeletePostCategoryTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootDeletePostCategoryTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnPostMutationPayloadObjectTypeResolver'] ?? self::getRootSetCategoriesOnPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootSetCategoriesOnPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdatePostCategoryTermMutationPayloadObjectTypeResolver'] ?? self::getRootUpdatePostCategoryTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\ObjectType\\RootUpdatePostCategoryTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryDeleteMutationErrorPayloadUnionTypeResolver'] ?? self::getPostCategoryDeleteMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryDeleteMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getPostCategoryUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostCategoryUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostSetCategoriesMutationErrorPayloadUnionTypeResolver'] ?? self::getPostSetCategoriesMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\PostSetCategoriesMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootCreatePostCategoryTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootDeletePostCategoryTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootSetCategoriesOnPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostCategoryMutations\\TypeResolvers\\UnionType\\RootUpdatePostCategoryTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\EnumType\\TagTaxonomyEnumStringScalarTypeResolver'] ?? self::getTagTaxonomyEnumStringScalarTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\EnumType\\TagTaxonomyEnumStringScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostTagsFilterInputObjectTypeResolver'] ?? self::getCustomPostTagsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostTagsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByTagsInputObjectTypeResolver'] ?? self::getCustomPostsFilterCustomPostsByTagsInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\CustomPostsFilterCustomPostsByTagsInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\RootTagsFilterInputObjectTypeResolver'] ?? self::getRootTagsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\RootTagsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver'] ?? self::getTagByOneofInputObjectTypeResolver2Service($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagPaginationInputObjectTypeResolver'] ?? self::getTagPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\InputObjectType\\TagPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\InterfaceType\\TagInterfaceTypeResolver'] ?? self::getTagInterfaceTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\InterfaceType\\TagInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\ObjectType\\GenericTagObjectTypeResolver'] ?? self::getGenericTagObjectTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\ObjectType\\GenericTagObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Tags\\TypeResolvers\\UnionType\\TagUnionTypeResolver'] ?? self::getTagUnionTypeResolverService($container)), 'PoPCMSSchema\\Tags\\TypeResolvers\\UnionType\\TagUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetTagsInputObjectTypeResolver'] ?? self::getGenericCustomPostSetTagsInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericCustomPostSetTagsInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericTagTermUpdateInputObjectTypeResolver'] ?? self::getGenericTagTermUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\GenericTagTermUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericTagTermInputObjectTypeResolver'] ?? self::getRootCreateGenericTagTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootCreateGenericTagTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericTagTermInputObjectTypeResolver'] ?? self::getRootDeleteGenericTagTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootDeleteGenericTagTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnCustomPostInputObjectTypeResolver'] ?? self::getRootSetTagsOnCustomPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnCustomPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericTagTermInputObjectTypeResolver'] ?? self::getRootUpdateGenericTagTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdateGenericTagTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\TagsByOneofInputObjectTypeResolver'] ?? self::getTagsByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\InputObjectType\\TagsByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetTagsMutationPayloadObjectTypeResolver'] ?? self::getGenericCustomPostSetTagsMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericCustomPostSetTagsMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagDeleteMutationPayloadObjectTypeResolver'] ?? self::getGenericTagDeleteMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagDeleteMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagUpdateMutationPayloadObjectTypeResolver'] ?? self::getGenericTagUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\GenericTagUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootCreateGenericTagTermMutationPayloadObjectTypeResolver'] ?? self::getRootCreateGenericTagTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootCreateGenericTagTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericTagTermMutationPayloadObjectTypeResolver'] ?? self::getRootDeleteGenericTagTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootDeleteGenericTagTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnCustomPostMutationPayloadObjectTypeResolver'] ?? self::getRootSetTagsOnCustomPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnCustomPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericTagTermMutationPayloadObjectTypeResolver'] ?? self::getRootUpdateGenericTagTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\ObjectType\\RootUpdateGenericTagTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolver'] ?? self::getGenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericCustomPostSetTagsMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagDeleteMutationErrorPayloadUnionTypeResolver'] ?? self::getGenericTagDeleteMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagDeleteMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getGenericTagUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\GenericTagUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootCreateGenericTagTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreateGenericTagTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootCreateGenericTagTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootDeleteGenericTagTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnCustomPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\CustomPostTagMutations\\TypeResolvers\\UnionType\\RootUpdateGenericTagTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver'] ?? self::getTagByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagTermUpdateInputObjectTypeResolver'] ?? self::getTagTermUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\TagMutations\\TypeResolvers\\InputObjectType\\TagTermUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\TagMutations\\TypeResolvers\\ObjectType\\TagTermDoesNotExistErrorPayloadObjectTypeResolver'] ?? self::getTagTermDoesNotExistErrorPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\TagMutations\\TypeResolvers\\ObjectType\\TagTermDoesNotExistErrorPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\EnumType\\PostTagTaxonomyEnumStringScalarTypeResolver'] ?? self::getPostTagTaxonomyEnumStringScalarTypeResolverService($container)), 'PoPCMSSchema\\PostTags\\TypeResolvers\\EnumType\\PostTagTaxonomyEnumStringScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostTagByOneofInputObjectTypeResolver'] ?? self::getPostTagByOneofInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostTagByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByTagsInputObjectTypeResolver'] ?? self::getPostsFilterCustomPostsByTagsInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\PostsFilterCustomPostsByTagsInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\RootPostTagsFilterInputObjectTypeResolver'] ?? self::getRootPostTagsFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTags\\TypeResolvers\\InputObjectType\\RootPostTagsFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTags\\TypeResolvers\\ObjectType\\PostTagObjectTypeResolver'] ?? self::getPostTagObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTags\\TypeResolvers\\ObjectType\\PostTagObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostSetTagsInputObjectTypeResolver'] ?? self::getPostSetTagsInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostSetTagsInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostTagTermUpdateInputObjectTypeResolver'] ?? self::getPostTagTermUpdateInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\PostTagTermUpdateInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootCreatePostTagTermInputObjectTypeResolver'] ?? self::getRootCreatePostTagTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootCreatePostTagTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootDeletePostTagTermInputObjectTypeResolver'] ?? self::getRootDeletePostTagTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootDeletePostTagTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnPostInputObjectTypeResolver'] ?? self::getRootSetTagsOnPostInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootSetTagsOnPostInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostTagTermInputObjectTypeResolver'] ?? self::getRootUpdatePostTagTermInputObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\InputObjectType\\RootUpdatePostTagTermInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostSetTagsMutationPayloadObjectTypeResolver'] ?? self::getPostSetTagsMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostSetTagsMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagDeleteMutationPayloadObjectTypeResolver'] ?? self::getPostTagDeleteMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagDeleteMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagUpdateMutationPayloadObjectTypeResolver'] ?? self::getPostTagUpdateMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\PostTagUpdateMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootCreatePostTagTermMutationPayloadObjectTypeResolver'] ?? self::getRootCreatePostTagTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootCreatePostTagTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootDeletePostTagTermMutationPayloadObjectTypeResolver'] ?? self::getRootDeletePostTagTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootDeletePostTagTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnPostMutationPayloadObjectTypeResolver'] ?? self::getRootSetTagsOnPostMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootSetTagsOnPostMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootUpdatePostTagTermMutationPayloadObjectTypeResolver'] ?? self::getRootUpdatePostTagTermMutationPayloadObjectTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\ObjectType\\RootUpdatePostTagTermMutationPayloadObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostSetTagsMutationErrorPayloadUnionTypeResolver'] ?? self::getPostSetTagsMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostSetTagsMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagDeleteMutationErrorPayloadUnionTypeResolver'] ?? self::getPostTagDeleteMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagDeleteMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagUpdateMutationErrorPayloadUnionTypeResolver'] ?? self::getPostTagUpdateMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\PostTagUpdateMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootCreatePostTagTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootCreatePostTagTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootCreatePostTagTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootDeletePostTagTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootDeletePostTagTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootDeletePostTagTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnPostMutationErrorPayloadUnionTypeResolver'] ?? self::getRootSetTagsOnPostMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootSetTagsOnPostMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootUpdatePostTagTermMutationErrorPayloadUnionTypeResolver'] ?? self::getRootUpdatePostTagTermMutationErrorPayloadUnionTypeResolverService($container)), 'PoPCMSSchema\\PostTagMutations\\TypeResolvers\\UnionType\\RootUpdatePostTagTermMutationErrorPayloadUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\UserAvatars\\TypeResolvers\\ObjectType\\UserAvatarObjectTypeResolver'] ?? self::getUserAvatarObjectTypeResolverService($container)), 'PoPCMSSchema\\UserAvatars\\TypeResolvers\\ObjectType\\UserAvatarObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Meta\\TypeResolvers\\InterfaceType\\WithMetaInterfaceTypeResolver'] ?? self::getWithMetaInterfaceTypeResolverService($container)), 'PoPCMSSchema\\Meta\\TypeResolvers\\InterfaceType\\WithMetaInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\RelationEnumTypeResolver'] ?? self::getRelationEnumTypeResolverService($container)), 'PoPWPSchema\\SchemaCommons\\TypeResolvers\\EnumType\\RelationEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByArrayValueOperatorEnumTypeResolver'] ?? self::getMetaQueryCompareByArrayValueOperatorEnumTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByArrayValueOperatorEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByKeyOperatorEnumTypeResolver'] ?? self::getMetaQueryCompareByKeyOperatorEnumTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByKeyOperatorEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByNumericValueOperatorEnumTypeResolver'] ?? self::getMetaQueryCompareByNumericValueOperatorEnumTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByNumericValueOperatorEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByStringValueOperatorEnumTypeResolver'] ?? self::getMetaQueryCompareByStringValueOperatorEnumTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryCompareByStringValueOperatorEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryValueTypeEnumTypeResolver'] ?? self::getMetaQueryValueTypeEnumTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\EnumType\\MetaQueryValueTypeEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByArrayValueInputObjectTypeResolver'] ?? self::getMetaQueryCompareByArrayValueInputObjectTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByArrayValueInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByKeyInputObjectTypeResolver'] ?? self::getMetaQueryCompareByKeyInputObjectTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByKeyInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByNumericValueInputObjectTypeResolver'] ?? self::getMetaQueryCompareByNumericValueInputObjectTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByNumericValueInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByOneofInputObjectTypeResolver'] ?? self::getMetaQueryCompareByOneofInputObjectTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByStringValueInputObjectTypeResolver'] ?? self::getMetaQueryCompareByStringValueInputObjectTypeResolverService($container)), 'PoPWPSchema\\Meta\\TypeResolvers\\InputObjectType\\MetaQueryCompareByStringValueInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\CommentMeta\\TypeResolvers\\InputObjectType\\CommentMetaQueryInputObjectTypeResolver'] ?? self::getCommentMetaQueryInputObjectTypeResolverService($container)), 'PoPWPSchema\\CommentMeta\\TypeResolvers\\InputObjectType\\CommentMetaQueryInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\CustomPostMeta\\TypeResolvers\\InputObjectType\\CustomPostMetaQueryInputObjectTypeResolver'] ?? self::getCustomPostMetaQueryInputObjectTypeResolverService($container)), 'PoPWPSchema\\CustomPostMeta\\TypeResolvers\\InputObjectType\\CustomPostMetaQueryInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Menus\\TypeResolvers\\EnumType\\MenuOrderByEnumTypeResolver'] ?? self::getMenuOrderByEnumTypeResolverService($container)), 'PoPCMSSchema\\Menus\\TypeResolvers\\EnumType\\MenuOrderByEnumTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuByInputObjectTypeResolver'] ?? self::getMenuByInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuByInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuSortInputObjectTypeResolver'] ?? self::getMenuSortInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\MenuSortInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenuPaginationInputObjectTypeResolver'] ?? self::getRootMenuPaginationInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenuPaginationInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenusFilterInputObjectTypeResolver'] ?? self::getRootMenusFilterInputObjectTypeResolverService($container)), 'PoPCMSSchema\\Menus\\TypeResolvers\\InputObjectType\\RootMenusFilterInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuItemObjectTypeResolver'] ?? self::getMenuItemObjectTypeResolverService($container)), 'PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuItemObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuObjectTypeResolver'] ?? self::getMenuObjectTypeResolverService($container)), 'PoPCMSSchema\\Menus\\TypeResolvers\\ObjectType\\MenuObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Menus\\TypeResolvers\\ScalarType\\MenuLocationEnumStringScalarTypeResolver'] ?? self::getMenuLocationEnumStringScalarTypeResolverService($container)), 'PoPWPSchema\\Menus\\TypeResolvers\\ScalarType\\MenuLocationEnumStringScalarTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Blocks\\TypeResolvers\\InputObjectType\\BlockFilterByOneofInputObjectTypeResolver'] ?? self::getBlockFilterByOneofInputObjectTypeResolverService($container)), 'PoPWPSchema\\Blocks\\TypeResolvers\\InputObjectType\\BlockFilterByOneofInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Blocks\\TypeResolvers\\InterfaceType\\BlockInterfaceTypeResolver'] ?? self::getBlockInterfaceTypeResolverService($container)), 'PoPWPSchema\\Blocks\\TypeResolvers\\InterfaceType\\BlockInterfaceTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Blocks\\TypeResolvers\\ObjectType\\GeneralBlockObjectTypeResolver'] ?? self::getGeneralBlockObjectTypeResolverService($container)), 'PoPWPSchema\\Blocks\\TypeResolvers\\ObjectType\\GeneralBlockObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Blocks\\TypeResolvers\\UnionType\\BlockUnionTypeResolver'] ?? self::getBlockUnionTypeResolverService($container)), 'PoPWPSchema\\Blocks\\TypeResolvers\\UnionType\\BlockUnionTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\Multisite\\TypeResolvers\\ObjectType\\NetworkSiteObjectTypeResolver'] ?? self::getNetworkSiteObjectTypeResolverService($container)), 'PoPWPSchema\\Multisite\\TypeResolvers\\ObjectType\\NetworkSiteObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\PageBuilder\\TypeResolvers\\EnumType\\PageBuilderProvidersEnumStringTypeResolver'] ?? self::getPageBuilderProvidersEnumStringTypeResolverService($container)), 'PoPWPSchema\\PageBuilder\\TypeResolvers\\EnumType\\PageBuilderProvidersEnumStringTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\TaxonomyMeta\\TypeResolvers\\InputObjectType\\TaxonomyMetaQueryInputObjectTypeResolver'] ?? self::getTaxonomyMetaQueryInputObjectTypeResolverService($container)), 'PoPWPSchema\\TaxonomyMeta\\TypeResolvers\\InputObjectType\\TaxonomyMetaQueryInputObjectTypeResolver');
        $instance->addTypeResolver(($container->services['PoPWPSchema\\UserMeta\\TypeResolvers\\InputObjectType\\UserMetaQueryInputObjectTypeResolver'] ?? self::getUserMetaQueryInputObjectTypeResolverService($container)), 'PoPWPSchema\\UserMeta\\TypeResolvers\\InputObjectType\\UserMetaQueryInputObjectTypeResolver');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Response\DatabaseEntryManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Response\DatabaseEntryManager
     */
    protected static function getDatabaseEntryManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Response\\DatabaseEntryManagerInterface'] = $instance = new \PoP\ComponentModel\Response\DatabaseEntryManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Response\OutputServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Response\OutputService
     */
    protected static function getOutputServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Response\\OutputServiceInterface'] = $instance = new \PoP\ComponentModel\Response\OutputService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\InputCoercingServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Schema\InputCoercingService
     */
    protected static function getInputCoercingServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Schema\\InputCoercingServiceInterface'] = $instance = new \PoP\ComponentModel\Schema\InputCoercingService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\SchemaCastingServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Schema\SchemaCastingService
     */
    protected static function getSchemaCastingServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Schema\\SchemaCastingServiceInterface'] = $instance = new \PoP\ComponentModel\Schema\SchemaCastingService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\SchemaDefinitionServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService
     */
    protected static function getSchemaDefinitionServiceInterface2Service($container)
    {
        $container->services['PoP\\ComponentModel\\Schema\\SchemaDefinitionServiceInterface'] = $instance = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Schema\SchemaNamespacingServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Schema\SchemaNamespacingService
     */
    protected static function getSchemaNamespacingServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Schema\\SchemaNamespacingServiceInterface'] = $instance = new \PoP\ComponentModel\Schema\SchemaNamespacingService();

        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('GraphQLByPoP\\GraphQLServer', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoP\\ComponentModel', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoP\\Engine', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPSchema\\HTTPRequests', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPSchema\\DirectiveCommons', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPSchema\\ExtendedSchemaCommons', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPSchema\\SchemaCommons', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Categories', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CommentMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CommentMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Comments', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Taxonomies', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\TaxonomyMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\TaxonomyMutationsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CategoryMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CategoryMutationsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostCategoryMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostCategoryMutationsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostTagMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostTagMutationsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostMedia', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostMedia', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostMediaMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostUserMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostUserMutationsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\MediaMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PageMediaMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PostMediaMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPosts', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\CustomPostsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Media', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Menus', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Meta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PageMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PageMutationsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Pages', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PostCategories', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PostCategoryMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PostMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Posts', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PostTagMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\PostTags', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\QueriedObject', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Settings', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\TagMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\TagMutationsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Tags', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\TaxonomyMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\UserAvatars', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\UserMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\UserRoles', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\UserRolesWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\Users', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\UserState', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\UserStateMutations', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\CommentMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Comments', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\CustomPostMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\CustomPosts', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Media', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Menus', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Meta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Pages', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Posts', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Blocks', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Site', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Multisite', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\PageBuilder', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\TaxonomyMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\UserMeta', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\Users', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\SchemaCommons', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPCMSSchema\\SchemaCommonsWP', '');
        $instance->addSchemaNamespaceForClassOwnerAndProjectNamespace('PoPWPSchema\\SchemaCommons', '');

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\State\AppStateProvider' shared autowired service.
     *
     * @return \PoP\ComponentModel\State\AppStateProvider
     */
    protected static function getAppStateProvider12Service($container)
    {
        $container->services['PoP\\ComponentModel\\State\\AppStateProvider'] = $instance = new \PoP\ComponentModel\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\State\ApplicationState' shared autowired service.
     *
     * @return \PoP\ComponentModel\State\ApplicationState
     */
    protected static function getApplicationStateService($container)
    {
        return $container->services['PoP\\ComponentModel\\State\\ApplicationState'] = new \PoP\ComponentModel\State\ApplicationState();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\EnumType\HookNames' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\EnumType\HookNames
     */
    protected static function getHookNames4Service($container)
    {
        return $container->services['PoP\\ComponentModel\\TypeResolvers\\EnumType\\HookNames'] = new \PoP\ComponentModel\TypeResolvers\EnumType\HookNames();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\HookHelpers' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\HookHelpers
     */
    protected static function getHookHelpersService($container)
    {
        return $container->services['PoP\\ComponentModel\\TypeResolvers\\HookHelpers'] = new \PoP\ComponentModel\TypeResolvers\HookHelpers();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\Hooks' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\Hooks
     */
    protected static function getHooksService($container)
    {
        return $container->services['PoP\\ComponentModel\\TypeResolvers\\Hooks'] = new \PoP\ComponentModel\TypeResolvers\Hooks();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\InputObjectType\HookNames' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\InputObjectType\HookNames
     */
    protected static function getHookNames5Service($container)
    {
        return $container->services['PoP\\ComponentModel\\TypeResolvers\\InputObjectType\\HookNames'] = new \PoP\ComponentModel\TypeResolvers\InputObjectType\HookNames();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\InterfaceType\IdentifiableObjectInterfaceTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\InterfaceType\IdentifiableObjectInterfaceTypeResolver
     */
    protected static function getIdentifiableObjectInterfaceTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\InterfaceType\\IdentifiableObjectInterfaceTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\InterfaceType\IdentifiableObjectInterfaceTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\PipelinePositions' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\PipelinePositions
     */
    protected static function getPipelinePositionsService($container)
    {
        return $container->services['PoP\\ComponentModel\\TypeResolvers\\PipelinePositions'] = new \PoP\ComponentModel\TypeResolvers\PipelinePositions();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\AnyBuiltInScalarScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\AnyBuiltInScalarScalarTypeResolver
     */
    protected static function getAnyBuiltInScalarScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyBuiltInScalarScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\AnyBuiltInScalarScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\AnyScalarScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\AnyScalarScalarTypeResolver
     */
    protected static function getAnyScalarScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyScalarScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\AnyScalarScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\AnyStringScalarScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\AnyStringScalarScalarTypeResolver
     */
    protected static function getAnyStringScalarScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\AnyStringScalarScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\AnyStringScalarScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\BooleanScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\BooleanScalarTypeResolver
     */
    protected static function getBooleanScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\BooleanScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\BooleanScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\DangerouslyNonSpecificScalarTypeScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\DangerouslyNonSpecificScalarTypeScalarTypeResolver
     */
    protected static function getDangerouslyNonSpecificScalarTypeScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\DangerouslyNonSpecificScalarTypeScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\DangerouslyNonSpecificScalarTypeScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\FloatScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\FloatScalarTypeResolver
     */
    protected static function getFloatScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\FloatScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\FloatScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\IDScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\IDScalarTypeResolver
     */
    protected static function getIDScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IDScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\IDScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\IntScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\IntScalarTypeResolver
     */
    protected static function getIntScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\IntScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\IntScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\ScalarType\StringScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\ScalarType\StringScalarTypeResolver
     */
    protected static function getStringScalarTypeResolverService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeResolvers\\ScalarType\\StringScalarTypeResolver'] = $instance = new \PoP\ComponentModel\TypeResolvers\ScalarType\StringScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\UnionType\UnionTypeHelpers' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\UnionType\UnionTypeHelpers
     */
    protected static function getUnionTypeHelpersService($container)
    {
        return $container->services['PoP\\ComponentModel\\TypeResolvers\\UnionType\\UnionTypeHelpers'] = new \PoP\ComponentModel\TypeResolvers\UnionType\UnionTypeHelpers();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeResolvers\UnionType\UnionTypeSymbols' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeResolvers\UnionType\UnionTypeSymbols
     */
    protected static function getUnionTypeSymbolsService($container)
    {
        return $container->services['PoP\\ComponentModel\\TypeResolvers\\UnionType\\UnionTypeSymbols'] = new \PoP\ComponentModel\TypeResolvers\UnionType\UnionTypeSymbols();
    }

    /**
     * Gets the public 'PoP\ComponentModel\TypeSerialization\TypeSerializationServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\TypeSerialization\TypeSerializationService
     */
    protected static function getTypeSerializationServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\TypeSerialization\\TypeSerializationServiceInterface'] = $instance = new \PoP\ComponentModel\TypeSerialization\TypeSerializationService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentModel\Variables\VariableManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Variables\VariableManager
     */
    protected static function getVariableManagerInterfaceService($container)
    {
        return $container->services['PoP\\ComponentModel\\Variables\\VariableManagerInterface'] = new \PoP\ComponentModel\Variables\VariableManager();
    }

    /**
     * Gets the public 'PoP\ComponentModel\Versioning\VersioningServiceInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\Versioning\VersioningService
     */
    protected static function getVersioningServiceInterfaceService($container)
    {
        $container->services['PoP\\ComponentModel\\Versioning\\VersioningServiceInterface'] = $instance = new \PoP\ComponentModel\Versioning\VersioningService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\ComponentRouting\ComponentRoutingProcessorManagerInterface' shared autowired service.
     *
     * @return \PoP\ComponentModel\ComponentRouting\ComponentRoutingProcessorManager
     */
    protected static function getComponentRoutingProcessorManagerInterfaceService($container)
    {
        $container->services['PoP\\ComponentRouting\\ComponentRoutingProcessorManagerInterface'] = $instance = new \PoP\ComponentModel\ComponentRouting\ComponentRoutingProcessorManager();

        $instance->addComponentRoutingProcessor(($container->services['PoP\\ComponentModel\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor9Service($container)), 'PoP\\ComponentModel\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['PoPAPI\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor2Service($container)), 'PoPAPI\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['GraphQLByPoP\\GraphQLServer\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessorService($container)), 'GraphQLByPoP\\GraphQLServer\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor8Service($container)), 'PoPCMSSchema\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['PoPCMSSchema\\Pages\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor3Service($container)), 'PoPCMSSchema\\Pages\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor6Service($container)), 'PoPCMSSchema\\Posts\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor7Service($container)), 'PoPCMSSchema\\Posts\\ConditionalOnModule\\Users\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor4Service($container)), 'PoPCMSSchema\\PostCategories\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');
        $instance->addComponentRoutingProcessor(($container->services['PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor'] ?? self::getEntryComponentRoutingProcessor5Service($container)), 'PoPCMSSchema\\PostTags\\ConditionalOnModule\\API\\ComponentRoutingProcessors\\EntryComponentRoutingProcessor');

        return $instance;
    }

    /**
     * Gets the public 'PoP\DOMCrawler\CrawlerFactoryInterface' shared autowired service.
     *
     * @return \PoP\DOMCrawler\CrawlerFactory
     */
    protected static function getCrawlerFactoryInterfaceService($container)
    {
        return $container->services['PoP\\DOMCrawler\\CrawlerFactoryInterface'] = new \PoP\DOMCrawler\CrawlerFactory();
    }

    /**
     * Gets the public 'PoP\Definitions\DefinitionManagerInterface' shared autowired service.
     *
     * @return \PoP\Definitions\DefinitionManager
     */
    protected static function getDefinitionManagerInterfaceService($container)
    {
        return $container->services['PoP\\Definitions\\DefinitionManagerInterface'] = new \PoP\Definitions\DefinitionManager();
    }

    /**
     * Gets the public 'PoP\EngineWP\HelperServices\TemplateHelpersInterface' shared autowired service.
     *
     * @return \PoP\EngineWP\HelperServices\TemplateHelpers
     */
    protected static function getTemplateHelpersInterfaceService($container)
    {
        return $container->services['PoP\\EngineWP\\HelperServices\\TemplateHelpersInterface'] = new \PoP\EngineWP\HelperServices\TemplateHelpers();
    }

    /**
     * Gets the public 'PoP\EngineWP\Hooks\TemplateHookSet' shared autowired service.
     *
     * @return \PoP\EngineWP\Hooks\TemplateHookSet
     */
    protected static function getTemplateHookSetService($container)
    {
        $container->services['PoP\\EngineWP\\Hooks\\TemplateHookSet'] = $instance = new \PoP\EngineWP\Hooks\TemplateHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\Checkpoints\DoingPostCheckpoint' shared autowired service.
     *
     * @return \PoP\Engine\Checkpoints\DoingPostCheckpoint
     */
    protected static function getDoingPostCheckpointService($container)
    {
        $container->services['PoP\\Engine\\Checkpoints\\DoingPostCheckpoint'] = $instance = new \PoP\Engine\Checkpoints\DoingPostCheckpoint();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\IncludeFieldDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\IncludeFieldDirectiveResolver
     */
    protected static function getIncludeFieldDirectiveResolverService($container)
    {
        $container->services['PoP\\Engine\\DirectiveResolvers\\IncludeFieldDirectiveResolver'] = $instance = new \PoP\Engine\DirectiveResolvers\IncludeFieldDirectiveResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\DirectiveResolvers\SkipFieldDirectiveResolver' shared autowired service.
     *
     * @return \PoP\Engine\DirectiveResolvers\SkipFieldDirectiveResolver
     */
    protected static function getSkipFieldDirectiveResolverService($container)
    {
        $container->services['PoP\\Engine\\DirectiveResolvers\\SkipFieldDirectiveResolver'] = $instance = new \PoP\Engine\DirectiveResolvers\SkipFieldDirectiveResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\Engine\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider
     */
    protected static function getCheckpointErrorFeedbackItemProvider3Service($container)
    {
        $container->services['PoP\\Engine\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider'] = $instance = new \PoP\Engine\FeedbackItemProviders\CheckpointErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\FeedbackItemProviders\ErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\Engine\FeedbackItemProviders\ErrorFeedbackItemProvider
     */
    protected static function getErrorFeedbackItemProvider4Service($container)
    {
        $container->services['PoP\\Engine\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] = $instance = new \PoP\Engine\FeedbackItemProviders\ErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\FieldResolvers\ObjectType\AppStateMethodsGlobalObjectTypeFieldResolver' shared autowired service.
     *
     * @return \PoP\Engine\FieldResolvers\ObjectType\AppStateMethodsGlobalObjectTypeFieldResolver
     */
    protected static function getAppStateMethodsGlobalObjectTypeFieldResolverService($container)
    {
        $container->services['PoP\\Engine\\FieldResolvers\\ObjectType\\AppStateMethodsGlobalObjectTypeFieldResolver'] = $instance = new \PoP\Engine\FieldResolvers\ObjectType\AppStateMethodsGlobalObjectTypeFieldResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\Hooks\VarsHookSet' shared autowired service.
     *
     * @return \PoP\Engine\Hooks\VarsHookSet
     */
    protected static function getVarsHookSet6Service($container)
    {
        $container->services['PoP\\Engine\\Hooks\\VarsHookSet'] = $instance = new \PoP\Engine\Hooks\VarsHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\ObjectModels\Root' shared autowired service.
     *
     * @return \PoP\Engine\ObjectModels\Root
     */
    protected static function getRootService($container)
    {
        return $container->services['PoP\\Engine\\ObjectModels\\Root'] = new \PoP\Engine\ObjectModels\Root();
    }

    /**
     * Gets the public 'PoP\Engine\ObjectModels\SuperRoot' shared autowired service.
     *
     * @return \PoP\Engine\ObjectModels\SuperRoot
     */
    protected static function getSuperRootService($container)
    {
        return $container->services['PoP\\Engine\\ObjectModels\\SuperRoot'] = new \PoP\Engine\ObjectModels\SuperRoot();
    }

    /**
     * Gets the public 'PoP\Engine\RelationalTypeDataLoaders\ObjectType\RootObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoP\Engine\RelationalTypeDataLoaders\ObjectType\RootObjectTypeDataLoader
     */
    protected static function getRootObjectTypeDataLoaderService($container)
    {
        $container->services['PoP\\Engine\\RelationalTypeDataLoaders\\ObjectType\\RootObjectTypeDataLoader'] = $instance = new \PoP\Engine\RelationalTypeDataLoaders\ObjectType\RootObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\RelationalTypeDataLoaders\ObjectType\SuperRootObjectTypeDataLoader' shared autowired service.
     *
     * @return \PoP\Engine\RelationalTypeDataLoaders\ObjectType\SuperRootObjectTypeDataLoader
     */
    protected static function getSuperRootObjectTypeDataLoaderService($container)
    {
        $container->services['PoP\\Engine\\RelationalTypeDataLoaders\\ObjectType\\SuperRootObjectTypeDataLoader'] = $instance = new \PoP\Engine\RelationalTypeDataLoaders\ObjectType\SuperRootObjectTypeDataLoader();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\Schema\SchemaDefinitionServiceInterface' shared autowired service.
     *
     * @return \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService
     */
    protected static function getSchemaDefinitionServiceInterface3Service($container)
    {
        $container->services['PoP\\Engine\\Schema\\SchemaDefinitionServiceInterface'] = $instance = new \GraphQLByPoP\GraphQLServer\Schema\GraphQLSchemaDefinitionService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\TypeResolvers\ObjectType\RootObjectTypeResolver' shared autowired service.
     *
     * @return \PoP\Engine\TypeResolvers\ObjectType\RootObjectTypeResolver
     */
    protected static function getRootObjectTypeResolverService($container)
    {
        $container->services['PoP\\Engine\\TypeResolvers\\ObjectType\\RootObjectTypeResolver'] = $instance = new \PoP\Engine\TypeResolvers\ObjectType\RootObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\TypeResolvers\ObjectType\SuperRootObjectTypeResolver' shared autowired service.
     *
     * @return \PoP\Engine\TypeResolvers\ObjectType\SuperRootObjectTypeResolver
     */
    protected static function getSuperRootObjectTypeResolverService($container)
    {
        $container->services['PoP\\Engine\\TypeResolvers\\ObjectType\\SuperRootObjectTypeResolver'] = $instance = new \PoP\Engine\TypeResolvers\ObjectType\SuperRootObjectTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Engine\TypeResolvers\ScalarType\JSONObjectScalarTypeResolver' shared autowired service.
     *
     * @return \PoP\Engine\TypeResolvers\ScalarType\JSONObjectScalarTypeResolver
     */
    protected static function getJSONObjectScalarTypeResolverService($container)
    {
        $container->services['PoP\\Engine\\TypeResolvers\\ScalarType\\JSONObjectScalarTypeResolver'] = $instance = new \PoP\Engine\TypeResolvers\ScalarType\JSONObjectScalarTypeResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GraphQLParser\AST\ASTHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\GraphQLParser\AST\ASTHelperService
     */
    protected static function getASTHelperServiceInterfaceService($container)
    {
        $container->services['PoP\\GraphQLParser\\AST\\ASTHelperServiceInterface'] = $instance = new \PoP\GraphQLParser\AST\ASTHelperService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GraphQLParser\AST\ASTNodeDuplicatorServiceInterface' shared autowired service.
     *
     * @return \PoP\GraphQLParser\AST\ASTNodeDuplicatorService
     */
    protected static function getASTNodeDuplicatorServiceInterfaceService($container)
    {
        $container->services['PoP\\GraphQLParser\\AST\\ASTNodeDuplicatorServiceInterface'] = $instance = new \PoP\GraphQLParser\AST\ASTNodeDuplicatorService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GraphQLParser\FeedbackItemProviders\GraphQLExtendedSpecErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\GraphQLParser\FeedbackItemProviders\GraphQLExtendedSpecErrorFeedbackItemProvider
     */
    protected static function getGraphQLExtendedSpecErrorFeedbackItemProviderService($container)
    {
        $container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLExtendedSpecErrorFeedbackItemProvider'] = $instance = new \PoP\GraphQLParser\FeedbackItemProviders\GraphQLExtendedSpecErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GraphQLParser\FeedbackItemProviders\GraphQLParserErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\GraphQLParser\FeedbackItemProviders\GraphQLParserErrorFeedbackItemProvider
     */
    protected static function getGraphQLParserErrorFeedbackItemProviderService($container)
    {
        $container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLParserErrorFeedbackItemProvider'] = $instance = new \PoP\GraphQLParser\FeedbackItemProviders\GraphQLParserErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GraphQLParser\FeedbackItemProviders\GraphQLSpecErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\GraphQLParser\FeedbackItemProviders\GraphQLSpecErrorFeedbackItemProvider
     */
    protected static function getGraphQLSpecErrorFeedbackItemProviderService($container)
    {
        $container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLSpecErrorFeedbackItemProvider'] = $instance = new \PoP\GraphQLParser\FeedbackItemProviders\GraphQLSpecErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GraphQLParser\FeedbackItemProviders\GraphQLUnsupportedFeatureErrorFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\GraphQLParser\FeedbackItemProviders\GraphQLUnsupportedFeatureErrorFeedbackItemProvider
     */
    protected static function getGraphQLUnsupportedFeatureErrorFeedbackItemProviderService($container)
    {
        $container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLUnsupportedFeatureErrorFeedbackItemProvider'] = $instance = new \PoP\GraphQLParser\FeedbackItemProviders\GraphQLUnsupportedFeatureErrorFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GraphQLParser\Query\GraphQLQueryStringFormatterInterface' shared autowired service.
     *
     * @return \PoP\GraphQLParser\Query\GraphQLQueryStringFormatter
     */
    protected static function getGraphQLQueryStringFormatterInterfaceService($container)
    {
        return $container->services['PoP\\GraphQLParser\\Query\\GraphQLQueryStringFormatterInterface'] = new \PoP\GraphQLParser\Query\GraphQLQueryStringFormatter();
    }

    /**
     * Gets the public 'PoP\GraphQLParser\State\AppStateProvider' shared autowired service.
     *
     * @return \PoP\GraphQLParser\State\AppStateProvider
     */
    protected static function getAppStateProvider13Service($container)
    {
        $container->services['PoP\\GraphQLParser\\State\\AppStateProvider'] = $instance = new \PoP\GraphQLParser\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\GuzzleHTTP\Services\GuzzleServiceInterface' shared autowired service.
     *
     * @return \PoP\GuzzleHTTP\Services\GuzzleService
     */
    protected static function getGuzzleServiceInterfaceService($container)
    {
        return $container->services['PoP\\GuzzleHTTP\\Services\\GuzzleServiceInterface'] = new \PoP\GuzzleHTTP\Services\GuzzleService();
    }

    /**
     * Gets the public 'PoP\GuzzleHTTP\Services\HTTPResponseValidatorInterface' shared autowired service.
     *
     * @return \PoP\GuzzleHTTP\Services\HTTPResponseValidator
     */
    protected static function getHTTPResponseValidatorInterfaceService($container)
    {
        $container->services['PoP\\GuzzleHTTP\\Services\\HTTPResponseValidatorInterface'] = $instance = new \PoP\GuzzleHTTP\Services\HTTPResponseValidator();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\LooseContracts\LooseContractManagerInterface' shared autowired service.
     *
     * @return \PoP\LooseContracts\LooseContractManager
     */
    protected static function getLooseContractManagerInterfaceService($container)
    {
        return $container->services['PoP\\LooseContracts\\LooseContractManagerInterface'] = new \PoP\LooseContracts\LooseContractManager();
    }

    /**
     * Gets the public 'PoP\LooseContracts\NameResolverInterface' shared autowired service.
     *
     * @return \PoP\LooseContracts\NameResolver
     */
    protected static function getNameResolverInterfaceService($container)
    {
        $container->services['PoP\\LooseContracts\\NameResolverInterface'] = $instance = new \PoP\LooseContracts\NameResolver();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\MarkdownConvertor\MarkdownConvertorInterface' shared autowired service.
     *
     * @return \PoP\MarkdownConvertor\MarkdownConvertor
     */
    protected static function getMarkdownConvertorInterfaceService($container)
    {
        return $container->services['PoP\\MarkdownConvertor\\MarkdownConvertorInterface'] = new \PoP\MarkdownConvertor\MarkdownConvertor();
    }

    /**
     * Gets the public 'PoP\RootWP\Hooks\SetupCortexRoutingHookSet' shared autowired service.
     *
     * @return \PoP\RootWP\Hooks\SetupCortexRoutingHookSet
     */
    protected static function getSetupCortexRoutingHookSetService($container)
    {
        $container->services['PoP\\RootWP\\Hooks\\SetupCortexRoutingHookSet'] = $instance = new \PoP\RootWP\Hooks\SetupCortexRoutingHookSet();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Container\ServiceInstantiatorInterface' shared autowired service.
     *
     * @return \PoP\Root\Container\ServiceInstantiator
     */
    protected static function getServiceInstantiatorInterfaceService($container)
    {
        $container->services['PoP\\Root\\Container\\ServiceInstantiatorInterface'] = $instance = new \PoP\Root\Container\ServiceInstantiator();

        $instance->addService(($container->services['PoP\\ComponentModel\\Hooks\\RemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSet'] ?? self::getRemoveIdentifiableObjectFieldsFromTransientObjectObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoP\\Engine\\Hooks\\VarsHookSet'] ?? self::getVarsHookSet6Service($container)));
        $instance->addService(($container->services['PoPAPI\\API\\Hooks\\DBEntriesHookSet'] ?? self::getDBEntriesHookSet2Service($container)));
        $instance->addService(($container->services['PoPAPI\\API\\Hooks\\RoutingHookSet'] ?? self::getRoutingHookSetService($container)));
        $instance->addService(($container->services['PoPAPI\\API\\Hooks\\VarsHookSet'] ?? self::getVarsHookSet2Service($container)));
        $instance->addService(($container->services['PoPAPI\\APIEndpointsForWP\\EndpointHandlers\\NativeAPIEndpointHandler'] ?? self::getNativeAPIEndpointHandlerService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\GraphiQLClient'] ?? self::getGraphiQLClientService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLClientsForWP\\Clients\\VoyagerClient'] ?? self::getVoyagerClientService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLEndpointForWP\\EndpointHandlers\\GraphQLEndpointHandler'] ?? self::getGraphQLEndpointHandlerService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\DBEntriesHookSet'] ?? self::getDBEntriesHookSetService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\NestedMutationHookSet'] ?? self::getNestedMutationHookSetService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\RemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSet'] ?? self::getRemoveIdentifiableObjectFieldsFromMutationRootObjectTypeHookSetService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\RemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSet'] ?? self::getRemoveIdentifiableObjectFieldsFromSchemaElementExtensionsObjectTypeHookSetService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\SchemaCacheHookSet'] ?? self::getSchemaCacheHookSetService($container)));
        $instance->addService(($container->services['GraphQLByPoP\\GraphQLServer\\Hooks\\VarsHookSet'] ?? self::getVarsHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\SchemaCommons\\Hooks\\RoutingHookSet'] ?? self::getRoutingHookSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\SchemaCommons\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet8Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPosts\\Hooks\\VarsHookSet'] ?? self::getVarsHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPosts\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Categories\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Categories\\SchemaHooks\\RootCustomPostsAddCategoryFilterInputObjectTypeHookSet'] ?? self::getRootCustomPostsAddCategoryFilterInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Categories\\ConditionalOnModule\\Users\\SchemaHooks\\UserCustomPostsAddCategoryFilterInputObjectTypeHookSet'] ?? self::getUserCustomPostsAddCategoryFilterInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoP\\RootWP\\Hooks\\SetupCortexRoutingHookSet'] ?? self::getSetupCortexRoutingHookSetService($container)));
        $instance->addService(($container->services['PoP\\EngineWP\\Hooks\\TemplateHookSet'] ?? self::getTemplateHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\SchemaCommonsWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet8Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostsWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostsWP\\Hooks\\RoutingStateHookSet'] ?? self::getRoutingStateHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CategoriesWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CategoriesWP\\Hooks\\RoutingStateHookSet'] ?? self::getRoutingStateHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Users\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet11Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet10Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet8Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet'] ?? self::getAddAuthorInputFieldsToCustomPostInputObjectTypeHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\CustomPostOrderByEnumTypeHookSet'] ?? self::getCustomPostOrderByEnumTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\FilterInputHookSet'] ?? self::getFilterInputHookSet6Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Users\\ConditionalOnModule\\CustomPosts\\SchemaHooks\\UserEnumTypeHookSet'] ?? self::getUserEnumTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UserRoles\\Hooks\\VarsHookSet'] ?? self::getVarsHookSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UserRoles\\SchemaHooks\\FilterInputHookSet'] ?? self::getFilterInputHookSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UserRoles\\SchemaHooks\\InputObjectTypeHookSet'] ?? self::getInputObjectTypeHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UserState\\Hooks\\DBEntriesHookSet'] ?? self::getDBEntriesHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UsersWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet11Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UsersWP\\Hooks\\RoutingHookSet'] ?? self::getRoutingHookSet6Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UsersWP\\Hooks\\RoutingStateHookSet'] ?? self::getRoutingStateHookSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet10Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\Hooks\\CustomPostQueryHookSet'] ?? self::getCustomPostQueryHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UsersWP\\ConditionalOnModule\\CustomPosts\\Hooks\\UserQueryHookSet'] ?? self::getUserQueryHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UserRolesWP\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet7Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Comments\\Hooks\\WhitelistParamHookSet'] ?? self::getWhitelistParamHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Comments\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\EnumTypeHookSet'] ?? self::getEnumTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\FilterInputHookSet'] ?? self::getFilterInputHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Comments\\ConditionalOnModule\\Users\\SchemaHooks\\InputObjectTypeHookSet'] ?? self::getInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CommentMutations\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] ?? self::getRemoveAuthorFilterInputHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CommentsWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CommentsWP\\ConditionalOnModule\\Users\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\AddAuthorInputFieldsToCustomPostInputObjectTypeHookSet'] ?? self::getAddAuthorInputFieldsToCustomPostInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\EnumTypeHookSet'] ?? self::getEnumTypeHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Media\\ConditionalOnModule\\Users\\SchemaHooks\\FilterInputHookSet'] ?? self::getFilterInputHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostMutations\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] ?? self::getRemoveAuthorFilterInputHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSet'] ?? self::getRemoveAuthorInputFieldsFromCustomPostInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\MediaMutations\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\MediaMutations\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] ?? self::getRemoveAuthorFilterInputHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\Hooks\\MutationResolverHookSet'] ?? self::getMutationResolverHookSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\MediaMutations\\ConditionalOnModule\\CustomPostMutations\\SchemaHooks\\AddCustomPostInputFieldsInputObjectTypeHookSet'] ?? self::getAddCustomPostInputFieldsInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\Hooks\\CustomPostMutationResolverHookSet'] ?? self::getCustomPostMutationResolverHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\Hooks\\MutationResolverHookSet'] ?? self::getMutationResolverHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostMutationsWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\MediaMutationsWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostUserMutations\\Hooks\\CustomPostMutationResolverHookSet'] ?? self::getCustomPostMutationResolverHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostUserMutations\\Hooks\\MutationResolverHookSet'] ?? self::getMutationResolverHookSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostUserMutationsWP\\Hooks\\CustomPostMutationTypeAPIQueryHookSet'] ?? self::getCustomPostMutationTypeAPIQueryHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Pages\\Hooks\\PageAddDefaultCustomPostTypeModuleConfigurationHookSet'] ?? self::getPageAddDefaultCustomPostTypeModuleConfigurationHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Pages\\Hooks\\VarsHookSet'] ?? self::getVarsHookSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Pages\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet7Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PageMutations\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet6Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PageMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] ?? self::getRemoveAuthorFilterInputHookSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PagesWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet7Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PagesWP\\Hooks\\RoutingStateHookSet'] ?? self::getRoutingStateHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PageMutationsWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet6Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Posts\\Hooks\\PostAddDefaultCustomPostTypeModuleConfigurationHookSet'] ?? self::getPostAddDefaultCustomPostTypeModuleConfigurationHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostCategories\\Hooks\\ModelInstanceHookSet'] ?? self::getModelInstanceHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostCategories\\SchemaHooks\\AddPostCategoryFilterInputObjectTypeHookSet'] ?? self::getAddPostCategoryFilterInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostCategories\\SchemaHooks\\FilterInputHookSet'] ?? self::getFilterInputHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostCategoriesWP\\Hooks\\PostCategoryQueryHookSet'] ?? self::getPostCategoryQueryHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostCategoriesWP\\Hooks\\RoutingHookSet'] ?? self::getRoutingHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\Hooks\\MutationResolverHookSet'] ?? self::getMutationResolverHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\SchemaHooks\\GenericCustomPostMutationResolverHookSet'] ?? self::getGenericCustomPostMutationResolverHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostMutations\\ConditionalOnModule\\Users\\SchemaHooks\\RemoveAuthorFilterInputHookSet'] ?? self::getRemoveAuthorFilterInputHookSet5Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostCategoryMutations\\Hooks\\MutationResolverHookSet'] ?? self::getMutationResolverHookSet6Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostCategoryMutations\\SchemaHooks\\PostMutationResolverHookSet'] ?? self::getPostMutationResolverHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Tags\\LooseContracts\\LooseContractSet'] ?? self::getLooseContractSet9Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Tags\\SchemaHooks\\RootCustomPostsAddTagFilterInputObjectTypeHookSet'] ?? self::getRootCustomPostsAddTagFilterInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\Tags\\ConditionalOnModule\\Users\\SchemaHooks\\UserCustomPostsAddTagFilterInputObjectTypeHookSet'] ?? self::getUserCustomPostsAddTagFilterInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostTagMutations\\Hooks\\MutationResolverHookSet'] ?? self::getMutationResolverHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostTagMutations\\SchemaHooks\\GenericCustomPostMutationResolverHookSet'] ?? self::getGenericCustomPostMutationResolverHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\TagsWP\\LooseContracts\\LooseContractResolutionSet'] ?? self::getLooseContractResolutionSet9Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\TagsWP\\Hooks\\RoutingStateHookSet'] ?? self::getRoutingStateHookSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostTags\\SchemaHooks\\AddPostTagFilterInputObjectTypeHookSet'] ?? self::getAddPostTagFilterInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostTags\\SchemaHooks\\FilterInputHookSet'] ?? self::getFilterInputHookSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostTagMutations\\Hooks\\MutationResolverHookSet'] ?? self::getMutationResolverHookSet7Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostTagMutations\\SchemaHooks\\PostMutationResolverHookSet'] ?? self::getPostMutationResolverHookSet2Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostTagsWP\\Hooks\\PostTagQueryHookSet'] ?? self::getPostTagQueryHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostTagsWP\\Hooks\\RoutingHookSet'] ?? self::getRoutingHookSet3Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CommentMetaWP\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet2Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Comments\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet9Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Comments\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet'] ?? self::getConvertDateQueryInputFieldToArrayInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CommentMeta\\Hooks\\CommentMetaOrderByQueryHookSet'] ?? self::getCommentMetaOrderByQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CommentMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] ?? self::getAddMetaQueryInputFieldsInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CommentMeta\\SchemaHooks\\CommentMetaOrderByEnumTypeHookSet'] ?? self::getCommentMetaOrderByEnumTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\CustomPostMetaWP\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet4Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPosts\\Hooks\\AddCustomPostPasswordToFilterInputQueryHookSet'] ?? self::getAddCustomPostPasswordToFilterInputQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPosts\\Hooks\\CustomPostOrderByQueryHookSet'] ?? self::getCustomPostOrderByQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\AddCustomPostPasswordInputFieldsInputObjectTypeHookSet'] ?? self::getAddCustomPostPasswordInputFieldsInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet'] ?? self::getConvertDateQueryInputFieldToArrayInputObjectTypeHookSet2Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\CustomPostQueryHookSet'] ?? self::getCustomPostQueryHookSet2Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPosts\\SchemaHooks\\FilterCustomPostStatusEnumTypeHookSet'] ?? self::getFilterCustomPostStatusEnumTypeHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPostMeta\\Hooks\\CustomPostMetaOrderByQueryHookSet'] ?? self::getCustomPostMetaOrderByQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPostMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] ?? self::getAddMetaQueryInputFieldsInputObjectTypeHookSet2Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\CustomPostMeta\\SchemaHooks\\CustomPostMetaOrderByEnumTypeHookSet'] ?? self::getCustomPostMetaOrderByEnumTypeHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\Media\\SchemaHooks\\ConvertDateQueryInputFieldToArrayInputObjectTypeHookSet'] ?? self::getConvertDateQueryInputFieldToArrayInputObjectTypeHookSet3Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Media\\SchemaHooks\\InputObjectTypeHookSet'] ?? self::getInputObjectTypeHookSet3Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Menus\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet10Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Pages\\Hooks\\AddPagePasswordToFilterInputQueryHookSet'] ?? self::getAddPagePasswordToFilterInputQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\Pages\\SchemaHooks\\AddPagePasswordInputFieldsInputObjectTypeHookSet'] ?? self::getAddPagePasswordInputFieldsInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\PostsWP\\Hooks\\RoutingHookSet'] ?? self::getRoutingHookSet4Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Posts\\Hooks\\AddPostPasswordToFilterInputQueryHookSet'] ?? self::getAddPostPasswordToFilterInputQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\Posts\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet11Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Posts\\SchemaHooks\\AddPostPasswordInputFieldsInputObjectTypeHookSet'] ?? self::getAddPostPasswordInputFieldsInputObjectTypeHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\Posts\\SchemaHooks\\InputObjectTypeHookSet'] ?? self::getInputObjectTypeHookSet4Service($container)));
        $instance->addService(($container->services['PoPCMSSchema\\TaxonomyMetaWP\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet5Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\TaxonomyMeta\\Hooks\\TaxonomyMetaOrderByQueryHookSet'] ?? self::getTaxonomyMetaOrderByQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\TaxonomyMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] ?? self::getAddMetaQueryInputFieldsInputObjectTypeHookSet3Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\TaxonomyMeta\\SchemaHooks\\TaxonomyMetaOrderByEnumTypeHookSet'] ?? self::getTaxonomyMetaOrderByEnumTypeHookSetService($container)));
        $instance->addService(($container->services['PoPCMSSchema\\UserMetaWP\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet6Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\Users\\Hooks\\QueryHookSet'] ?? self::getQueryHookSet12Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\UserMeta\\Hooks\\UserMetaOrderByQueryHookSet'] ?? self::getUserMetaOrderByQueryHookSetService($container)));
        $instance->addService(($container->services['PoPWPSchema\\UserMeta\\SchemaHooks\\AddMetaQueryInputFieldsInputObjectTypeHookSet'] ?? self::getAddMetaQueryInputFieldsInputObjectTypeHookSet4Service($container)));
        $instance->addService(($container->services['PoPWPSchema\\UserMeta\\SchemaHooks\\UserMetaOrderByEnumTypeHookSet'] ?? self::getUserMetaOrderByEnumTypeHookSetService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\AdministratorRoleUserAuthorizationScheme'] ?? self::getAdministratorRoleUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToAuthorRoleUserAuthorizationScheme'] ?? self::getDownToAuthorRoleUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\DownToEditorRoleUserAuthorizationScheme'] ?? self::getDownToEditorRoleUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Security\\UserAuthorizationSchemes\\ManageGraphQLSchemaCapabilityUserAuthorizationScheme'] ?? self::getManageGraphQLSchemaCapabilityUserAuthorizationSchemeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\BlockCategories\\EndpointBlockCategory'] ?? self::getEndpointBlockCategoryService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\BlockCategories\\SchemaConfigurationBlockCategory'] ?? self::getSchemaConfigurationBlockCategoryService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\EndpointSchemaConfigurationBlock'] ?? self::getEndpointSchemaConfigurationBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigComposableDirectivesBlock'] ?? self::getSchemaConfigComposableDirectivesBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigExposeSensitiveDataBlock'] ?? self::getSchemaConfigExposeSensitiveDataBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigGlobalFieldsBlock'] ?? self::getSchemaConfigGlobalFieldsBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMultiFieldDirectivesBlock'] ?? self::getSchemaConfigMultiFieldDirectivesBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigMutationSchemeBlock'] ?? self::getSchemaConfigMutationSchemeBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigNamespacingBlock'] ?? self::getSchemaConfigNamespacingBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigPayloadTypesForMutationsBlock'] ?? self::getSchemaConfigPayloadTypesForMutationsBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigResponseHeadersBlock'] ?? self::getSchemaConfigResponseHeadersBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCategoriesBlock'] ?? self::getSchemaConfigSchemaCategoriesBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCommentMetaBlock'] ?? self::getSchemaConfigSchemaCommentMetaBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostMetaBlock'] ?? self::getSchemaConfigSchemaCustomPostMetaBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaCustomPostsBlock'] ?? self::getSchemaConfigSchemaCustomPostsBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaSettingsBlock'] ?? self::getSchemaConfigSchemaSettingsBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTagsBlock'] ?? self::getSchemaConfigSchemaTagsBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaTaxonomyMetaBlock'] ?? self::getSchemaConfigSchemaTaxonomyMetaBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSchemaUserMetaBlock'] ?? self::getSchemaConfigSchemaUserMetaBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Blocks\\SchemaConfigSelfFieldsBlock'] ?? self::getSchemaConfigSelfFieldsBlockService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\CustomPostTypes\\GraphQLSchemaConfigurationCustomPostType'] ?? self::getGraphQLSchemaConfigurationCustomPostTypeService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\EditorScripts\\SchemaConfigurationAdditionalDocumentationEditorScript'] ?? self::getSchemaConfigurationAdditionalDocumentationEditorScriptService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Endpoint\\EndpointExecuterService'] ?? self::getEndpointExecuterServiceService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\GraphQLEndpointPathProviders\\GraphQLSingleEndpointPathProvider'] ?? self::getGraphQLSingleEndpointPathProviderService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Hooks\\PrintEndpointInEditorHookSet'] ?? self::getPrintEndpointInEditorHookSetService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Hooks\\QueryHookSet'] ?? self::getQueryHookSetService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\BottomMenuPageAttacher'] ?? self::getBottomMenuPageAttacherService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\SingleEndpointClientMenuPageAttacher'] ?? self::getSingleEndpointClientMenuPageAttacherService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPageAttachers\\TopMenuPageAttacher'] ?? self::getTopMenuPageAttacherService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\AboutMenuPage'] ?? self::getAboutMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionDocModuleDocumentationMenuPage'] ?? self::getExtensionDocModuleDocumentationMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionDocsMenuPage'] ?? self::getExtensionDocsMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionModuleDocumentationMenuPage'] ?? self::getExtensionModuleDocumentationMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ExtensionsMenuPage'] ?? self::getExtensionsMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\GraphQLVoyagerMenuPage'] ?? self::getGraphQLVoyagerMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\GraphiQLMenuPage'] ?? self::getGraphiQLMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModuleDocumentationMenuPage'] ?? self::getModuleDocumentationMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ModulesMenuPage'] ?? self::getModulesMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\ReleaseNotesAboutMenuPage'] ?? self::getReleaseNotesAboutMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\SettingsMenuPage'] ?? self::getSettingsMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\MenuPages\\TutorialMenuPage'] ?? self::getTutorialMenuPageService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Menus\\PluginMenu'] ?? self::getPluginMenuService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfiguratorExecuters\\PrivateEndpointSchemaConfiguratorExecuter'] ?? self::getPrivateEndpointSchemaConfiguratorExecuterService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\SchemaConfiguratorExecuters\\SingleEndpointSchemaConfiguratorExecuter'] ?? self::getSingleEndpointSchemaConfiguratorExecuterService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Services\\Taxonomies\\GraphQLEndpointCategoryTaxonomy'] ?? self::getGraphQLEndpointCategoryTaxonomyService($container)));
        $instance->addService(($container->services['GatoGraphQL\\GatoGraphQL\\Hooks\\ApplicationPasswordAuthorizationHookSet'] ?? self::getApplicationPasswordAuthorizationHookSetService($container)));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\FeedbackItemProviders\GenericFeedbackItemProvider' shared autowired service.
     *
     * @return \PoP\Root\FeedbackItemProviders\GenericFeedbackItemProvider
     */
    protected static function getGenericFeedbackItemProvider2Service($container)
    {
        $container->services['PoP\\Root\\FeedbackItemProviders\\GenericFeedbackItemProvider'] = $instance = new \PoP\Root\FeedbackItemProviders\GenericFeedbackItemProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Instances\InstanceManagerInterface' shared autowired service.
     *
     * @return \PoP\Root\Instances\InstanceManager
     */
    protected static function getInstanceManagerInterfaceService($container)
    {
        return $container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] = new \PoP\Root\Instances\InstanceManager();
    }

    /**
     * Gets the public 'PoP\Root\Registries\AppStateProviderRegistryInterface' shared autowired service.
     *
     * @return \PoP\Root\Registries\AppStateProviderRegistry
     */
    protected static function getAppStateProviderRegistryInterfaceService($container)
    {
        $container->services['PoP\\Root\\Registries\\AppStateProviderRegistryInterface'] = $instance = new \PoP\Root\Registries\AppStateProviderRegistry();

        $instance->addAppStateProvider(($container->services['PoP\\Root\\State\\AppStateProvider'] ?? self::getAppStateProvider14Service($container)), 'PoP\\Root\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoP\\GraphQLParser\\State\\AppStateProvider'] ?? self::getAppStateProvider13Service($container)), 'PoP\\GraphQLParser\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoP\\ComponentModel\\State\\AppStateProvider'] ?? self::getAppStateProvider12Service($container)), 'PoP\\ComponentModel\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPAPI\\API\\State\\AppStateProvider'] ?? self::getAppStateProvider4Service($container)), 'PoPAPI\\API\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPAPI\\APIEndpointsForWP\\State\\NativeAPIEndpointHandlerAppStateProvider'] ?? self::getNativeAPIEndpointHandlerAppStateProviderService($container)), 'PoPAPI\\APIEndpointsForWP\\State\\NativeAPIEndpointHandlerAppStateProvider');
        $instance->addAppStateProvider(($container->services['GraphQLByPoP\\GraphQLEndpointForWP\\State\\GraphQLEndpointHandlerAppStateProvider'] ?? self::getGraphQLEndpointHandlerAppStateProviderService($container)), 'GraphQLByPoP\\GraphQLEndpointForWP\\State\\GraphQLEndpointHandlerAppStateProvider');
        $instance->addAppStateProvider(($container->services['GraphQLByPoP\\GraphQLRequest\\State\\AppStateProvider'] ?? self::getAppStateProvider2Service($container)), 'GraphQLByPoP\\GraphQLRequest\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['GraphQLByPoP\\GraphQLServer\\State\\AppStateProvider'] ?? self::getAppStateProvider3Service($container)), 'GraphQLByPoP\\GraphQLServer\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPCMSSchema\\QueriedObject\\State\\AppStateProvider'] ?? self::getAppStateProvider8Service($container)), 'PoPCMSSchema\\QueriedObject\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPCMSSchema\\CustomPosts\\State\\AppStateProvider'] ?? self::getAppStateProvider6Service($container)), 'PoPCMSSchema\\CustomPosts\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPCMSSchema\\Categories\\State\\AppStateProvider'] ?? self::getAppStateProvider5Service($container)), 'PoPCMSSchema\\Categories\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPCMSSchema\\Users\\State\\AppStateProvider'] ?? self::getAppStateProvider11Service($container)), 'PoPCMSSchema\\Users\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPCMSSchema\\UserState\\State\\AppStateProvider'] ?? self::getAppStateProvider10Service($container)), 'PoPCMSSchema\\UserState\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPCMSSchema\\Pages\\State\\AppStateProvider'] ?? self::getAppStateProvider7Service($container)), 'PoPCMSSchema\\Pages\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['PoPCMSSchema\\Tags\\State\\AppStateProvider'] ?? self::getAppStateProvider9Service($container)), 'PoPCMSSchema\\Tags\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['GatoGraphQL\\GatoGraphQL\\State\\AppStateProvider'] ?? self::getAppStateProviderService($container)), 'GatoGraphQL\\GatoGraphQL\\State\\AppStateProvider');
        $instance->addAppStateProvider(($container->services['GatoGraphQL\\GatoGraphQL\\State\\ExecutingGraphQLRequestAppStateProvider'] ?? self::getExecutingGraphQLRequestAppStateProviderService($container)), 'GatoGraphQL\\GatoGraphQL\\State\\ExecutingGraphQLRequestAppStateProvider');

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Registries\FeedbackItemRegistryInterface' shared autowired service.
     *
     * @return \PoP\Root\Registries\FeedbackItemRegistry
     */
    protected static function getFeedbackItemRegistryInterfaceService($container)
    {
        $container->services['PoP\\Root\\Registries\\FeedbackItemRegistryInterface'] = $instance = new \PoP\Root\Registries\FeedbackItemRegistry();

        $instance->useFeedbackItemProvider(($container->services['PoP\\Root\\FeedbackItemProviders\\GenericFeedbackItemProvider'] ?? self::getGenericFeedbackItemProvider2Service($container)), 'PoP\\Root\\FeedbackItemProviders\\GenericFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLExtendedSpecErrorFeedbackItemProvider'] ?? self::getGraphQLExtendedSpecErrorFeedbackItemProviderService($container)), 'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLExtendedSpecErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLParserErrorFeedbackItemProvider'] ?? self::getGraphQLParserErrorFeedbackItemProviderService($container)), 'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLParserErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLSpecErrorFeedbackItemProvider'] ?? self::getGraphQLSpecErrorFeedbackItemProviderService($container)), 'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLSpecErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLUnsupportedFeatureErrorFeedbackItemProvider'] ?? self::getGraphQLUnsupportedFeatureErrorFeedbackItemProviderService($container)), 'PoP\\GraphQLParser\\FeedbackItemProviders\\GraphQLUnsupportedFeatureErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider'] ?? self::getCheckpointErrorFeedbackItemProvider2Service($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\DeprecationFeedbackItemProvider'] ?? self::getDeprecationFeedbackItemProviderService($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\DeprecationFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] ?? self::getErrorFeedbackItemProvider3Service($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\ErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\FieldResolutionErrorFeedbackItemProvider'] ?? self::getFieldResolutionErrorFeedbackItemProviderService($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\FieldResolutionErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\GenericFeedbackItemProvider'] ?? self::getGenericFeedbackItemProviderService($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\GenericFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\InputValueCoercionGraphQLSpecErrorFeedbackItemProvider'] ?? self::getInputValueCoercionGraphQLSpecErrorFeedbackItemProviderService($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\InputValueCoercionGraphQLSpecErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider13Service($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\SuggestionFeedbackItemProvider'] ?? self::getSuggestionFeedbackItemProviderService($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\SuggestionFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\ComponentModel\\FeedbackItemProviders\\WarningFeedbackItemProvider'] ?? self::getWarningFeedbackItemProviderService($container)), 'PoP\\ComponentModel\\FeedbackItemProviders\\WarningFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\Engine\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider'] ?? self::getCheckpointErrorFeedbackItemProvider3Service($container)), 'PoP\\Engine\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoP\\Engine\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] ?? self::getErrorFeedbackItemProvider4Service($container)), 'PoP\\Engine\\FeedbackItemProviders\\ErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPAPI\\API\\FeedbackItemProviders\\FeedbackItemProvider'] ?? self::getFeedbackItemProviderService($container)), 'PoPAPI\\API\\FeedbackItemProviders\\FeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPSchema\\SchemaCommons\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] ?? self::getErrorFeedbackItemProvider2Service($container)), 'PoPSchema\\SchemaCommons\\FeedbackItemProviders\\ErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPSchema\\SchemaCommons\\FeedbackItemProviders\\InputValueCoercionErrorFeedbackItemProvider'] ?? self::getInputValueCoercionErrorFeedbackItemProviderService($container)), 'PoPSchema\\SchemaCommons\\FeedbackItemProviders\\InputValueCoercionErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\SchemaCommons\\FeedbackItemProviders\\FeedbackItemProvider'] ?? self::getFeedbackItemProvider3Service($container)), 'PoPCMSSchema\\SchemaCommons\\FeedbackItemProviders\\FeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\UserState\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider'] ?? self::getCheckpointErrorFeedbackItemProviderService($container)), 'PoPCMSSchema\\UserState\\FeedbackItemProviders\\CheckpointErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\UserStateMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider12Service($container)), 'PoPCMSSchema\\UserStateMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\TaxonomyMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider11Service($container)), 'PoPCMSSchema\\TaxonomyMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\CategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProviderService($container)), 'PoPCMSSchema\\CategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\CommentMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider2Service($container)), 'PoPCMSSchema\\CommentMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\CustomPostMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider5Service($container)), 'PoPCMSSchema\\CustomPostMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\MediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider8Service($container)), 'PoPCMSSchema\\MediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\CustomPostMediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider4Service($container)), 'PoPCMSSchema\\CustomPostMediaMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\CustomPostUserMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider7Service($container)), 'PoPCMSSchema\\CustomPostUserMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\PageMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider9Service($container)), 'PoPCMSSchema\\PageMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\CustomPostCategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider3Service($container)), 'PoPCMSSchema\\CustomPostCategoryMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\CustomPostTagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider6Service($container)), 'PoPCMSSchema\\CustomPostTagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\TagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider'] ?? self::getMutationErrorFeedbackItemProvider10Service($container)), 'PoPCMSSchema\\TagMutations\\FeedbackItemProviders\\MutationErrorFeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider'] ?? self::getFeedbackItemProvider2Service($container)), 'PoPCMSSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPWPSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider'] ?? self::getFeedbackItemProvider5Service($container)), 'PoPWPSchema\\Meta\\FeedbackItemProviders\\FeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['PoPCMSSchema\\Settings\\FeedbackItemProviders\\FeedbackItemProvider'] ?? self::getFeedbackItemProvider4Service($container)), 'PoPCMSSchema\\Settings\\FeedbackItemProviders\\FeedbackItemProvider');
        $instance->useFeedbackItemProvider(($container->services['GatoGraphQL\\GatoGraphQL\\FeedbackItemProviders\\ErrorFeedbackItemProvider'] ?? self::getErrorFeedbackItemProviderService($container)), 'GatoGraphQL\\GatoGraphQL\\FeedbackItemProviders\\ErrorFeedbackItemProvider');

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Routing\RoutingHelperServiceInterface' shared autowired service.
     *
     * @return \PoP\Root\Routing\RoutingHelperService
     */
    protected static function getRoutingHelperServiceInterfaceService($container)
    {
        $container->services['PoP\\Root\\Routing\\RoutingHelperServiceInterface'] = $instance = new \PoP\Root\Routing\RoutingHelperService();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Routing\RoutingManagerInterface' shared autowired service.
     *
     * @return \PoP\RootWP\Routing\WPQueryRoutingManager
     */
    protected static function getRoutingManagerInterfaceService($container)
    {
        $container->services['PoP\\Root\\Routing\\RoutingManagerInterface'] = $instance = new \PoP\RootWP\Routing\WPQueryRoutingManager();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\State\AppStateProvider' shared autowired service.
     *
     * @return \PoP\Root\State\AppStateProvider
     */
    protected static function getAppStateProvider14Service($container)
    {
        $container->services['PoP\\Root\\State\\AppStateProvider'] = $instance = new \PoP\Root\State\AppStateProvider();

        $instance->setInstanceManager(($container->services['PoP\\Root\\Instances\\InstanceManagerInterface'] ??= new \PoP\Root\Instances\InstanceManager()));

        return $instance;
    }

    /**
     * Gets the public 'PoP\Root\Translation\TranslationAPIInterface' shared autowired service.
     *
     * @return \PoP\RootWP\Translation\TranslationAPI
     */
    protected static function getTranslationAPIInterfaceService($container)
    {
        return $container->services['PoP\\Root\\Translation\\TranslationAPIInterface'] = new \PoP\RootWP\Translation\TranslationAPI();
    }

    /**
     * Gets the public 'persistent_cache_item_pool' shared autowired service.
     *
     * @return \GatoExternalPrefixByGatoGraphQL\Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    protected static function getPersistentCacheItemPoolService($container)
    {
        return $container->services['persistent_cache_item_pool'] = new \GatoExternalPrefixByGatoGraphQL\Symfony\Component\Cache\Adapter\FilesystemAdapter(($container->services['PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface'] ?? self::getCacheConfigurationManagerInterfaceService($container))->getNamespace(), 0, ($container->services['PoP\\ComponentModel\\Cache\\CacheConfigurationManagerInterface'] ?? self::getCacheConfigurationManagerInterfaceService($container))->getDirectory());
    }

    /**
     * Gets the public 'transient_cache_item_pool' shared autowired service.
     *
     * @return \GatoExternalPrefixByGatoGraphQL\Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getTransientCacheItemPoolService($container)
    {
        return $container->services['transient_cache_item_pool'] = new \GatoExternalPrefixByGatoGraphQL\Symfony\Component\Cache\Adapter\ArrayAdapter();
    }
}
